
hal_i2c_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003180  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000124  08003320  08003320  00013320  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003444  08003444  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08003444  08003444  00013444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800344c  0800344c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800344c  0800344c  0001344c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003450  08003450  00013450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003454  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000dc  20000078  080034cc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000154  080034cc  00020154  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004daa  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000131b  00000000  00000000  00024e52  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000004b0  00000000  00000000  00026170  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003f8  00000000  00000000  00026620  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015203  00000000  00000000  00026a18  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005523  00000000  00000000  0003bc1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000818d0  00000000  00000000  0004113e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c2a0e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b64  00000000  00000000  000c2a8c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000078 	.word	0x20000078
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003308 	.word	0x08003308

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000007c 	.word	0x2000007c
 80001dc:	08003308 	.word	0x08003308

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_Init+0x40>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <HAL_Init+0x40>)
 800059a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <HAL_Init+0x40>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <HAL_Init+0x40>)
 80005a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <HAL_Init+0x40>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <HAL_Init+0x40>)
 80005b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 f92b 	bl	8000814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005be:	2000      	movs	r0, #0
 80005c0:	f000 f808 	bl	80005d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c4:	f001 fb8e 	bl	8001ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023c00 	.word	0x40023c00

080005d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_InitTick+0x54>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <HAL_InitTick+0x58>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 f943 	bl	800087e <HAL_SYSTICK_Config>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	e00e      	b.n	8000620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b0f      	cmp	r3, #15
 8000606:	d80a      	bhi.n	800061e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000608:	2200      	movs	r2, #0
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000610:	f000 f90b 	bl	800082a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000614:	4a06      	ldr	r2, [pc, #24]	; (8000630 <HAL_InitTick+0x5c>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800061a:	2300      	movs	r3, #0
 800061c:	e000      	b.n	8000620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800061e:	2301      	movs	r3, #1
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000008 	.word	0x20000008
 800062c:	20000004 	.word	0x20000004
 8000630:	20000000 	.word	0x20000000

08000634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_IncTick+0x20>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_IncTick+0x24>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4413      	add	r3, r2
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <HAL_IncTick+0x24>)
 8000646:	6013      	str	r3, [r2, #0]
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000004 	.word	0x20000004
 8000658:	2000014c 	.word	0x2000014c

0800065c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return uwTick;
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <HAL_GetTick+0x14>)
 8000662:	681b      	ldr	r3, [r3, #0]
}
 8000664:	4618      	mov	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	2000014c 	.word	0x2000014c

08000674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f003 0307 	and.w	r3, r3, #7
 8000682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800068a:	68ba      	ldr	r2, [r7, #8]
 800068c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000690:	4013      	ands	r3, r2
 8000692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800069c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006a6:	4a04      	ldr	r2, [pc, #16]	; (80006b8 <__NVIC_SetPriorityGrouping+0x44>)
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	60d3      	str	r3, [r2, #12]
}
 80006ac:	bf00      	nop
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c0:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <__NVIC_GetPriorityGrouping+0x18>)
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	0a1b      	lsrs	r3, r3, #8
 80006c6:	f003 0307 	and.w	r3, r3, #7
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	db0b      	blt.n	8000702 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	f003 021f 	and.w	r2, r3, #31
 80006f0:	4907      	ldr	r1, [pc, #28]	; (8000710 <__NVIC_EnableIRQ+0x38>)
 80006f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f6:	095b      	lsrs	r3, r3, #5
 80006f8:	2001      	movs	r0, #1
 80006fa:	fa00 f202 	lsl.w	r2, r0, r2
 80006fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	e000e100 	.word	0xe000e100

08000714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	6039      	str	r1, [r7, #0]
 800071e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000724:	2b00      	cmp	r3, #0
 8000726:	db0a      	blt.n	800073e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	b2da      	uxtb	r2, r3
 800072c:	490c      	ldr	r1, [pc, #48]	; (8000760 <__NVIC_SetPriority+0x4c>)
 800072e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000732:	0112      	lsls	r2, r2, #4
 8000734:	b2d2      	uxtb	r2, r2
 8000736:	440b      	add	r3, r1
 8000738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800073c:	e00a      	b.n	8000754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4908      	ldr	r1, [pc, #32]	; (8000764 <__NVIC_SetPriority+0x50>)
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	f003 030f 	and.w	r3, r3, #15
 800074a:	3b04      	subs	r3, #4
 800074c:	0112      	lsls	r2, r2, #4
 800074e:	b2d2      	uxtb	r2, r2
 8000750:	440b      	add	r3, r1
 8000752:	761a      	strb	r2, [r3, #24]
}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	e000e100 	.word	0xe000e100
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000768:	b480      	push	{r7}
 800076a:	b089      	sub	sp, #36	; 0x24
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	f003 0307 	and.w	r3, r3, #7
 800077a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	f1c3 0307 	rsb	r3, r3, #7
 8000782:	2b04      	cmp	r3, #4
 8000784:	bf28      	it	cs
 8000786:	2304      	movcs	r3, #4
 8000788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	3304      	adds	r3, #4
 800078e:	2b06      	cmp	r3, #6
 8000790:	d902      	bls.n	8000798 <NVIC_EncodePriority+0x30>
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	3b03      	subs	r3, #3
 8000796:	e000      	b.n	800079a <NVIC_EncodePriority+0x32>
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800079c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007a0:	69bb      	ldr	r3, [r7, #24]
 80007a2:	fa02 f303 	lsl.w	r3, r2, r3
 80007a6:	43da      	mvns	r2, r3
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	401a      	ands	r2, r3
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ba:	43d9      	mvns	r1, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c0:	4313      	orrs	r3, r2
         );
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3724      	adds	r7, #36	; 0x24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
	...

080007d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3b01      	subs	r3, #1
 80007dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007e0:	d301      	bcc.n	80007e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007e2:	2301      	movs	r3, #1
 80007e4:	e00f      	b.n	8000806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007e6:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <SysTick_Config+0x40>)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ee:	210f      	movs	r1, #15
 80007f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007f4:	f7ff ff8e 	bl	8000714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <SysTick_Config+0x40>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007fe:	4b04      	ldr	r3, [pc, #16]	; (8000810 <SysTick_Config+0x40>)
 8000800:	2207      	movs	r2, #7
 8000802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	e000e010 	.word	0xe000e010

08000814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff ff29 	bl	8000674 <__NVIC_SetPriorityGrouping>
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800082a:	b580      	push	{r7, lr}
 800082c:	b086      	sub	sp, #24
 800082e:	af00      	add	r7, sp, #0
 8000830:	4603      	mov	r3, r0
 8000832:	60b9      	str	r1, [r7, #8]
 8000834:	607a      	str	r2, [r7, #4]
 8000836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800083c:	f7ff ff3e 	bl	80006bc <__NVIC_GetPriorityGrouping>
 8000840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	68b9      	ldr	r1, [r7, #8]
 8000846:	6978      	ldr	r0, [r7, #20]
 8000848:	f7ff ff8e 	bl	8000768 <NVIC_EncodePriority>
 800084c:	4602      	mov	r2, r0
 800084e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000852:	4611      	mov	r1, r2
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff5d 	bl	8000714 <__NVIC_SetPriority>
}
 800085a:	bf00      	nop
 800085c:	3718      	adds	r7, #24
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b082      	sub	sp, #8
 8000866:	af00      	add	r7, sp, #0
 8000868:	4603      	mov	r3, r0
 800086a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800086c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ff31 	bl	80006d8 <__NVIC_EnableIRQ>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b082      	sub	sp, #8
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f7ff ffa2 	bl	80007d0 <SysTick_Config>
 800088c:	4603      	mov	r3, r0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000898:	b480      	push	{r7}
 800089a:	b089      	sub	sp, #36	; 0x24
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
 80008b2:	e159      	b.n	8000b68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80008b4:	2201      	movs	r2, #1
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	697a      	ldr	r2, [r7, #20]
 80008c4:	4013      	ands	r3, r2
 80008c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008c8:	693a      	ldr	r2, [r7, #16]
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	f040 8148 	bne.w	8000b62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	2b02      	cmp	r3, #2
 80008d8:	d003      	beq.n	80008e2 <HAL_GPIO_Init+0x4a>
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	2b12      	cmp	r3, #18
 80008e0:	d123      	bne.n	800092a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	08da      	lsrs	r2, r3, #3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	3208      	adds	r2, #8
 80008ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	f003 0307 	and.w	r3, r3, #7
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	220f      	movs	r2, #15
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	43db      	mvns	r3, r3
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	4013      	ands	r3, r2
 8000904:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	691a      	ldr	r2, [r3, #16]
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	f003 0307 	and.w	r3, r3, #7
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	69ba      	ldr	r2, [r7, #24]
 8000918:	4313      	orrs	r3, r2
 800091a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	08da      	lsrs	r2, r3, #3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3208      	adds	r2, #8
 8000924:	69b9      	ldr	r1, [r7, #24]
 8000926:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
//        GPIOx->AFR[0] = 1 << 30 | 1 << 26;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	2203      	movs	r2, #3
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	43db      	mvns	r3, r3
 800093c:	69ba      	ldr	r2, [r7, #24]
 800093e:	4013      	ands	r3, r2
 8000940:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	f003 0203 	and.w	r2, r3, #3
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	69ba      	ldr	r2, [r7, #24]
 8000954:	4313      	orrs	r3, r2
 8000956:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	69ba      	ldr	r2, [r7, #24]
 800095c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d00b      	beq.n	800097e <HAL_GPIO_Init+0xe6>
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	2b02      	cmp	r3, #2
 800096c:	d007      	beq.n	800097e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000972:	2b11      	cmp	r3, #17
 8000974:	d003      	beq.n	800097e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	2b12      	cmp	r3, #18
 800097c:	d130      	bne.n	80009e0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	2203      	movs	r2, #3
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	43db      	mvns	r3, r3
 8000990:	69ba      	ldr	r2, [r7, #24]
 8000992:	4013      	ands	r3, r2
 8000994:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	68da      	ldr	r2, [r3, #12]
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	69ba      	ldr	r2, [r7, #24]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	69ba      	ldr	r2, [r7, #24]
 80009ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009b4:	2201      	movs	r2, #1
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	43db      	mvns	r3, r3
 80009be:	69ba      	ldr	r2, [r7, #24]
 80009c0:	4013      	ands	r3, r2
 80009c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	091b      	lsrs	r3, r3, #4
 80009ca:	f003 0201 	and.w	r2, r3, #1
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	fa02 f303 	lsl.w	r3, r2, r3
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	69ba      	ldr	r2, [r7, #24]
 80009de:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	2203      	movs	r2, #3
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	43db      	mvns	r3, r3
 80009f2:	69ba      	ldr	r2, [r7, #24]
 80009f4:	4013      	ands	r3, r2
 80009f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	689a      	ldr	r2, [r3, #8]
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	69ba      	ldr	r2, [r7, #24]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	69ba      	ldr	r2, [r7, #24]
 8000a0e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	f000 80a2 	beq.w	8000b62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	4b56      	ldr	r3, [pc, #344]	; (8000b7c <HAL_GPIO_Init+0x2e4>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a26:	4a55      	ldr	r2, [pc, #340]	; (8000b7c <HAL_GPIO_Init+0x2e4>)
 8000a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a2e:	4b53      	ldr	r3, [pc, #332]	; (8000b7c <HAL_GPIO_Init+0x2e4>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a3a:	4a51      	ldr	r2, [pc, #324]	; (8000b80 <HAL_GPIO_Init+0x2e8>)
 8000a3c:	69fb      	ldr	r3, [r7, #28]
 8000a3e:	089b      	lsrs	r3, r3, #2
 8000a40:	3302      	adds	r3, #2
 8000a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	f003 0303 	and.w	r3, r3, #3
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	220f      	movs	r2, #15
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	43db      	mvns	r3, r3
 8000a58:	69ba      	ldr	r2, [r7, #24]
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a48      	ldr	r2, [pc, #288]	; (8000b84 <HAL_GPIO_Init+0x2ec>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d019      	beq.n	8000a9a <HAL_GPIO_Init+0x202>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a47      	ldr	r2, [pc, #284]	; (8000b88 <HAL_GPIO_Init+0x2f0>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d013      	beq.n	8000a96 <HAL_GPIO_Init+0x1fe>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4a46      	ldr	r2, [pc, #280]	; (8000b8c <HAL_GPIO_Init+0x2f4>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d00d      	beq.n	8000a92 <HAL_GPIO_Init+0x1fa>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4a45      	ldr	r2, [pc, #276]	; (8000b90 <HAL_GPIO_Init+0x2f8>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d007      	beq.n	8000a8e <HAL_GPIO_Init+0x1f6>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4a44      	ldr	r2, [pc, #272]	; (8000b94 <HAL_GPIO_Init+0x2fc>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d101      	bne.n	8000a8a <HAL_GPIO_Init+0x1f2>
 8000a86:	2304      	movs	r3, #4
 8000a88:	e008      	b.n	8000a9c <HAL_GPIO_Init+0x204>
 8000a8a:	2307      	movs	r3, #7
 8000a8c:	e006      	b.n	8000a9c <HAL_GPIO_Init+0x204>
 8000a8e:	2303      	movs	r3, #3
 8000a90:	e004      	b.n	8000a9c <HAL_GPIO_Init+0x204>
 8000a92:	2302      	movs	r3, #2
 8000a94:	e002      	b.n	8000a9c <HAL_GPIO_Init+0x204>
 8000a96:	2301      	movs	r3, #1
 8000a98:	e000      	b.n	8000a9c <HAL_GPIO_Init+0x204>
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	69fa      	ldr	r2, [r7, #28]
 8000a9e:	f002 0203 	and.w	r2, r2, #3
 8000aa2:	0092      	lsls	r2, r2, #2
 8000aa4:	4093      	lsls	r3, r2
 8000aa6:	69ba      	ldr	r2, [r7, #24]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000aac:	4934      	ldr	r1, [pc, #208]	; (8000b80 <HAL_GPIO_Init+0x2e8>)
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	089b      	lsrs	r3, r3, #2
 8000ab2:	3302      	adds	r3, #2
 8000ab4:	69ba      	ldr	r2, [r7, #24]
 8000ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000aba:	4b37      	ldr	r3, [pc, #220]	; (8000b98 <HAL_GPIO_Init+0x300>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	43db      	mvns	r3, r3
 8000ac4:	69ba      	ldr	r2, [r7, #24]
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d003      	beq.n	8000ade <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ad6:	69ba      	ldr	r2, [r7, #24]
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ade:	4a2e      	ldr	r2, [pc, #184]	; (8000b98 <HAL_GPIO_Init+0x300>)
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ae4:	4b2c      	ldr	r3, [pc, #176]	; (8000b98 <HAL_GPIO_Init+0x300>)
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	43db      	mvns	r3, r3
 8000aee:	69ba      	ldr	r2, [r7, #24]
 8000af0:	4013      	ands	r3, r2
 8000af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d003      	beq.n	8000b08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000b00:	69ba      	ldr	r2, [r7, #24]
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b08:	4a23      	ldr	r2, [pc, #140]	; (8000b98 <HAL_GPIO_Init+0x300>)
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b0e:	4b22      	ldr	r3, [pc, #136]	; (8000b98 <HAL_GPIO_Init+0x300>)
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	43db      	mvns	r3, r3
 8000b18:	69ba      	ldr	r2, [r7, #24]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d003      	beq.n	8000b32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000b2a:	69ba      	ldr	r2, [r7, #24]
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b32:	4a19      	ldr	r2, [pc, #100]	; (8000b98 <HAL_GPIO_Init+0x300>)
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b38:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <HAL_GPIO_Init+0x300>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	43db      	mvns	r3, r3
 8000b42:	69ba      	ldr	r2, [r7, #24]
 8000b44:	4013      	ands	r3, r2
 8000b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d003      	beq.n	8000b5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000b54:	69ba      	ldr	r2, [r7, #24]
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b5c:	4a0e      	ldr	r2, [pc, #56]	; (8000b98 <HAL_GPIO_Init+0x300>)
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3301      	adds	r3, #1
 8000b66:	61fb      	str	r3, [r7, #28]
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	2b0f      	cmp	r3, #15
 8000b6c:	f67f aea2 	bls.w	80008b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b70:	bf00      	nop
 8000b72:	3724      	adds	r7, #36	; 0x24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40013800 	.word	0x40013800
 8000b84:	40020000 	.word	0x40020000
 8000b88:	40020400 	.word	0x40020400
 8000b8c:	40020800 	.word	0x40020800
 8000b90:	40020c00 	.word	0x40020c00
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40013c00 	.word	0x40013c00

08000b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	807b      	strh	r3, [r7, #2]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bac:	787b      	ldrb	r3, [r7, #1]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d003      	beq.n	8000bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bb2:	887a      	ldrh	r2, [r7, #2]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000bb8:	e003      	b.n	8000bc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bba:	887b      	ldrh	r3, [r7, #2]
 8000bbc:	041a      	lsls	r2, r3, #16
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	619a      	str	r2, [r3, #24]
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	695a      	ldr	r2, [r3, #20]
 8000bde:	887b      	ldrh	r3, [r7, #2]
 8000be0:	401a      	ands	r2, r3
 8000be2:	887b      	ldrh	r3, [r7, #2]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d104      	bne.n	8000bf2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000be8:	887b      	ldrh	r3, [r7, #2]
 8000bea:	041a      	lsls	r2, r3, #16
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000bf0:	e002      	b.n	8000bf8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000bf2:	887a      	ldrh	r2, [r7, #2]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	619a      	str	r2, [r3, #24]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000c0e:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c10:	695a      	ldr	r2, [r3, #20]
 8000c12:	88fb      	ldrh	r3, [r7, #6]
 8000c14:	4013      	ands	r3, r2
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d006      	beq.n	8000c28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c1a:	4a05      	ldr	r2, [pc, #20]	; (8000c30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c1c:	88fb      	ldrh	r3, [r7, #6]
 8000c1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000c20:	2120      	movs	r1, #32
 8000c22:	4804      	ldr	r0, [pc, #16]	; (8000c34 <HAL_GPIO_EXTI_IRQHandler+0x30>)
 8000c24:	f7ff ffd3 	bl	8000bce <HAL_GPIO_TogglePin>
    // HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40013c00 	.word	0x40013c00
 8000c34:	40020000 	.word	0x40020000

08000c38 <I2C_PeripheralClkControl>:
static void I2C_ClearADDRFlag(I2C_TypeDef *pI2Cx);
static void I2C_WriteSlaveAddress(I2C_Handle_t *I2C_handle, uint8_t operation);
static void I2C_ControlAcking(I2C_TypeDef *pI2Cx, uint8_t enable);
static HAL_StatusTypeDef WaitTillTimeout (uint8_t timeout);

void I2C_PeripheralClkControl(I2C_TypeDef *pI2Cx) {
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	if (pI2Cx == I2C1) {
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <I2C_PeripheralClkControl+0x54>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d106      	bne.n	8000c56 <I2C_PeripheralClkControl+0x1e>
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <I2C_PeripheralClkControl+0x58>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4c:	4a10      	ldr	r2, [pc, #64]	; (8000c90 <I2C_PeripheralClkControl+0x58>)
 8000c4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c52:	6413      	str	r3, [r2, #64]	; 0x40
	}

	else if (pI2Cx == I2C3) {
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
	}
}
 8000c54:	e014      	b.n	8000c80 <I2C_PeripheralClkControl+0x48>
	else if (pI2Cx == I2C2) {
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a0e      	ldr	r2, [pc, #56]	; (8000c94 <I2C_PeripheralClkControl+0x5c>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d106      	bne.n	8000c6c <I2C_PeripheralClkControl+0x34>
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <I2C_PeripheralClkControl+0x58>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	4a0b      	ldr	r2, [pc, #44]	; (8000c90 <I2C_PeripheralClkControl+0x58>)
 8000c64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c68:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c6a:	e009      	b.n	8000c80 <I2C_PeripheralClkControl+0x48>
	else if (pI2Cx == I2C3) {
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <I2C_PeripheralClkControl+0x60>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d105      	bne.n	8000c80 <I2C_PeripheralClkControl+0x48>
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <I2C_PeripheralClkControl+0x58>)
 8000c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c78:	4a05      	ldr	r2, [pc, #20]	; (8000c90 <I2C_PeripheralClkControl+0x58>)
 8000c7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c7e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	40005400 	.word	0x40005400
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40005800 	.word	0x40005800
 8000c98:	40005c00 	.word	0x40005c00

08000c9c <I2C_Init>:

void I2C_Init(I2C_Handle_t *I2C_handle) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]

	I2C_PeripheralClkControl(I2C_handle->pI2Cx);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ffc5 	bl	8000c38 <I2C_PeripheralClkControl>

	// control ACK bit
	I2C_handle->pI2Cx->CR1 |= I2C_handle->I2C_Config.I2C_AckControl << 10;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	7a5b      	ldrb	r3, [r3, #9]
 8000cb8:	029b      	lsls	r3, r3, #10
 8000cba:	4619      	mov	r1, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	601a      	str	r2, [r3, #0]

	// device address
	I2C_handle->pI2Cx->OAR1 |= I2C_handle->I2C_Config.I2C_DeviceAddress << 1;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	689a      	ldr	r2, [r3, #8]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	7a1b      	ldrb	r3, [r3, #8]
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	609a      	str	r2, [r3, #8]
	I2C_handle->pI2Cx->OAR1 |= 1 << 14; 		// setting 14th bit to 1 as per datasheet
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	689a      	ldr	r2, [r3, #8]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ce8:	609a      	str	r2, [r3, #8]

	// peripheral clock frequency
	uint32_t peripheralClkFreq = (SystemCoreClock / 1000000) & 0x3f;
 8000cea:	4b23      	ldr	r3, [pc, #140]	; (8000d78 <I2C_Init+0xdc>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a23      	ldr	r2, [pc, #140]	; (8000d7c <I2C_Init+0xe0>)
 8000cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf4:	0c9b      	lsrs	r3, r3, #18
 8000cf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000cfa:	60fb      	str	r3, [r7, #12]
	I2C_handle->pI2Cx->CR2 |= peripheralClkFreq;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	6859      	ldr	r1, [r3, #4]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	605a      	str	r2, [r3, #4]

	//setting CCR register
	if (I2C_handle->I2C_Config.I2C_SCLSpeed == I2C_SCL_SPEED_SM) {
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	4a1b      	ldr	r2, [pc, #108]	; (8000d80 <I2C_Init+0xe4>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d10f      	bne.n	8000d36 <I2C_Init+0x9a>
		uint16_t ccr = SystemCoreClock / (2 * I2C_handle->I2C_Config.I2C_SCLSpeed);
 8000d16:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <I2C_Init+0xdc>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d24:	817b      	strh	r3, [r7, #10]
			//uint16_t ccr = t_high / t_pclk;
		I2C_handle->pI2Cx->CCR |= ccr;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	69d9      	ldr	r1, [r3, #28]
 8000d2c:	897a      	ldrh	r2, [r7, #10]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	430a      	orrs	r2, r1
 8000d34:	61da      	str	r2, [r3, #28]
	}

	// TRise configuration
	if(I2C_handle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM) {
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	4a11      	ldr	r2, [pc, #68]	; (8000d80 <I2C_Init+0xe4>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d80f      	bhi.n	8000d60 <I2C_Init+0xc4>
		I2C_handle->pI2Cx->TRISE |= ( (SystemCoreClock / 1000000 + 1) & 0x3f); // max rise time in SmMode = 1000ns - 0011 1111
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	6a19      	ldr	r1, [r3, #32]
 8000d46:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <I2C_Init+0xdc>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a0c      	ldr	r2, [pc, #48]	; (8000d7c <I2C_Init+0xe0>)
 8000d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d50:	0c9b      	lsrs	r3, r3, #18
 8000d52:	3301      	adds	r3, #1
 8000d54:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	621a      	str	r2, [r3, #32]
	}

	// control peripheral clk and PE
	I2C_handle->pI2Cx->CR1 |= ENABLE;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f042 0201 	orr.w	r2, r2, #1
 8000d6e:	601a      	str	r2, [r3, #0]
}
 8000d70:	bf00      	nop
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000008 	.word	0x20000008
 8000d7c:	431bde83 	.word	0x431bde83
 8000d80:	000186a0 	.word	0x000186a0

08000d84 <GetFlagStatus>:

uint8_t GetFlagStatus(I2C_TypeDef *pI2Cx, uint16_t flag) {
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	807b      	strh	r3, [r7, #2]
	if (pI2Cx->SR1 & flag)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	695a      	ldr	r2, [r3, #20]
 8000d94:	887b      	ldrh	r3, [r7, #2]
 8000d96:	4013      	ands	r3, r2
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <GetFlagStatus+0x1c>
		return FLAG_SET;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e000      	b.n	8000da2 <GetFlagStatus+0x1e>
	return FLAG_NOT_SET;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <GenerateStartCondition>:

void GenerateStartCondition(I2C_Handle_t *I2C_handle) {
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
	I2C_handle->pI2Cx->CR1 |= I2C_CR1_START;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000dc4:	601a      	str	r2, [r3, #0]
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr

08000dd2 <GenerateStopCondition>:

static void GenerateStopCondition(I2C_Handle_t *I2C_handle) {
 8000dd2:	b480      	push	{r7}
 8000dd4:	b083      	sub	sp, #12
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
	I2C_handle->pI2Cx->CR1 |= I2C_CR1_STOP;
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681a      	ldr	r2, [r3, #0]
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000de8:	601a      	str	r2, [r3, #0]
}
 8000dea:	bf00      	nop
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <I2C_WriteSlaveAddress>:

static void I2C_WriteSlaveAddress(I2C_Handle_t *I2C_handle, uint8_t operation) {
 8000df6:	b480      	push	{r7}
 8000df8:	b085      	sub	sp, #20
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
 8000dfe:	460b      	mov	r3, r1
 8000e00:	70fb      	strb	r3, [r7, #3]
	uint8_t slaveAddress = I2C_handle->I2C_Config.I2C_DeviceAddress;
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	7a1b      	ldrb	r3, [r3, #8]
 8000e06:	73fb      	strb	r3, [r7, #15]
	slaveAddress <<= 1;
 8000e08:	7bfb      	ldrb	r3, [r7, #15]
 8000e0a:	005b      	lsls	r3, r3, #1
 8000e0c:	73fb      	strb	r3, [r7, #15]
	slaveAddress = operation == WRITE ? (slaveAddress & ~1) : (slaveAddress | 1);
 8000e0e:	78fb      	ldrb	r3, [r7, #3]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d104      	bne.n	8000e1e <I2C_WriteSlaveAddress+0x28>
 8000e14:	7bfb      	ldrb	r3, [r7, #15]
 8000e16:	f023 0301 	bic.w	r3, r3, #1
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	e003      	b.n	8000e26 <I2C_WriteSlaveAddress+0x30>
 8000e1e:	7bfb      	ldrb	r3, [r7, #15]
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	b2db      	uxtb	r3, r3
 8000e26:	73fb      	strb	r3, [r7, #15]

	I2C_handle->pI2Cx->DR = slaveAddress;
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	7bfa      	ldrb	r2, [r7, #15]
 8000e2e:	611a      	str	r2, [r3, #16]
}
 8000e30:	bf00      	nop
 8000e32:	3714      	adds	r7, #20
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <I2C_ClearADDRFlag>:

// read SR1 and SR2 registers to clear ADDR flag
static void I2C_ClearADDRFlag(I2C_TypeDef *pI2Cx) {
 8000e3c:	b480      	push	{r7}
 8000e3e:	b085      	sub	sp, #20
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead;
	dummyRead = pI2Cx->SR1;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	695b      	ldr	r3, [r3, #20]
 8000e48:	60fb      	str	r3, [r7, #12]
    dummyRead = pI2Cx->SR2;
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	699b      	ldr	r3, [r3, #24]
 8000e4e:	60fb      	str	r3, [r7, #12]
}
 8000e50:	bf00      	nop
 8000e52:	3714      	adds	r7, #20
 8000e54:	46bd      	mov	sp, r7
 8000e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5a:	4770      	bx	lr

08000e5c <I2C_ControlAcking>:
static void I2C_ControlAcking(I2C_TypeDef *pI2Cx, uint8_t enable)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b083      	sub	sp, #12
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
 8000e64:	460b      	mov	r3, r1
 8000e66:	70fb      	strb	r3, [r7, #3]
//	pI2Cx->CR1 = enable ? (pI2Cx->CR1 | (1 << I2C_CR1_ACK)) : (pI2Cx->CR1 & ~(1 << I2C_CR1_ACK));
	if (enable)
 8000e68:	78fb      	ldrb	r3, [r7, #3]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d006      	beq.n	8000e7c <I2C_ControlAcking+0x20>
	{
		pI2Cx->CR1 |= I2C_CR1_ACK;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(I2C_CR1_ACK);
	}
}
 8000e7a:	e005      	b.n	8000e88 <I2C_ControlAcking+0x2c>
		pI2Cx->CR1 &= ~(I2C_CR1_ACK);
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	681b      	ldr	r3, [r3, #0]
 8000e80:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	601a      	str	r2, [r3, #0]
}
 8000e88:	bf00      	nop
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <HAL_I2C_Master_Transmit>:
HAL_StatusTypeDef HAL_I2C_Master_Transmit (I2C_Handle_t *I2C_handle, uint8_t *data, uint8_t size)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	71fb      	strb	r3, [r7, #7]
	// generate start condition
	GenerateStartCondition(I2C_handle);
 8000ea2:	68f8      	ldr	r0, [r7, #12]
 8000ea4:	f7ff ff83 	bl	8000dae <GenerateStartCondition>

	// validate the completion of start condition
	while (!GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_SB) && WaitTillTimeout(5));
 8000ea8:	bf00      	nop
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	2101      	movs	r1, #1
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ff67 	bl	8000d84 <GetFlagStatus>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d105      	bne.n	8000ec8 <HAL_I2C_Master_Transmit+0x34>
 8000ebc:	2005      	movs	r0, #5
 8000ebe:	f000 f992 	bl	80011e6 <WaitTillTimeout>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d1f0      	bne.n	8000eaa <HAL_I2C_Master_Transmit+0x16>

	// write slave address along with write bit
	I2C_WriteSlaveAddress(I2C_handle, WRITE);
 8000ec8:	2100      	movs	r1, #0
 8000eca:	68f8      	ldr	r0, [r7, #12]
 8000ecc:	f7ff ff93 	bl	8000df6 <I2C_WriteSlaveAddress>

	// wait for address to be sent
	while (!GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_ADDR) && WaitTillTimeout(5));
 8000ed0:	bf00      	nop
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	2102      	movs	r1, #2
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff53 	bl	8000d84 <GetFlagStatus>
 8000ede:	4603      	mov	r3, r0
 8000ee0:	2b00      	cmp	r3, #0
 8000ee2:	d105      	bne.n	8000ef0 <HAL_I2C_Master_Transmit+0x5c>
 8000ee4:	2005      	movs	r0, #5
 8000ee6:	f000 f97e 	bl	80011e6 <WaitTillTimeout>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d1f0      	bne.n	8000ed2 <HAL_I2C_Master_Transmit+0x3e>

	// clear address flag
	I2C_ClearADDRFlag(I2C_handle->pI2Cx);
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	4618      	mov	r0, r3
 8000ef6:	f7ff ffa1 	bl	8000e3c <I2C_ClearADDRFlag>

	/* write to the SDA lie */

	// wait for TXE bit to set
	while(!GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_TXE) && WaitTillTimeout(5));
 8000efa:	bf00      	nop
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	2180      	movs	r1, #128	; 0x80
 8000f02:	4618      	mov	r0, r3
 8000f04:	f7ff ff3e 	bl	8000d84 <GetFlagStatus>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d130      	bne.n	8000f70 <HAL_I2C_Master_Transmit+0xdc>
 8000f0e:	2005      	movs	r0, #5
 8000f10:	f000 f969 	bl	80011e6 <WaitTillTimeout>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d1f0      	bne.n	8000efc <HAL_I2C_Master_Transmit+0x68>

	for (; size > 0; size--)
 8000f1a:	e029      	b.n	8000f70 <HAL_I2C_Master_Transmit+0xdc>
	{
		// making sure data register is empty prior to writing to it
		while (!GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_TXE) && WaitTillTimeout(5));
 8000f1c:	bf00      	nop
 8000f1e:	68fb      	ldr	r3, [r7, #12]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	2180      	movs	r1, #128	; 0x80
 8000f24:	4618      	mov	r0, r3
 8000f26:	f7ff ff2d 	bl	8000d84 <GetFlagStatus>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d105      	bne.n	8000f3c <HAL_I2C_Master_Transmit+0xa8>
 8000f30:	2005      	movs	r0, #5
 8000f32:	f000 f958 	bl	80011e6 <WaitTillTimeout>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d1f0      	bne.n	8000f1e <HAL_I2C_Master_Transmit+0x8a>

		I2C_handle->pI2Cx->DR = *data++;
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	1c5a      	adds	r2, r3, #1
 8000f40:	60ba      	str	r2, [r7, #8]
 8000f42:	781a      	ldrb	r2, [r3, #0]
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	611a      	str	r2, [r3, #16]

		while (!GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_BTF) && WaitTillTimeout(5));
 8000f4a:	bf00      	nop
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2104      	movs	r1, #4
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff ff16 	bl	8000d84 <GetFlagStatus>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d105      	bne.n	8000f6a <HAL_I2C_Master_Transmit+0xd6>
 8000f5e:	2005      	movs	r0, #5
 8000f60:	f000 f941 	bl	80011e6 <WaitTillTimeout>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d1f0      	bne.n	8000f4c <HAL_I2C_Master_Transmit+0xb8>
	for (; size > 0; size--)
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	3b01      	subs	r3, #1
 8000f6e:	71fb      	strb	r3, [r7, #7]
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d1d2      	bne.n	8000f1c <HAL_I2C_Master_Transmit+0x88>
//			return HAL_ERROR;
//		}
	}


	while(! GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_TXE) );
 8000f76:	bf00      	nop
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	2180      	movs	r1, #128	; 0x80
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff ff00 	bl	8000d84 <GetFlagStatus>
 8000f84:	4603      	mov	r3, r0
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d0f6      	beq.n	8000f78 <HAL_I2C_Master_Transmit+0xe4>

	while(! GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_BTF) );
 8000f8a:	bf00      	nop
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	2104      	movs	r1, #4
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff fef6 	bl	8000d84 <GetFlagStatus>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d0f6      	beq.n	8000f8c <HAL_I2C_Master_Transmit+0xf8>

	GenerateStopCondition(I2C_handle);
 8000f9e:	68f8      	ldr	r0, [r7, #12]
 8000fa0:	f7ff ff17 	bl	8000dd2 <GenerateStopCondition>

	return HAL_OK;
 8000fa4:	2300      	movs	r3, #0
}
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	3710      	adds	r7, #16
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <HAL_I2C_Master_Receive>:

void HAL_I2C_Master_Receive (I2C_Handle_t *I2C_handle, uint8_t *rxBuffer, uint8_t size)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b084      	sub	sp, #16
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	60f8      	str	r0, [r7, #12]
 8000fb6:	60b9      	str	r1, [r7, #8]
 8000fb8:	4613      	mov	r3, r2
 8000fba:	71fb      	strb	r3, [r7, #7]
	// generate start condition
	GenerateStartCondition(I2C_handle);
 8000fbc:	68f8      	ldr	r0, [r7, #12]
 8000fbe:	f7ff fef6 	bl	8000dae <GenerateStartCondition>

	// validate the completion of start condition
	while (!GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_SB));
 8000fc2:	bf00      	nop
 8000fc4:	68fb      	ldr	r3, [r7, #12]
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	2101      	movs	r1, #1
 8000fca:	4618      	mov	r0, r3
 8000fcc:	f7ff feda 	bl	8000d84 <GetFlagStatus>
 8000fd0:	4603      	mov	r3, r0
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d0f6      	beq.n	8000fc4 <HAL_I2C_Master_Receive+0x16>

	// write slave address
	I2C_WriteSlaveAddress(I2C_handle, READ);
 8000fd6:	2101      	movs	r1, #1
 8000fd8:	68f8      	ldr	r0, [r7, #12]
 8000fda:	f7ff ff0c 	bl	8000df6 <I2C_WriteSlaveAddress>

	// wait for address to be sent
	while (!GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_ADDR) && WaitTillTimeout(5));
 8000fde:	bf00      	nop
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	2102      	movs	r1, #2
 8000fe6:	4618      	mov	r0, r3
 8000fe8:	f7ff fecc 	bl	8000d84 <GetFlagStatus>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d105      	bne.n	8000ffe <HAL_I2C_Master_Receive+0x50>
 8000ff2:	2005      	movs	r0, #5
 8000ff4:	f000 f8f7 	bl	80011e6 <WaitTillTimeout>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d1f0      	bne.n	8000fe0 <HAL_I2C_Master_Receive+0x32>

	switch (size) {
 8000ffe:	79fb      	ldrb	r3, [r7, #7]
 8001000:	2b01      	cmp	r3, #1
 8001002:	d002      	beq.n	800100a <HAL_I2C_Master_Receive+0x5c>
 8001004:	2b02      	cmp	r3, #2
 8001006:	d00f      	beq.n	8001028 <HAL_I2C_Master_Receive+0x7a>
 8001008:	e022      	b.n	8001050 <HAL_I2C_Master_Receive+0xa2>
		case 1:
			I2C_ControlAcking(I2C_handle->pI2Cx, RESET);	// disable ACK
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	2100      	movs	r1, #0
 8001010:	4618      	mov	r0, r3
 8001012:	f7ff ff23 	bl	8000e5c <I2C_ControlAcking>
			I2C_ClearADDRFlag(I2C_handle->pI2Cx);			// clear ADDR flag
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ff0e 	bl	8000e3c <I2C_ClearADDRFlag>
			GenerateStopCondition(I2C_handle);				// generate STOP condition
 8001020:	68f8      	ldr	r0, [r7, #12]
 8001022:	f7ff fed6 	bl	8000dd2 <GenerateStopCondition>
			break;
 8001026:	e01e      	b.n	8001066 <HAL_I2C_Master_Receive+0xb8>

		case 2:
			I2C_ControlAcking(I2C_handle->pI2Cx, RESET);	// disable ACK
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	2100      	movs	r1, #0
 800102e:	4618      	mov	r0, r3
 8001030:	f7ff ff14 	bl	8000e5c <I2C_ControlAcking>
			I2C_handle->pI2Cx->CR1 |= 1 << 11;				// set POS
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	681a      	ldr	r2, [r3, #0]
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001042:	601a      	str	r2, [r3, #0]
			I2C_ClearADDRFlag(I2C_handle->pI2Cx);			// clear ADDR flag
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4618      	mov	r0, r3
 800104a:	f7ff fef7 	bl	8000e3c <I2C_ClearADDRFlag>
			break;
 800104e:	e00a      	b.n	8001066 <HAL_I2C_Master_Receive+0xb8>

		default:
			I2C_ControlAcking(I2C_handle->pI2Cx, SET);		// Enable ACK
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2101      	movs	r1, #1
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff ff00 	bl	8000e5c <I2C_ControlAcking>
			I2C_ClearADDRFlag(I2C_handle->pI2Cx);			// clear ADDR flag
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff feeb 	bl	8000e3c <I2C_ClearADDRFlag>

	}

	while (size > 0) {
 8001066:	e0b6      	b.n	80011d6 <HAL_I2C_Master_Receive+0x228>
		if (size <= 3) {
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	2b03      	cmp	r3, #3
 800106c:	f200 8097 	bhi.w	800119e <HAL_I2C_Master_Receive+0x1f0>
			if (size == 1) {
 8001070:	79fb      	ldrb	r3, [r7, #7]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d11c      	bne.n	80010b0 <HAL_I2C_Master_Receive+0x102>
					// disable ACK
					I2C_ControlAcking(I2C_handle->pI2Cx, RESET);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	2100      	movs	r1, #0
 800107c:	4618      	mov	r0, r3
 800107e:	f7ff feed 	bl	8000e5c <I2C_ControlAcking>

					// clear the ADDR flag
					I2C_ClearADDRFlag(I2C_handle->pI2Cx);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	4618      	mov	r0, r3
 8001088:	f7ff fed8 	bl	8000e3c <I2C_ClearADDRFlag>

					// wait till RXNE = 1
					while (!GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_RXNE));
 800108c:	bf00      	nop
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	2140      	movs	r1, #64	; 0x40
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff fe75 	bl	8000d84 <GetFlagStatus>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d0f6      	beq.n	800108e <HAL_I2C_Master_Receive+0xe0>

					// generate stop
					GenerateStopCondition(I2C_handle);
 80010a0:	68f8      	ldr	r0, [r7, #12]
 80010a2:	f7ff fe96 	bl	8000dd2 <GenerateStopCondition>

					// read data
					rxBuffer = I2C_handle->pI2Cx->DR;
 80010a6:	68fb      	ldr	r3, [r7, #12]
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	691b      	ldr	r3, [r3, #16]
 80010ac:	60bb      	str	r3, [r7, #8]
 80010ae:	e092      	b.n	80011d6 <HAL_I2C_Master_Receive+0x228>

			}

			else if (size == 2) {
 80010b0:	79fb      	ldrb	r3, [r7, #7]
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d122      	bne.n	80010fc <HAL_I2C_Master_Receive+0x14e>

				while(!GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_BTF) && WaitTillTimeout(50));
 80010b6:	bf00      	nop
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	2104      	movs	r1, #4
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff fe60 	bl	8000d84 <GetFlagStatus>
 80010c4:	4603      	mov	r3, r0
 80010c6:	2b00      	cmp	r3, #0
 80010c8:	d105      	bne.n	80010d6 <HAL_I2C_Master_Receive+0x128>
 80010ca:	2032      	movs	r0, #50	; 0x32
 80010cc:	f000 f88b 	bl	80011e6 <WaitTillTimeout>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d1f0      	bne.n	80010b8 <HAL_I2C_Master_Receive+0x10a>
				GenerateStopCondition(I2C_handle);
 80010d6:	68f8      	ldr	r0, [r7, #12]
 80010d8:	f7ff fe7b 	bl	8000dd2 <GenerateStopCondition>
				*rxBuffer = (uint8_t) I2C_handle->pI2Cx->DR;
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	691b      	ldr	r3, [r3, #16]
 80010e2:	b2da      	uxtb	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	701a      	strb	r2, [r3, #0]
				rxBuffer++;
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	3301      	adds	r3, #1
 80010ec:	60bb      	str	r3, [r7, #8]
				*rxBuffer = (uint8_t) I2C_handle->pI2Cx->DR;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	691b      	ldr	r3, [r3, #16]
 80010f4:	b2da      	uxtb	r2, r3
 80010f6:	68bb      	ldr	r3, [r7, #8]
 80010f8:	701a      	strb	r2, [r3, #0]
 80010fa:	e06c      	b.n	80011d6 <HAL_I2C_Master_Receive+0x228>
			}
			else if (size == 3) {
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	2b03      	cmp	r3, #3
 8001100:	d169      	bne.n	80011d6 <HAL_I2C_Master_Receive+0x228>
				while (!GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_BTF) && WaitTillTimeout(5));
 8001102:	bf00      	nop
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	2104      	movs	r1, #4
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff fe3a 	bl	8000d84 <GetFlagStatus>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d105      	bne.n	8001122 <HAL_I2C_Master_Receive+0x174>
 8001116:	2005      	movs	r0, #5
 8001118:	f000 f865 	bl	80011e6 <WaitTillTimeout>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d1f0      	bne.n	8001104 <HAL_I2C_Master_Receive+0x156>

				// disable ACK so NACK is sent upon reception of the last byte
				I2C_ControlAcking(I2C_handle->pI2Cx, DISABLE);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff fe97 	bl	8000e5c <I2C_ControlAcking>

				// read the first byte
				*rxBuffer = (uint8_t) I2C_handle->pI2Cx->DR;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	691b      	ldr	r3, [r3, #16]
 8001134:	b2da      	uxtb	r2, r3
 8001136:	68bb      	ldr	r3, [r7, #8]
 8001138:	701a      	strb	r2, [r3, #0]
				rxBuffer++;
 800113a:	68bb      	ldr	r3, [r7, #8]
 800113c:	3301      	adds	r3, #1
 800113e:	60bb      	str	r3, [r7, #8]

				size--;
 8001140:	79fb      	ldrb	r3, [r7, #7]
 8001142:	3b01      	subs	r3, #1
 8001144:	71fb      	strb	r3, [r7, #7]

				while (!GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_BTF) && WaitTillTimeout(5));
 8001146:	bf00      	nop
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	2104      	movs	r1, #4
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fe18 	bl	8000d84 <GetFlagStatus>
 8001154:	4603      	mov	r3, r0
 8001156:	2b00      	cmp	r3, #0
 8001158:	d105      	bne.n	8001166 <HAL_I2C_Master_Receive+0x1b8>
 800115a:	2005      	movs	r0, #5
 800115c:	f000 f843 	bl	80011e6 <WaitTillTimeout>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d1f0      	bne.n	8001148 <HAL_I2C_Master_Receive+0x19a>
				GenerateStopCondition(I2C_handle);
 8001166:	68f8      	ldr	r0, [r7, #12]
 8001168:	f7ff fe33 	bl	8000dd2 <GenerateStopCondition>

				// read the second byte
				*rxBuffer = (uint8_t) I2C_handle->pI2Cx->DR;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	691b      	ldr	r3, [r3, #16]
 8001172:	b2da      	uxtb	r2, r3
 8001174:	68bb      	ldr	r3, [r7, #8]
 8001176:	701a      	strb	r2, [r3, #0]
				rxBuffer++;
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	3301      	adds	r3, #1
 800117c:	60bb      	str	r3, [r7, #8]

				size--;
 800117e:	79fb      	ldrb	r3, [r7, #7]
 8001180:	3b01      	subs	r3, #1
 8001182:	71fb      	strb	r3, [r7, #7]

				// read the third byte
				*rxBuffer = (uint8_t) I2C_handle->pI2Cx->DR;
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	691b      	ldr	r3, [r3, #16]
 800118a:	b2da      	uxtb	r2, r3
 800118c:	68bb      	ldr	r3, [r7, #8]
 800118e:	701a      	strb	r2, [r3, #0]
				rxBuffer++;
 8001190:	68bb      	ldr	r3, [r7, #8]
 8001192:	3301      	adds	r3, #1
 8001194:	60bb      	str	r3, [r7, #8]

				size--;
 8001196:	79fb      	ldrb	r3, [r7, #7]
 8001198:	3b01      	subs	r3, #1
 800119a:	71fb      	strb	r3, [r7, #7]
 800119c:	e01b      	b.n	80011d6 <HAL_I2C_Master_Receive+0x228>
			}

		}
		// > 3 bytes
		else {
			while (!GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_RXNE) && WaitTillTimeout(5));
 800119e:	bf00      	nop
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	2140      	movs	r1, #64	; 0x40
 80011a6:	4618      	mov	r0, r3
 80011a8:	f7ff fdec 	bl	8000d84 <GetFlagStatus>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d105      	bne.n	80011be <HAL_I2C_Master_Receive+0x210>
 80011b2:	2005      	movs	r0, #5
 80011b4:	f000 f817 	bl	80011e6 <WaitTillTimeout>
 80011b8:	4603      	mov	r3, r0
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d1f0      	bne.n	80011a0 <HAL_I2C_Master_Receive+0x1f2>

			// reading the byte
			*rxBuffer = (uint8_t) I2C_handle->pI2Cx->DR;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	691b      	ldr	r3, [r3, #16]
 80011c4:	b2da      	uxtb	r2, r3
 80011c6:	68bb      	ldr	r3, [r7, #8]
 80011c8:	701a      	strb	r2, [r3, #0]
			rxBuffer++;
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	3301      	adds	r3, #1
 80011ce:	60bb      	str	r3, [r7, #8]

			size--;
 80011d0:	79fb      	ldrb	r3, [r7, #7]
 80011d2:	3b01      	subs	r3, #1
 80011d4:	71fb      	strb	r3, [r7, #7]
	while (size > 0) {
 80011d6:	79fb      	ldrb	r3, [r7, #7]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	f47f af45 	bne.w	8001068 <HAL_I2C_Master_Receive+0xba>

		}
	}
}
 80011de:	bf00      	nop
 80011e0:	3710      	adds	r7, #16
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}

080011e6 <WaitTillTimeout>:

static HAL_StatusTypeDef WaitTillTimeout (uint8_t timeout)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b084      	sub	sp, #16
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	4603      	mov	r3, r0
 80011ee:	71fb      	strb	r3, [r7, #7]
	uint8_t prevTicks = HAL_GetTick(); // current ticks in ms
 80011f0:	f7ff fa34 	bl	800065c <HAL_GetTick>
 80011f4:	4603      	mov	r3, r0
 80011f6:	73fb      	strb	r3, [r7, #15]
	while ((HAL_GetTick() - prevTicks) < timeout);
 80011f8:	bf00      	nop
 80011fa:	f7ff fa2f 	bl	800065c <HAL_GetTick>
 80011fe:	4602      	mov	r2, r0
 8001200:	7bfb      	ldrb	r3, [r7, #15]
 8001202:	1ad2      	subs	r2, r2, r3
 8001204:	79fb      	ldrb	r3, [r7, #7]
 8001206:	429a      	cmp	r2, r3
 8001208:	d3f7      	bcc.n	80011fa <WaitTillTimeout+0x14>
	return HAL_OK;
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001222:	2301      	movs	r3, #1
 8001224:	e22d      	b.n	8001682 <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0301 	and.w	r3, r3, #1
 800122e:	2b00      	cmp	r3, #0
 8001230:	d075      	beq.n	800131e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001232:	4ba3      	ldr	r3, [pc, #652]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f003 030c 	and.w	r3, r3, #12
 800123a:	2b04      	cmp	r3, #4
 800123c:	d00c      	beq.n	8001258 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800123e:	4ba0      	ldr	r3, [pc, #640]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001246:	2b08      	cmp	r3, #8
 8001248:	d112      	bne.n	8001270 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800124a:	4b9d      	ldr	r3, [pc, #628]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001252:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001256:	d10b      	bne.n	8001270 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001258:	4b99      	ldr	r3, [pc, #612]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001260:	2b00      	cmp	r3, #0
 8001262:	d05b      	beq.n	800131c <HAL_RCC_OscConfig+0x108>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d157      	bne.n	800131c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800126c:	2301      	movs	r3, #1
 800126e:	e208      	b.n	8001682 <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001278:	d106      	bne.n	8001288 <HAL_RCC_OscConfig+0x74>
 800127a:	4b91      	ldr	r3, [pc, #580]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	4a90      	ldr	r2, [pc, #576]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001280:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001284:	6013      	str	r3, [r2, #0]
 8001286:	e01d      	b.n	80012c4 <HAL_RCC_OscConfig+0xb0>
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001290:	d10c      	bne.n	80012ac <HAL_RCC_OscConfig+0x98>
 8001292:	4b8b      	ldr	r3, [pc, #556]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	4a8a      	ldr	r2, [pc, #552]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001298:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800129c:	6013      	str	r3, [r2, #0]
 800129e:	4b88      	ldr	r3, [pc, #544]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	4a87      	ldr	r2, [pc, #540]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80012a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012a8:	6013      	str	r3, [r2, #0]
 80012aa:	e00b      	b.n	80012c4 <HAL_RCC_OscConfig+0xb0>
 80012ac:	4b84      	ldr	r3, [pc, #528]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a83      	ldr	r2, [pc, #524]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80012b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012b6:	6013      	str	r3, [r2, #0]
 80012b8:	4b81      	ldr	r3, [pc, #516]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a80      	ldr	r2, [pc, #512]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80012be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d013      	beq.n	80012f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012cc:	f7ff f9c6 	bl	800065c <HAL_GetTick>
 80012d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012d2:	e008      	b.n	80012e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012d4:	f7ff f9c2 	bl	800065c <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	2b64      	cmp	r3, #100	; 0x64
 80012e0:	d901      	bls.n	80012e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80012e2:	2303      	movs	r3, #3
 80012e4:	e1cd      	b.n	8001682 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80012e6:	4b76      	ldr	r3, [pc, #472]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d0f0      	beq.n	80012d4 <HAL_RCC_OscConfig+0xc0>
 80012f2:	e014      	b.n	800131e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012f4:	f7ff f9b2 	bl	800065c <HAL_GetTick>
 80012f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012fa:	e008      	b.n	800130e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80012fc:	f7ff f9ae 	bl	800065c <HAL_GetTick>
 8001300:	4602      	mov	r2, r0
 8001302:	693b      	ldr	r3, [r7, #16]
 8001304:	1ad3      	subs	r3, r2, r3
 8001306:	2b64      	cmp	r3, #100	; 0x64
 8001308:	d901      	bls.n	800130e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e1b9      	b.n	8001682 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800130e:	4b6c      	ldr	r3, [pc, #432]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001316:	2b00      	cmp	r3, #0
 8001318:	d1f0      	bne.n	80012fc <HAL_RCC_OscConfig+0xe8>
 800131a:	e000      	b.n	800131e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800131c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	2b00      	cmp	r3, #0
 8001328:	d063      	beq.n	80013f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800132a:	4b65      	ldr	r3, [pc, #404]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 800132c:	689b      	ldr	r3, [r3, #8]
 800132e:	f003 030c 	and.w	r3, r3, #12
 8001332:	2b00      	cmp	r3, #0
 8001334:	d00b      	beq.n	800134e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001336:	4b62      	ldr	r3, [pc, #392]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800133e:	2b08      	cmp	r3, #8
 8001340:	d11c      	bne.n	800137c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001342:	4b5f      	ldr	r3, [pc, #380]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800134a:	2b00      	cmp	r3, #0
 800134c:	d116      	bne.n	800137c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800134e:	4b5c      	ldr	r3, [pc, #368]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d005      	beq.n	8001366 <HAL_RCC_OscConfig+0x152>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	68db      	ldr	r3, [r3, #12]
 800135e:	2b01      	cmp	r3, #1
 8001360:	d001      	beq.n	8001366 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001362:	2301      	movs	r3, #1
 8001364:	e18d      	b.n	8001682 <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001366:	4b56      	ldr	r3, [pc, #344]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	691b      	ldr	r3, [r3, #16]
 8001372:	00db      	lsls	r3, r3, #3
 8001374:	4952      	ldr	r1, [pc, #328]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001376:	4313      	orrs	r3, r2
 8001378:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800137a:	e03a      	b.n	80013f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d020      	beq.n	80013c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001384:	4b4f      	ldr	r3, [pc, #316]	; (80014c4 <HAL_RCC_OscConfig+0x2b0>)
 8001386:	2201      	movs	r2, #1
 8001388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800138a:	f7ff f967 	bl	800065c <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001392:	f7ff f963 	bl	800065c <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e16e      	b.n	8001682 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013a4:	4b46      	ldr	r3, [pc, #280]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 0302 	and.w	r3, r3, #2
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0f0      	beq.n	8001392 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013b0:	4b43      	ldr	r3, [pc, #268]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	691b      	ldr	r3, [r3, #16]
 80013bc:	00db      	lsls	r3, r3, #3
 80013be:	4940      	ldr	r1, [pc, #256]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80013c0:	4313      	orrs	r3, r2
 80013c2:	600b      	str	r3, [r1, #0]
 80013c4:	e015      	b.n	80013f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013c6:	4b3f      	ldr	r3, [pc, #252]	; (80014c4 <HAL_RCC_OscConfig+0x2b0>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013cc:	f7ff f946 	bl	800065c <HAL_GetTick>
 80013d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d2:	e008      	b.n	80013e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013d4:	f7ff f942 	bl	800065c <HAL_GetTick>
 80013d8:	4602      	mov	r2, r0
 80013da:	693b      	ldr	r3, [r7, #16]
 80013dc:	1ad3      	subs	r3, r2, r3
 80013de:	2b02      	cmp	r3, #2
 80013e0:	d901      	bls.n	80013e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80013e2:	2303      	movs	r3, #3
 80013e4:	e14d      	b.n	8001682 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013e6:	4b36      	ldr	r3, [pc, #216]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	f003 0302 	and.w	r3, r3, #2
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d1f0      	bne.n	80013d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f003 0308 	and.w	r3, r3, #8
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d030      	beq.n	8001460 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	695b      	ldr	r3, [r3, #20]
 8001402:	2b00      	cmp	r3, #0
 8001404:	d016      	beq.n	8001434 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001406:	4b30      	ldr	r3, [pc, #192]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001408:	2201      	movs	r2, #1
 800140a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800140c:	f7ff f926 	bl	800065c <HAL_GetTick>
 8001410:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001412:	e008      	b.n	8001426 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001414:	f7ff f922 	bl	800065c <HAL_GetTick>
 8001418:	4602      	mov	r2, r0
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d901      	bls.n	8001426 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001422:	2303      	movs	r3, #3
 8001424:	e12d      	b.n	8001682 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001426:	4b26      	ldr	r3, [pc, #152]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800142a:	f003 0302 	and.w	r3, r3, #2
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0f0      	beq.n	8001414 <HAL_RCC_OscConfig+0x200>
 8001432:	e015      	b.n	8001460 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001434:	4b24      	ldr	r3, [pc, #144]	; (80014c8 <HAL_RCC_OscConfig+0x2b4>)
 8001436:	2200      	movs	r2, #0
 8001438:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800143a:	f7ff f90f 	bl	800065c <HAL_GetTick>
 800143e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001440:	e008      	b.n	8001454 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001442:	f7ff f90b 	bl	800065c <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	693b      	ldr	r3, [r7, #16]
 800144a:	1ad3      	subs	r3, r2, r3
 800144c:	2b02      	cmp	r3, #2
 800144e:	d901      	bls.n	8001454 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001450:	2303      	movs	r3, #3
 8001452:	e116      	b.n	8001682 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001454:	4b1a      	ldr	r3, [pc, #104]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001456:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001458:	f003 0302 	and.w	r3, r3, #2
 800145c:	2b00      	cmp	r3, #0
 800145e:	d1f0      	bne.n	8001442 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0304 	and.w	r3, r3, #4
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 80a0 	beq.w	80015ae <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800146e:	2300      	movs	r3, #0
 8001470:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001472:	4b13      	ldr	r3, [pc, #76]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800147a:	2b00      	cmp	r3, #0
 800147c:	d10f      	bne.n	800149e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	60fb      	str	r3, [r7, #12]
 8001482:	4b0f      	ldr	r3, [pc, #60]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001486:	4a0e      	ldr	r2, [pc, #56]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001488:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800148c:	6413      	str	r3, [r2, #64]	; 0x40
 800148e:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <HAL_RCC_OscConfig+0x2ac>)
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001496:	60fb      	str	r3, [r7, #12]
 8001498:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800149a:	2301      	movs	r3, #1
 800149c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800149e:	4b0b      	ldr	r3, [pc, #44]	; (80014cc <HAL_RCC_OscConfig+0x2b8>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d121      	bne.n	80014ee <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <HAL_RCC_OscConfig+0x2b8>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a07      	ldr	r2, [pc, #28]	; (80014cc <HAL_RCC_OscConfig+0x2b8>)
 80014b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014b6:	f7ff f8d1 	bl	800065c <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014bc:	e011      	b.n	80014e2 <HAL_RCC_OscConfig+0x2ce>
 80014be:	bf00      	nop
 80014c0:	40023800 	.word	0x40023800
 80014c4:	42470000 	.word	0x42470000
 80014c8:	42470e80 	.word	0x42470e80
 80014cc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014d0:	f7ff f8c4 	bl	800065c <HAL_GetTick>
 80014d4:	4602      	mov	r2, r0
 80014d6:	693b      	ldr	r3, [r7, #16]
 80014d8:	1ad3      	subs	r3, r2, r3
 80014da:	2b02      	cmp	r3, #2
 80014dc:	d901      	bls.n	80014e2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80014de:	2303      	movs	r3, #3
 80014e0:	e0cf      	b.n	8001682 <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014e2:	4b6a      	ldr	r3, [pc, #424]	; (800168c <HAL_RCC_OscConfig+0x478>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d0f0      	beq.n	80014d0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	689b      	ldr	r3, [r3, #8]
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d106      	bne.n	8001504 <HAL_RCC_OscConfig+0x2f0>
 80014f6:	4b66      	ldr	r3, [pc, #408]	; (8001690 <HAL_RCC_OscConfig+0x47c>)
 80014f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80014fa:	4a65      	ldr	r2, [pc, #404]	; (8001690 <HAL_RCC_OscConfig+0x47c>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6713      	str	r3, [r2, #112]	; 0x70
 8001502:	e01c      	b.n	800153e <HAL_RCC_OscConfig+0x32a>
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	689b      	ldr	r3, [r3, #8]
 8001508:	2b05      	cmp	r3, #5
 800150a:	d10c      	bne.n	8001526 <HAL_RCC_OscConfig+0x312>
 800150c:	4b60      	ldr	r3, [pc, #384]	; (8001690 <HAL_RCC_OscConfig+0x47c>)
 800150e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001510:	4a5f      	ldr	r2, [pc, #380]	; (8001690 <HAL_RCC_OscConfig+0x47c>)
 8001512:	f043 0304 	orr.w	r3, r3, #4
 8001516:	6713      	str	r3, [r2, #112]	; 0x70
 8001518:	4b5d      	ldr	r3, [pc, #372]	; (8001690 <HAL_RCC_OscConfig+0x47c>)
 800151a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800151c:	4a5c      	ldr	r2, [pc, #368]	; (8001690 <HAL_RCC_OscConfig+0x47c>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	6713      	str	r3, [r2, #112]	; 0x70
 8001524:	e00b      	b.n	800153e <HAL_RCC_OscConfig+0x32a>
 8001526:	4b5a      	ldr	r3, [pc, #360]	; (8001690 <HAL_RCC_OscConfig+0x47c>)
 8001528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800152a:	4a59      	ldr	r2, [pc, #356]	; (8001690 <HAL_RCC_OscConfig+0x47c>)
 800152c:	f023 0301 	bic.w	r3, r3, #1
 8001530:	6713      	str	r3, [r2, #112]	; 0x70
 8001532:	4b57      	ldr	r3, [pc, #348]	; (8001690 <HAL_RCC_OscConfig+0x47c>)
 8001534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001536:	4a56      	ldr	r2, [pc, #344]	; (8001690 <HAL_RCC_OscConfig+0x47c>)
 8001538:	f023 0304 	bic.w	r3, r3, #4
 800153c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	689b      	ldr	r3, [r3, #8]
 8001542:	2b00      	cmp	r3, #0
 8001544:	d015      	beq.n	8001572 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001546:	f7ff f889 	bl	800065c <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800154c:	e00a      	b.n	8001564 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800154e:	f7ff f885 	bl	800065c <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	f241 3288 	movw	r2, #5000	; 0x1388
 800155c:	4293      	cmp	r3, r2
 800155e:	d901      	bls.n	8001564 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e08e      	b.n	8001682 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001564:	4b4a      	ldr	r3, [pc, #296]	; (8001690 <HAL_RCC_OscConfig+0x47c>)
 8001566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001568:	f003 0302 	and.w	r3, r3, #2
 800156c:	2b00      	cmp	r3, #0
 800156e:	d0ee      	beq.n	800154e <HAL_RCC_OscConfig+0x33a>
 8001570:	e014      	b.n	800159c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001572:	f7ff f873 	bl	800065c <HAL_GetTick>
 8001576:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001578:	e00a      	b.n	8001590 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800157a:	f7ff f86f 	bl	800065c <HAL_GetTick>
 800157e:	4602      	mov	r2, r0
 8001580:	693b      	ldr	r3, [r7, #16]
 8001582:	1ad3      	subs	r3, r2, r3
 8001584:	f241 3288 	movw	r2, #5000	; 0x1388
 8001588:	4293      	cmp	r3, r2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e078      	b.n	8001682 <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001590:	4b3f      	ldr	r3, [pc, #252]	; (8001690 <HAL_RCC_OscConfig+0x47c>)
 8001592:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001594:	f003 0302 	and.w	r3, r3, #2
 8001598:	2b00      	cmp	r3, #0
 800159a:	d1ee      	bne.n	800157a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800159c:	7dfb      	ldrb	r3, [r7, #23]
 800159e:	2b01      	cmp	r3, #1
 80015a0:	d105      	bne.n	80015ae <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015a2:	4b3b      	ldr	r3, [pc, #236]	; (8001690 <HAL_RCC_OscConfig+0x47c>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015a6:	4a3a      	ldr	r2, [pc, #232]	; (8001690 <HAL_RCC_OscConfig+0x47c>)
 80015a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015ac:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	699b      	ldr	r3, [r3, #24]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d064      	beq.n	8001680 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015b6:	4b36      	ldr	r3, [pc, #216]	; (8001690 <HAL_RCC_OscConfig+0x47c>)
 80015b8:	689b      	ldr	r3, [r3, #8]
 80015ba:	f003 030c 	and.w	r3, r3, #12
 80015be:	2b08      	cmp	r3, #8
 80015c0:	d05c      	beq.n	800167c <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	699b      	ldr	r3, [r3, #24]
 80015c6:	2b02      	cmp	r3, #2
 80015c8:	d141      	bne.n	800164e <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015ca:	4b32      	ldr	r3, [pc, #200]	; (8001694 <HAL_RCC_OscConfig+0x480>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015d0:	f7ff f844 	bl	800065c <HAL_GetTick>
 80015d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015d6:	e008      	b.n	80015ea <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80015d8:	f7ff f840 	bl	800065c <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	693b      	ldr	r3, [r7, #16]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d901      	bls.n	80015ea <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e04b      	b.n	8001682 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80015ea:	4b29      	ldr	r3, [pc, #164]	; (8001690 <HAL_RCC_OscConfig+0x47c>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d1f0      	bne.n	80015d8 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	69da      	ldr	r2, [r3, #28]
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6a1b      	ldr	r3, [r3, #32]
 80015fe:	431a      	orrs	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001604:	019b      	lsls	r3, r3, #6
 8001606:	431a      	orrs	r2, r3
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800160c:	085b      	lsrs	r3, r3, #1
 800160e:	3b01      	subs	r3, #1
 8001610:	041b      	lsls	r3, r3, #16
 8001612:	431a      	orrs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001618:	061b      	lsls	r3, r3, #24
 800161a:	491d      	ldr	r1, [pc, #116]	; (8001690 <HAL_RCC_OscConfig+0x47c>)
 800161c:	4313      	orrs	r3, r2
 800161e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001620:	4b1c      	ldr	r3, [pc, #112]	; (8001694 <HAL_RCC_OscConfig+0x480>)
 8001622:	2201      	movs	r2, #1
 8001624:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001626:	f7ff f819 	bl	800065c <HAL_GetTick>
 800162a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800162c:	e008      	b.n	8001640 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800162e:	f7ff f815 	bl	800065c <HAL_GetTick>
 8001632:	4602      	mov	r2, r0
 8001634:	693b      	ldr	r3, [r7, #16]
 8001636:	1ad3      	subs	r3, r2, r3
 8001638:	2b02      	cmp	r3, #2
 800163a:	d901      	bls.n	8001640 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 800163c:	2303      	movs	r3, #3
 800163e:	e020      	b.n	8001682 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001640:	4b13      	ldr	r3, [pc, #76]	; (8001690 <HAL_RCC_OscConfig+0x47c>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001648:	2b00      	cmp	r3, #0
 800164a:	d0f0      	beq.n	800162e <HAL_RCC_OscConfig+0x41a>
 800164c:	e018      	b.n	8001680 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800164e:	4b11      	ldr	r3, [pc, #68]	; (8001694 <HAL_RCC_OscConfig+0x480>)
 8001650:	2200      	movs	r2, #0
 8001652:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001654:	f7ff f802 	bl	800065c <HAL_GetTick>
 8001658:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800165a:	e008      	b.n	800166e <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800165c:	f7fe fffe 	bl	800065c <HAL_GetTick>
 8001660:	4602      	mov	r2, r0
 8001662:	693b      	ldr	r3, [r7, #16]
 8001664:	1ad3      	subs	r3, r2, r3
 8001666:	2b02      	cmp	r3, #2
 8001668:	d901      	bls.n	800166e <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 800166a:	2303      	movs	r3, #3
 800166c:	e009      	b.n	8001682 <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <HAL_RCC_OscConfig+0x47c>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1f0      	bne.n	800165c <HAL_RCC_OscConfig+0x448>
 800167a:	e001      	b.n	8001680 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 800167c:	2301      	movs	r3, #1
 800167e:	e000      	b.n	8001682 <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001680:	2300      	movs	r3, #0
}
 8001682:	4618      	mov	r0, r3
 8001684:	3718      	adds	r7, #24
 8001686:	46bd      	mov	sp, r7
 8001688:	bd80      	pop	{r7, pc}
 800168a:	bf00      	nop
 800168c:	40007000 	.word	0x40007000
 8001690:	40023800 	.word	0x40023800
 8001694:	42470060 	.word	0x42470060

08001698 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d101      	bne.n	80016ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016a8:	2301      	movs	r3, #1
 80016aa:	e0ca      	b.n	8001842 <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016ac:	4b67      	ldr	r3, [pc, #412]	; (800184c <HAL_RCC_ClockConfig+0x1b4>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f003 030f 	and.w	r3, r3, #15
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	429a      	cmp	r2, r3
 80016b8:	d90c      	bls.n	80016d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016ba:	4b64      	ldr	r3, [pc, #400]	; (800184c <HAL_RCC_ClockConfig+0x1b4>)
 80016bc:	683a      	ldr	r2, [r7, #0]
 80016be:	b2d2      	uxtb	r2, r2
 80016c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016c2:	4b62      	ldr	r3, [pc, #392]	; (800184c <HAL_RCC_ClockConfig+0x1b4>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	429a      	cmp	r2, r3
 80016ce:	d001      	beq.n	80016d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0b6      	b.n	8001842 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 0302 	and.w	r3, r3, #2
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d020      	beq.n	8001722 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d005      	beq.n	80016f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80016ec:	4b58      	ldr	r3, [pc, #352]	; (8001850 <HAL_RCC_ClockConfig+0x1b8>)
 80016ee:	689b      	ldr	r3, [r3, #8]
 80016f0:	4a57      	ldr	r2, [pc, #348]	; (8001850 <HAL_RCC_ClockConfig+0x1b8>)
 80016f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80016f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f003 0308 	and.w	r3, r3, #8
 8001700:	2b00      	cmp	r3, #0
 8001702:	d005      	beq.n	8001710 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001704:	4b52      	ldr	r3, [pc, #328]	; (8001850 <HAL_RCC_ClockConfig+0x1b8>)
 8001706:	689b      	ldr	r3, [r3, #8]
 8001708:	4a51      	ldr	r2, [pc, #324]	; (8001850 <HAL_RCC_ClockConfig+0x1b8>)
 800170a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800170e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001710:	4b4f      	ldr	r3, [pc, #316]	; (8001850 <HAL_RCC_ClockConfig+0x1b8>)
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	689b      	ldr	r3, [r3, #8]
 800171c:	494c      	ldr	r1, [pc, #304]	; (8001850 <HAL_RCC_ClockConfig+0x1b8>)
 800171e:	4313      	orrs	r3, r2
 8001720:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	2b00      	cmp	r3, #0
 800172c:	d044      	beq.n	80017b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	685b      	ldr	r3, [r3, #4]
 8001732:	2b01      	cmp	r3, #1
 8001734:	d107      	bne.n	8001746 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001736:	4b46      	ldr	r3, [pc, #280]	; (8001850 <HAL_RCC_ClockConfig+0x1b8>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d119      	bne.n	8001776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	e07d      	b.n	8001842 <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	685b      	ldr	r3, [r3, #4]
 800174a:	2b02      	cmp	r3, #2
 800174c:	d003      	beq.n	8001756 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001752:	2b03      	cmp	r3, #3
 8001754:	d107      	bne.n	8001766 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001756:	4b3e      	ldr	r3, [pc, #248]	; (8001850 <HAL_RCC_ClockConfig+0x1b8>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800175e:	2b00      	cmp	r3, #0
 8001760:	d109      	bne.n	8001776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001762:	2301      	movs	r3, #1
 8001764:	e06d      	b.n	8001842 <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001766:	4b3a      	ldr	r3, [pc, #232]	; (8001850 <HAL_RCC_ClockConfig+0x1b8>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f003 0302 	and.w	r3, r3, #2
 800176e:	2b00      	cmp	r3, #0
 8001770:	d101      	bne.n	8001776 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001772:	2301      	movs	r3, #1
 8001774:	e065      	b.n	8001842 <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001776:	4b36      	ldr	r3, [pc, #216]	; (8001850 <HAL_RCC_ClockConfig+0x1b8>)
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f023 0203 	bic.w	r2, r3, #3
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	685b      	ldr	r3, [r3, #4]
 8001782:	4933      	ldr	r1, [pc, #204]	; (8001850 <HAL_RCC_ClockConfig+0x1b8>)
 8001784:	4313      	orrs	r3, r2
 8001786:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001788:	f7fe ff68 	bl	800065c <HAL_GetTick>
 800178c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800178e:	e00a      	b.n	80017a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001790:	f7fe ff64 	bl	800065c <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	f241 3288 	movw	r2, #5000	; 0x1388
 800179e:	4293      	cmp	r3, r2
 80017a0:	d901      	bls.n	80017a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017a2:	2303      	movs	r3, #3
 80017a4:	e04d      	b.n	8001842 <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017a6:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <HAL_RCC_ClockConfig+0x1b8>)
 80017a8:	689b      	ldr	r3, [r3, #8]
 80017aa:	f003 020c 	and.w	r2, r3, #12
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d1eb      	bne.n	8001790 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017b8:	4b24      	ldr	r3, [pc, #144]	; (800184c <HAL_RCC_ClockConfig+0x1b4>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 030f 	and.w	r3, r3, #15
 80017c0:	683a      	ldr	r2, [r7, #0]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d20c      	bcs.n	80017e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017c6:	4b21      	ldr	r3, [pc, #132]	; (800184c <HAL_RCC_ClockConfig+0x1b4>)
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	b2d2      	uxtb	r2, r2
 80017cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017ce:	4b1f      	ldr	r3, [pc, #124]	; (800184c <HAL_RCC_ClockConfig+0x1b4>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 030f 	and.w	r3, r3, #15
 80017d6:	683a      	ldr	r2, [r7, #0]
 80017d8:	429a      	cmp	r2, r3
 80017da:	d001      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80017dc:	2301      	movs	r3, #1
 80017de:	e030      	b.n	8001842 <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 0304 	and.w	r3, r3, #4
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d008      	beq.n	80017fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80017ec:	4b18      	ldr	r3, [pc, #96]	; (8001850 <HAL_RCC_ClockConfig+0x1b8>)
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	68db      	ldr	r3, [r3, #12]
 80017f8:	4915      	ldr	r1, [pc, #84]	; (8001850 <HAL_RCC_ClockConfig+0x1b8>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0308 	and.w	r3, r3, #8
 8001806:	2b00      	cmp	r3, #0
 8001808:	d009      	beq.n	800181e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800180a:	4b11      	ldr	r3, [pc, #68]	; (8001850 <HAL_RCC_ClockConfig+0x1b8>)
 800180c:	689b      	ldr	r3, [r3, #8]
 800180e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	691b      	ldr	r3, [r3, #16]
 8001816:	00db      	lsls	r3, r3, #3
 8001818:	490d      	ldr	r1, [pc, #52]	; (8001850 <HAL_RCC_ClockConfig+0x1b8>)
 800181a:	4313      	orrs	r3, r2
 800181c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800181e:	f000 f81d 	bl	800185c <HAL_RCC_GetSysClockFreq>
 8001822:	4601      	mov	r1, r0
 8001824:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <HAL_RCC_ClockConfig+0x1b8>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	091b      	lsrs	r3, r3, #4
 800182a:	f003 030f 	and.w	r3, r3, #15
 800182e:	4a09      	ldr	r2, [pc, #36]	; (8001854 <HAL_RCC_ClockConfig+0x1bc>)
 8001830:	5cd3      	ldrb	r3, [r2, r3]
 8001832:	fa21 f303 	lsr.w	r3, r1, r3
 8001836:	4a08      	ldr	r2, [pc, #32]	; (8001858 <HAL_RCC_ClockConfig+0x1c0>)
 8001838:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 800183a:	2000      	movs	r0, #0
 800183c:	f7fe feca 	bl	80005d4 <HAL_InitTick>

  return HAL_OK;
 8001840:	2300      	movs	r3, #0
}
 8001842:	4618      	mov	r0, r3
 8001844:	3710      	adds	r7, #16
 8001846:	46bd      	mov	sp, r7
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	40023c00 	.word	0x40023c00
 8001850:	40023800 	.word	0x40023800
 8001854:	08003380 	.word	0x08003380
 8001858:	20000008 	.word	0x20000008

0800185c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800185c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800185e:	b085      	sub	sp, #20
 8001860:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001862:	2300      	movs	r3, #0
 8001864:	607b      	str	r3, [r7, #4]
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	2300      	movs	r3, #0
 800186c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800186e:	2300      	movs	r3, #0
 8001870:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001872:	4b50      	ldr	r3, [pc, #320]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001874:	689b      	ldr	r3, [r3, #8]
 8001876:	f003 030c 	and.w	r3, r3, #12
 800187a:	2b04      	cmp	r3, #4
 800187c:	d007      	beq.n	800188e <HAL_RCC_GetSysClockFreq+0x32>
 800187e:	2b08      	cmp	r3, #8
 8001880:	d008      	beq.n	8001894 <HAL_RCC_GetSysClockFreq+0x38>
 8001882:	2b00      	cmp	r3, #0
 8001884:	f040 808d 	bne.w	80019a2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001888:	4b4b      	ldr	r3, [pc, #300]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x15c>)
 800188a:	60bb      	str	r3, [r7, #8]
       break;
 800188c:	e08c      	b.n	80019a8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800188e:	4b4b      	ldr	r3, [pc, #300]	; (80019bc <HAL_RCC_GetSysClockFreq+0x160>)
 8001890:	60bb      	str	r3, [r7, #8]
      break;
 8001892:	e089      	b.n	80019a8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001894:	4b47      	ldr	r3, [pc, #284]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800189c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800189e:	4b45      	ldr	r3, [pc, #276]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x158>)
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d023      	beq.n	80018f2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018aa:	4b42      	ldr	r3, [pc, #264]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x158>)
 80018ac:	685b      	ldr	r3, [r3, #4]
 80018ae:	099b      	lsrs	r3, r3, #6
 80018b0:	f04f 0400 	mov.w	r4, #0
 80018b4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80018b8:	f04f 0200 	mov.w	r2, #0
 80018bc:	ea03 0501 	and.w	r5, r3, r1
 80018c0:	ea04 0602 	and.w	r6, r4, r2
 80018c4:	4a3d      	ldr	r2, [pc, #244]	; (80019bc <HAL_RCC_GetSysClockFreq+0x160>)
 80018c6:	fb02 f106 	mul.w	r1, r2, r6
 80018ca:	2200      	movs	r2, #0
 80018cc:	fb02 f205 	mul.w	r2, r2, r5
 80018d0:	440a      	add	r2, r1
 80018d2:	493a      	ldr	r1, [pc, #232]	; (80019bc <HAL_RCC_GetSysClockFreq+0x160>)
 80018d4:	fba5 0101 	umull	r0, r1, r5, r1
 80018d8:	1853      	adds	r3, r2, r1
 80018da:	4619      	mov	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f04f 0400 	mov.w	r4, #0
 80018e2:	461a      	mov	r2, r3
 80018e4:	4623      	mov	r3, r4
 80018e6:	f7fe fcd3 	bl	8000290 <__aeabi_uldivmod>
 80018ea:	4603      	mov	r3, r0
 80018ec:	460c      	mov	r4, r1
 80018ee:	60fb      	str	r3, [r7, #12]
 80018f0:	e049      	b.n	8001986 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80018f2:	4b30      	ldr	r3, [pc, #192]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x158>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	099b      	lsrs	r3, r3, #6
 80018f8:	f04f 0400 	mov.w	r4, #0
 80018fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001900:	f04f 0200 	mov.w	r2, #0
 8001904:	ea03 0501 	and.w	r5, r3, r1
 8001908:	ea04 0602 	and.w	r6, r4, r2
 800190c:	4629      	mov	r1, r5
 800190e:	4632      	mov	r2, r6
 8001910:	f04f 0300 	mov.w	r3, #0
 8001914:	f04f 0400 	mov.w	r4, #0
 8001918:	0154      	lsls	r4, r2, #5
 800191a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800191e:	014b      	lsls	r3, r1, #5
 8001920:	4619      	mov	r1, r3
 8001922:	4622      	mov	r2, r4
 8001924:	1b49      	subs	r1, r1, r5
 8001926:	eb62 0206 	sbc.w	r2, r2, r6
 800192a:	f04f 0300 	mov.w	r3, #0
 800192e:	f04f 0400 	mov.w	r4, #0
 8001932:	0194      	lsls	r4, r2, #6
 8001934:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001938:	018b      	lsls	r3, r1, #6
 800193a:	1a5b      	subs	r3, r3, r1
 800193c:	eb64 0402 	sbc.w	r4, r4, r2
 8001940:	f04f 0100 	mov.w	r1, #0
 8001944:	f04f 0200 	mov.w	r2, #0
 8001948:	00e2      	lsls	r2, r4, #3
 800194a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800194e:	00d9      	lsls	r1, r3, #3
 8001950:	460b      	mov	r3, r1
 8001952:	4614      	mov	r4, r2
 8001954:	195b      	adds	r3, r3, r5
 8001956:	eb44 0406 	adc.w	r4, r4, r6
 800195a:	f04f 0100 	mov.w	r1, #0
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	02a2      	lsls	r2, r4, #10
 8001964:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001968:	0299      	lsls	r1, r3, #10
 800196a:	460b      	mov	r3, r1
 800196c:	4614      	mov	r4, r2
 800196e:	4618      	mov	r0, r3
 8001970:	4621      	mov	r1, r4
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	f04f 0400 	mov.w	r4, #0
 8001978:	461a      	mov	r2, r3
 800197a:	4623      	mov	r3, r4
 800197c:	f7fe fc88 	bl	8000290 <__aeabi_uldivmod>
 8001980:	4603      	mov	r3, r0
 8001982:	460c      	mov	r4, r1
 8001984:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001986:	4b0b      	ldr	r3, [pc, #44]	; (80019b4 <HAL_RCC_GetSysClockFreq+0x158>)
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	0c1b      	lsrs	r3, r3, #16
 800198c:	f003 0303 	and.w	r3, r3, #3
 8001990:	3301      	adds	r3, #1
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001996:	68fa      	ldr	r2, [r7, #12]
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	fbb2 f3f3 	udiv	r3, r2, r3
 800199e:	60bb      	str	r3, [r7, #8]
      break;
 80019a0:	e002      	b.n	80019a8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80019a2:	4b05      	ldr	r3, [pc, #20]	; (80019b8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80019a4:	60bb      	str	r3, [r7, #8]
      break;
 80019a6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80019a8:	68bb      	ldr	r3, [r7, #8]
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3714      	adds	r7, #20
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019b2:	bf00      	nop
 80019b4:	40023800 	.word	0x40023800
 80019b8:	00f42400 	.word	0x00f42400
 80019bc:	017d7840 	.word	0x017d7840

080019c0 <ReadTemperature>:

#include <i2c.h>

void ReadTemperature(I2C_Handle_t *I2C_handle)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
	uint8_t txBuffer[1] = {MCP9808_REG_AMBIENT_TEMP_REG};
 80019c8:	2305      	movs	r3, #5
 80019ca:	743b      	strb	r3, [r7, #16]
	uint8_t rxBuffer[4] = {0};
 80019cc:	2300      	movs	r3, #0
 80019ce:	60fb      	str	r3, [r7, #12]
	uint16_t temperature = 0;
 80019d0:	2300      	movs	r3, #0
 80019d2:	83fb      	strh	r3, [r7, #30]

	uint8_t txSize = sizeof(txBuffer)/sizeof(txBuffer[0]);
 80019d4:	2301      	movs	r3, #1
 80019d6:	75fb      	strb	r3, [r7, #23]
	uint8_t rxSize = sizeof(rxBuffer)/sizeof(rxBuffer[0]);
 80019d8:	2304      	movs	r3, #4
 80019da:	75bb      	strb	r3, [r7, #22]

	// specify the register address where temperature values will be read from
	HAL_I2C_Master_Transmit(I2C_handle, txBuffer, txSize);
 80019dc:	7dfa      	ldrb	r2, [r7, #23]
 80019de:	f107 0310 	add.w	r3, r7, #16
 80019e2:	4619      	mov	r1, r3
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	f7ff fa55 	bl	8000e94 <HAL_I2C_Master_Transmit>

	// request the data from the sensor
	HAL_I2C_Master_Receive (I2C_handle, rxBuffer, rxSize);
 80019ea:	7dba      	ldrb	r2, [r7, #22]
 80019ec:	f107 030c 	add.w	r3, r7, #12
 80019f0:	4619      	mov	r1, r3
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	f7ff fadb 	bl	8000fae <HAL_I2C_Master_Receive>

	// printing raw bytes
	for (int i = 0; i < rxSize; i++) {
 80019f8:	2300      	movs	r3, #0
 80019fa:	61bb      	str	r3, [r7, #24]
 80019fc:	e00b      	b.n	8001a16 <ReadTemperature+0x56>
		printf ("%d\n", rxBuffer[i]);
 80019fe:	f107 020c 	add.w	r2, r7, #12
 8001a02:	69bb      	ldr	r3, [r7, #24]
 8001a04:	4413      	add	r3, r2
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	4619      	mov	r1, r3
 8001a0a:	481d      	ldr	r0, [pc, #116]	; (8001a80 <ReadTemperature+0xc0>)
 8001a0c:	f000 fe58 	bl	80026c0 <iprintf>
	for (int i = 0; i < rxSize; i++) {
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	3301      	adds	r3, #1
 8001a14:	61bb      	str	r3, [r7, #24]
 8001a16:	7dbb      	ldrb	r3, [r7, #22]
 8001a18:	69ba      	ldr	r2, [r7, #24]
 8001a1a:	429a      	cmp	r2, r3
 8001a1c:	dbef      	blt.n	80019fe <ReadTemperature+0x3e>
	}

	// process data
	uint8_t upperByte = rxBuffer[0] & 0x1F; // mask out the 3 bits
 8001a1e:	7b3b      	ldrb	r3, [r7, #12]
 8001a20:	f003 031f 	and.w	r3, r3, #31
 8001a24:	757b      	strb	r3, [r7, #21]
	uint8_t signBit = upperByte & 0x10;
 8001a26:	7d7b      	ldrb	r3, [r7, #21]
 8001a28:	f003 0310 	and.w	r3, r3, #16
 8001a2c:	753b      	strb	r3, [r7, #20]

	if (signBit)
 8001a2e:	7d3b      	ldrb	r3, [r7, #20]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d011      	beq.n	8001a58 <ReadTemperature+0x98>
	{
		upperByte = upperByte & 0xF; 	// clear out the sign bit
 8001a34:	7d7b      	ldrb	r3, [r7, #21]
 8001a36:	f003 030f 	and.w	r3, r3, #15
 8001a3a:	757b      	strb	r3, [r7, #21]
		temperature = 256 - (upperByte << 4 | rxBuffer[1] >> 4);
 8001a3c:	7d7b      	ldrb	r3, [r7, #21]
 8001a3e:	011b      	lsls	r3, r3, #4
 8001a40:	b21a      	sxth	r2, r3
 8001a42:	7b7b      	ldrb	r3, [r7, #13]
 8001a44:	091b      	lsrs	r3, r3, #4
 8001a46:	b2db      	uxtb	r3, r3
 8001a48:	b21b      	sxth	r3, r3
 8001a4a:	4313      	orrs	r3, r2
 8001a4c:	b21b      	sxth	r3, r3
 8001a4e:	b29b      	uxth	r3, r3
 8001a50:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001a54:	83fb      	strh	r3, [r7, #30]
 8001a56:	e009      	b.n	8001a6c <ReadTemperature+0xac>
	}
	else
	{
		temperature = upperByte << 4 | rxBuffer[1] >> 4;
 8001a58:	7d7b      	ldrb	r3, [r7, #21]
 8001a5a:	011b      	lsls	r3, r3, #4
 8001a5c:	b21a      	sxth	r2, r3
 8001a5e:	7b7b      	ldrb	r3, [r7, #13]
 8001a60:	091b      	lsrs	r3, r3, #4
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	b21b      	sxth	r3, r3
 8001a66:	4313      	orrs	r3, r2
 8001a68:	b21b      	sxth	r3, r3
 8001a6a:	83fb      	strh	r3, [r7, #30]
	}

	printf ("Temperature value: %d\n", temperature);
 8001a6c:	8bfb      	ldrh	r3, [r7, #30]
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4804      	ldr	r0, [pc, #16]	; (8001a84 <ReadTemperature+0xc4>)
 8001a72:	f000 fe25 	bl	80026c0 <iprintf>
}
 8001a76:	bf00      	nop
 8001a78:	3720      	adds	r7, #32
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	08003320 	.word	0x08003320
 8001a84:	08003324 	.word	0x08003324

08001a88 <I2C_Initilization>:
static void MX_GPIO_Init(void);
extern void initialise_monitor_handles(void);


I2C_Handle_t I2C_Initilization()
{
 8001a88:	b590      	push	{r4, r7, lr}
 8001a8a:	b087      	sub	sp, #28
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
	I2C_Handle_t I2C1_handle;
	I2C1_handle.pI2Cx = I2C1;
 8001a90:	4b0d      	ldr	r3, [pc, #52]	; (8001ac8 <I2C_Initilization+0x40>)
 8001a92:	60fb      	str	r3, [r7, #12]
	I2C1_handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8001a94:	2301      	movs	r3, #1
 8001a96:	757b      	strb	r3, [r7, #21]
	I2C1_handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8001a98:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <I2C_Initilization+0x44>)
 8001a9a:	613b      	str	r3, [r7, #16]
	I2C1_handle.I2C_Config.I2C_DeviceAddress = MCP9808_ADDR;
 8001a9c:	2318      	movs	r3, #24
 8001a9e:	753b      	strb	r3, [r7, #20]
	I2C1_handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	82fb      	strh	r3, [r7, #22]
	I2C_Init(&I2C1_handle);
 8001aa4:	f107 030c 	add.w	r3, r7, #12
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7ff f8f7 	bl	8000c9c <I2C_Init>

	return I2C1_handle;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	461c      	mov	r4, r3
 8001ab2:	f107 030c 	add.w	r3, r7, #12
 8001ab6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8001aba:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	371c      	adds	r7, #28
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd90      	pop	{r4, r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	40005400 	.word	0x40005400
 8001acc:	000186a0 	.word	0x000186a0

08001ad0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
	initialise_monitor_handles();
 8001ad6:	f000 fc23 	bl	8002320 <initialise_monitor_handles>
	printf ("Application is running....\n");
 8001ada:	480b      	ldr	r0, [pc, #44]	; (8001b08 <main+0x38>)
 8001adc:	f000 fe64 	bl	80027a8 <puts>

	HAL_Init();
 8001ae0:	f7fe fd56 	bl	8000590 <HAL_Init>

  /* Configure the system clock */
	SystemClock_Config();
 8001ae4:	f000 f812 	bl	8001b0c <SystemClock_Config>

  /* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001ae8:	f000 f870 	bl	8001bcc <MX_GPIO_Init>

	I2C_Handle_t I2C_Init = I2C_Initilization();
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff ffca 	bl	8001a88 <I2C_Initilization>
	ReadTemperature(&I2C_Init);
 8001af4:	1d3b      	adds	r3, r7, #4
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff ff62 	bl	80019c0 <ReadTemperature>
 8001afc:	2300      	movs	r3, #0

//	ReadTemperature(I2C_Init);


}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3710      	adds	r7, #16
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	0800333c 	.word	0x0800333c

08001b0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b094      	sub	sp, #80	; 0x50
 8001b10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b12:	f107 0320 	add.w	r3, r7, #32
 8001b16:	2230      	movs	r2, #48	; 0x30
 8001b18:	2100      	movs	r1, #0
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f000 fd6e 	bl	80025fc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b20:	f107 030c 	add.w	r3, r7, #12
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b30:	2300      	movs	r3, #0
 8001b32:	60bb      	str	r3, [r7, #8]
 8001b34:	4b23      	ldr	r3, [pc, #140]	; (8001bc4 <SystemClock_Config+0xb8>)
 8001b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b38:	4a22      	ldr	r2, [pc, #136]	; (8001bc4 <SystemClock_Config+0xb8>)
 8001b3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b3e:	6413      	str	r3, [r2, #64]	; 0x40
 8001b40:	4b20      	ldr	r3, [pc, #128]	; (8001bc4 <SystemClock_Config+0xb8>)
 8001b42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b48:	60bb      	str	r3, [r7, #8]
 8001b4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <SystemClock_Config+0xbc>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001b58:	4a1b      	ldr	r2, [pc, #108]	; (8001bc8 <SystemClock_Config+0xbc>)
 8001b5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b5e:	6013      	str	r3, [r2, #0]
 8001b60:	4b19      	ldr	r3, [pc, #100]	; (8001bc8 <SystemClock_Config+0xbc>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001b68:	607b      	str	r3, [r7, #4]
 8001b6a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b6c:	2302      	movs	r3, #2
 8001b6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b70:	2301      	movs	r3, #1
 8001b72:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b74:	2310      	movs	r3, #16
 8001b76:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b7c:	f107 0320 	add.w	r3, r7, #32
 8001b80:	4618      	mov	r0, r3
 8001b82:	f7ff fb47 	bl	8001214 <HAL_RCC_OscConfig>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001b8c:	f000 f8a2 	bl	8001cd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b90:	230f      	movs	r3, #15
 8001b92:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001b94:	2300      	movs	r3, #0
 8001b96:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001ba4:	f107 030c 	add.w	r3, r7, #12
 8001ba8:	2100      	movs	r1, #0
 8001baa:	4618      	mov	r0, r3
 8001bac:	f7ff fd74 	bl	8001698 <HAL_RCC_ClockConfig>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d001      	beq.n	8001bba <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001bb6:	f000 f88d 	bl	8001cd4 <Error_Handler>
  }
}
 8001bba:	bf00      	nop
 8001bbc:	3750      	adds	r7, #80	; 0x50
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bd80      	pop	{r7, pc}
 8001bc2:	bf00      	nop
 8001bc4:	40023800 	.word	0x40023800
 8001bc8:	40007000 	.word	0x40007000

08001bcc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b088      	sub	sp, #32
 8001bd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd2:	f107 030c 	add.w	r3, r7, #12
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	601a      	str	r2, [r3, #0]
 8001bda:	605a      	str	r2, [r3, #4]
 8001bdc:	609a      	str	r2, [r3, #8]
 8001bde:	60da      	str	r2, [r3, #12]
 8001be0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60bb      	str	r3, [r7, #8]
 8001be6:	4b36      	ldr	r3, [pc, #216]	; (8001cc0 <MX_GPIO_Init+0xf4>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	4a35      	ldr	r2, [pc, #212]	; (8001cc0 <MX_GPIO_Init+0xf4>)
 8001bec:	f043 0304 	orr.w	r3, r3, #4
 8001bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf2:	4b33      	ldr	r3, [pc, #204]	; (8001cc0 <MX_GPIO_Init+0xf4>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf6:	f003 0304 	and.w	r3, r3, #4
 8001bfa:	60bb      	str	r3, [r7, #8]
 8001bfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bfe:	2300      	movs	r3, #0
 8001c00:	607b      	str	r3, [r7, #4]
 8001c02:	4b2f      	ldr	r3, [pc, #188]	; (8001cc0 <MX_GPIO_Init+0xf4>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	4a2e      	ldr	r2, [pc, #184]	; (8001cc0 <MX_GPIO_Init+0xf4>)
 8001c08:	f043 0301 	orr.w	r3, r3, #1
 8001c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c0e:	4b2c      	ldr	r3, [pc, #176]	; (8001cc0 <MX_GPIO_Init+0xf4>)
 8001c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	607b      	str	r3, [r7, #4]
 8001c18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	603b      	str	r3, [r7, #0]
 8001c1e:	4b28      	ldr	r3, [pc, #160]	; (8001cc0 <MX_GPIO_Init+0xf4>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a27      	ldr	r2, [pc, #156]	; (8001cc0 <MX_GPIO_Init+0xf4>)
 8001c24:	f043 0302 	orr.w	r3, r3, #2
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b25      	ldr	r3, [pc, #148]	; (8001cc0 <MX_GPIO_Init+0xf4>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f003 0302 	and.w	r3, r3, #2
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	683b      	ldr	r3, [r7, #0]

  /* GPIO I2C Clock Enable */
//  __HAL_RCC_I2C1_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 8001c36:	2200      	movs	r2, #0
 8001c38:	2140      	movs	r1, #64	; 0x40
 8001c3a:	4822      	ldr	r0, [pc, #136]	; (8001cc4 <MX_GPIO_Init+0xf8>)
 8001c3c:	f7fe ffae 	bl	8000b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c46:	4b20      	ldr	r3, [pc, #128]	; (8001cc8 <MX_GPIO_Init+0xfc>)
 8001c48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c4e:	f107 030c 	add.w	r3, r7, #12
 8001c52:	4619      	mov	r1, r3
 8001c54:	481d      	ldr	r0, [pc, #116]	; (8001ccc <MX_GPIO_Init+0x100>)
 8001c56:	f7fe fe1f 	bl	8000898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c5a:	2320      	movs	r3, #32
 8001c5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c62:	2300      	movs	r3, #0
 8001c64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c66:	2300      	movs	r3, #0
 8001c68:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c6a:	f107 030c 	add.w	r3, r7, #12
 8001c6e:	4619      	mov	r1, r3
 8001c70:	4814      	ldr	r0, [pc, #80]	; (8001cc4 <MX_GPIO_Init+0xf8>)
 8001c72:	f7fe fe11 	bl	8000898 <HAL_GPIO_Init>

  /* Configure I2C */
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001c76:	2312      	movs	r3, #18
 8001c78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001c82:	2304      	movs	r3, #4
 8001c84:	61fb      	str	r3, [r7, #28]

  // scl
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c86:	2340      	movs	r3, #64	; 0x40
 8001c88:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c8a:	f107 030c 	add.w	r3, r7, #12
 8001c8e:	4619      	mov	r1, r3
 8001c90:	480f      	ldr	r0, [pc, #60]	; (8001cd0 <MX_GPIO_Init+0x104>)
 8001c92:	f7fe fe01 	bl	8000898 <HAL_GPIO_Init>

  // sdata
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001c96:	2380      	movs	r3, #128	; 0x80
 8001c98:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c9a:	f107 030c 	add.w	r3, r7, #12
 8001c9e:	4619      	mov	r1, r3
 8001ca0:	480b      	ldr	r0, [pc, #44]	; (8001cd0 <MX_GPIO_Init+0x104>)
 8001ca2:	f7fe fdf9 	bl	8000898 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2100      	movs	r1, #0
 8001caa:	2028      	movs	r0, #40	; 0x28
 8001cac:	f7fe fdbd 	bl	800082a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cb0:	2028      	movs	r0, #40	; 0x28
 8001cb2:	f7fe fdd6 	bl	8000862 <HAL_NVIC_EnableIRQ>

}
 8001cb6:	bf00      	nop
 8001cb8:	3720      	adds	r7, #32
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40020000 	.word	0x40020000
 8001cc8:	10110000 	.word	0x10110000
 8001ccc:	40020800 	.word	0x40020800
 8001cd0:	40020400 	.word	0x40020400

08001cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
	...

08001ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cea:	2300      	movs	r3, #0
 8001cec:	607b      	str	r3, [r7, #4]
 8001cee:	4b10      	ldr	r3, [pc, #64]	; (8001d30 <HAL_MspInit+0x4c>)
 8001cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cf2:	4a0f      	ldr	r2, [pc, #60]	; (8001d30 <HAL_MspInit+0x4c>)
 8001cf4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001cf8:	6453      	str	r3, [r2, #68]	; 0x44
 8001cfa:	4b0d      	ldr	r3, [pc, #52]	; (8001d30 <HAL_MspInit+0x4c>)
 8001cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d02:	607b      	str	r3, [r7, #4]
 8001d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	2300      	movs	r3, #0
 8001d08:	603b      	str	r3, [r7, #0]
 8001d0a:	4b09      	ldr	r3, [pc, #36]	; (8001d30 <HAL_MspInit+0x4c>)
 8001d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0e:	4a08      	ldr	r2, [pc, #32]	; (8001d30 <HAL_MspInit+0x4c>)
 8001d10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d14:	6413      	str	r3, [r2, #64]	; 0x40
 8001d16:	4b06      	ldr	r3, [pc, #24]	; (8001d30 <HAL_MspInit+0x4c>)
 8001d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2c:	4770      	bx	lr
 8001d2e:	bf00      	nop
 8001d30:	40023800 	.word	0x40023800

08001d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d42:	b480      	push	{r7}
 8001d44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */

	while (1)
 8001d46:	e7fe      	b.n	8001d46 <HardFault_Handler+0x4>

08001d48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d4c:	e7fe      	b.n	8001d4c <MemManage_Handler+0x4>

08001d4e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d52:	e7fe      	b.n	8001d52 <BusFault_Handler+0x4>

08001d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d58:	e7fe      	b.n	8001d58 <UsageFault_Handler+0x4>

08001d5a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	46bd      	mov	sp, r7
 8001d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d66:	4770      	bx	lr

08001d68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr

08001d76 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d76:	b480      	push	{r7}
 8001d78:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d7a:	bf00      	nop
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d88:	f7fe fc54 	bl	8000634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d8c:	bf00      	nop
 8001d8e:	bd80      	pop	{r7, pc}

08001d90 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  printf ("Interrupt handler for push button...\n");
 8001d94:	4804      	ldr	r0, [pc, #16]	; (8001da8 <EXTI15_10_IRQHandler+0x18>)
 8001d96:	f000 fd07 	bl	80027a8 <puts>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001d9a:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001d9e:	f7fe ff31 	bl	8000c04 <HAL_GPIO_EXTI_IRQHandler>


}
 8001da2:	bf00      	nop
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	08003358 	.word	0x08003358

08001dac <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8001db4:	4b11      	ldr	r3, [pc, #68]	; (8001dfc <_sbrk+0x50>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d102      	bne.n	8001dc2 <_sbrk+0x16>
		heap_end = &end;
 8001dbc:	4b0f      	ldr	r3, [pc, #60]	; (8001dfc <_sbrk+0x50>)
 8001dbe:	4a10      	ldr	r2, [pc, #64]	; (8001e00 <_sbrk+0x54>)
 8001dc0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <_sbrk+0x50>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8001dc8:	4b0c      	ldr	r3, [pc, #48]	; (8001dfc <_sbrk+0x50>)
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4413      	add	r3, r2
 8001dd0:	466a      	mov	r2, sp
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d907      	bls.n	8001de6 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8001dd6:	f000 fb1d 	bl	8002414 <__errno>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	230c      	movs	r3, #12
 8001dde:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8001de0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001de4:	e006      	b.n	8001df4 <_sbrk+0x48>
	}

	heap_end += incr;
 8001de6:	4b05      	ldr	r3, [pc, #20]	; (8001dfc <_sbrk+0x50>)
 8001de8:	681a      	ldr	r2, [r3, #0]
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4413      	add	r3, r2
 8001dee:	4a03      	ldr	r2, [pc, #12]	; (8001dfc <_sbrk+0x50>)
 8001df0:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8001df2:	68fb      	ldr	r3, [r7, #12]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3710      	adds	r7, #16
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	20000094 	.word	0x20000094
 8001e00:	20000158 	.word	0x20000158

08001e04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e08:	4b16      	ldr	r3, [pc, #88]	; (8001e64 <SystemInit+0x60>)
 8001e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e0e:	4a15      	ldr	r2, [pc, #84]	; (8001e64 <SystemInit+0x60>)
 8001e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001e18:	4b13      	ldr	r3, [pc, #76]	; (8001e68 <SystemInit+0x64>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	4a12      	ldr	r2, [pc, #72]	; (8001e68 <SystemInit+0x64>)
 8001e1e:	f043 0301 	orr.w	r3, r3, #1
 8001e22:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001e24:	4b10      	ldr	r3, [pc, #64]	; (8001e68 <SystemInit+0x64>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001e2a:	4b0f      	ldr	r3, [pc, #60]	; (8001e68 <SystemInit+0x64>)
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a0e      	ldr	r2, [pc, #56]	; (8001e68 <SystemInit+0x64>)
 8001e30:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001e34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e38:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001e3a:	4b0b      	ldr	r3, [pc, #44]	; (8001e68 <SystemInit+0x64>)
 8001e3c:	4a0b      	ldr	r2, [pc, #44]	; (8001e6c <SystemInit+0x68>)
 8001e3e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001e40:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <SystemInit+0x64>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a08      	ldr	r2, [pc, #32]	; (8001e68 <SystemInit+0x64>)
 8001e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e4a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001e4c:	4b06      	ldr	r3, [pc, #24]	; (8001e68 <SystemInit+0x64>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e52:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <SystemInit+0x60>)
 8001e54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001e58:	609a      	str	r2, [r3, #8]
#endif
}
 8001e5a:	bf00      	nop
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr
 8001e64:	e000ed00 	.word	0xe000ed00
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	24003010 	.word	0x24003010

08001e70 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e70:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ea8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001e74:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001e76:	e003      	b.n	8001e80 <LoopCopyDataInit>

08001e78 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001e78:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001e7a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001e7c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001e7e:	3104      	adds	r1, #4

08001e80 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001e80:	480b      	ldr	r0, [pc, #44]	; (8001eb0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001e82:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001e84:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001e86:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001e88:	d3f6      	bcc.n	8001e78 <CopyDataInit>
  ldr  r2, =_sbss
 8001e8a:	4a0b      	ldr	r2, [pc, #44]	; (8001eb8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001e8c:	e002      	b.n	8001e94 <LoopFillZerobss>

08001e8e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001e8e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001e90:	f842 3b04 	str.w	r3, [r2], #4

08001e94 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001e94:	4b09      	ldr	r3, [pc, #36]	; (8001ebc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001e96:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001e98:	d3f9      	bcc.n	8001e8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001e9a:	f7ff ffb3 	bl	8001e04 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001e9e:	f000 fb89 	bl	80025b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ea2:	f7ff fe15 	bl	8001ad0 <main>
  bx  lr    
 8001ea6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ea8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001eac:	08003454 	.word	0x08003454
  ldr  r0, =_sdata
 8001eb0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001eb4:	20000078 	.word	0x20000078
  ldr  r2, =_sbss
 8001eb8:	20000078 	.word	0x20000078
  ldr  r3, = _ebss
 8001ebc:	20000154 	.word	0x20000154

08001ec0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ec0:	e7fe      	b.n	8001ec0 <ADC_IRQHandler>
	...

08001ec4 <findslot>:
 8001ec4:	4b0a      	ldr	r3, [pc, #40]	; (8001ef0 <findslot+0x2c>)
 8001ec6:	b510      	push	{r4, lr}
 8001ec8:	4604      	mov	r4, r0
 8001eca:	6818      	ldr	r0, [r3, #0]
 8001ecc:	b118      	cbz	r0, 8001ed6 <findslot+0x12>
 8001ece:	6983      	ldr	r3, [r0, #24]
 8001ed0:	b90b      	cbnz	r3, 8001ed6 <findslot+0x12>
 8001ed2:	f000 fae5 	bl	80024a0 <__sinit>
 8001ed6:	2c13      	cmp	r4, #19
 8001ed8:	d807      	bhi.n	8001eea <findslot+0x26>
 8001eda:	4806      	ldr	r0, [pc, #24]	; (8001ef4 <findslot+0x30>)
 8001edc:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	d002      	beq.n	8001eea <findslot+0x26>
 8001ee4:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8001ee8:	bd10      	pop	{r4, pc}
 8001eea:	2000      	movs	r0, #0
 8001eec:	e7fc      	b.n	8001ee8 <findslot+0x24>
 8001eee:	bf00      	nop
 8001ef0:	20000014 	.word	0x20000014
 8001ef4:	200000a4 	.word	0x200000a4

08001ef8 <checkerror>:
 8001ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001efa:	1c43      	adds	r3, r0, #1
 8001efc:	4605      	mov	r5, r0
 8001efe:	d109      	bne.n	8001f14 <checkerror+0x1c>
 8001f00:	f000 fa88 	bl	8002414 <__errno>
 8001f04:	2413      	movs	r4, #19
 8001f06:	4606      	mov	r6, r0
 8001f08:	2700      	movs	r7, #0
 8001f0a:	4620      	mov	r0, r4
 8001f0c:	4639      	mov	r1, r7
 8001f0e:	beab      	bkpt	0x00ab
 8001f10:	4604      	mov	r4, r0
 8001f12:	6034      	str	r4, [r6, #0]
 8001f14:	4628      	mov	r0, r5
 8001f16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001f18 <error>:
 8001f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001f1a:	4605      	mov	r5, r0
 8001f1c:	f000 fa7a 	bl	8002414 <__errno>
 8001f20:	2413      	movs	r4, #19
 8001f22:	4606      	mov	r6, r0
 8001f24:	2700      	movs	r7, #0
 8001f26:	4620      	mov	r0, r4
 8001f28:	4639      	mov	r1, r7
 8001f2a:	beab      	bkpt	0x00ab
 8001f2c:	4604      	mov	r4, r0
 8001f2e:	6034      	str	r4, [r6, #0]
 8001f30:	4628      	mov	r0, r5
 8001f32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08001f34 <_swiread>:
 8001f34:	b530      	push	{r4, r5, lr}
 8001f36:	b085      	sub	sp, #20
 8001f38:	e9cd 0101 	strd	r0, r1, [sp, #4]
 8001f3c:	9203      	str	r2, [sp, #12]
 8001f3e:	2406      	movs	r4, #6
 8001f40:	ad01      	add	r5, sp, #4
 8001f42:	4620      	mov	r0, r4
 8001f44:	4629      	mov	r1, r5
 8001f46:	beab      	bkpt	0x00ab
 8001f48:	4604      	mov	r4, r0
 8001f4a:	4620      	mov	r0, r4
 8001f4c:	f7ff ffd4 	bl	8001ef8 <checkerror>
 8001f50:	b005      	add	sp, #20
 8001f52:	bd30      	pop	{r4, r5, pc}

08001f54 <_read>:
 8001f54:	b570      	push	{r4, r5, r6, lr}
 8001f56:	460e      	mov	r6, r1
 8001f58:	4615      	mov	r5, r2
 8001f5a:	f7ff ffb3 	bl	8001ec4 <findslot>
 8001f5e:	4604      	mov	r4, r0
 8001f60:	b930      	cbnz	r0, 8001f70 <_read+0x1c>
 8001f62:	f000 fa57 	bl	8002414 <__errno>
 8001f66:	2309      	movs	r3, #9
 8001f68:	6003      	str	r3, [r0, #0]
 8001f6a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001f6e:	bd70      	pop	{r4, r5, r6, pc}
 8001f70:	462a      	mov	r2, r5
 8001f72:	4631      	mov	r1, r6
 8001f74:	6800      	ldr	r0, [r0, #0]
 8001f76:	f7ff ffdd 	bl	8001f34 <_swiread>
 8001f7a:	1c43      	adds	r3, r0, #1
 8001f7c:	bf1f      	itttt	ne
 8001f7e:	6863      	ldrne	r3, [r4, #4]
 8001f80:	1a28      	subne	r0, r5, r0
 8001f82:	181b      	addne	r3, r3, r0
 8001f84:	6063      	strne	r3, [r4, #4]
 8001f86:	e7f2      	b.n	8001f6e <_read+0x1a>

08001f88 <_swilseek>:
 8001f88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001f8a:	460c      	mov	r4, r1
 8001f8c:	4616      	mov	r6, r2
 8001f8e:	f7ff ff99 	bl	8001ec4 <findslot>
 8001f92:	4605      	mov	r5, r0
 8001f94:	b940      	cbnz	r0, 8001fa8 <_swilseek+0x20>
 8001f96:	f000 fa3d 	bl	8002414 <__errno>
 8001f9a:	2309      	movs	r3, #9
 8001f9c:	6003      	str	r3, [r0, #0]
 8001f9e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001fa2:	4620      	mov	r0, r4
 8001fa4:	b003      	add	sp, #12
 8001fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001fa8:	2e02      	cmp	r6, #2
 8001faa:	d903      	bls.n	8001fb4 <_swilseek+0x2c>
 8001fac:	f000 fa32 	bl	8002414 <__errno>
 8001fb0:	2316      	movs	r3, #22
 8001fb2:	e7f3      	b.n	8001f9c <_swilseek+0x14>
 8001fb4:	2e01      	cmp	r6, #1
 8001fb6:	d112      	bne.n	8001fde <_swilseek+0x56>
 8001fb8:	6843      	ldr	r3, [r0, #4]
 8001fba:	18e4      	adds	r4, r4, r3
 8001fbc:	d4f6      	bmi.n	8001fac <_swilseek+0x24>
 8001fbe:	682b      	ldr	r3, [r5, #0]
 8001fc0:	260a      	movs	r6, #10
 8001fc2:	e9cd 3400 	strd	r3, r4, [sp]
 8001fc6:	466f      	mov	r7, sp
 8001fc8:	4630      	mov	r0, r6
 8001fca:	4639      	mov	r1, r7
 8001fcc:	beab      	bkpt	0x00ab
 8001fce:	4606      	mov	r6, r0
 8001fd0:	4630      	mov	r0, r6
 8001fd2:	f7ff ff91 	bl	8001ef8 <checkerror>
 8001fd6:	2800      	cmp	r0, #0
 8001fd8:	dbe1      	blt.n	8001f9e <_swilseek+0x16>
 8001fda:	606c      	str	r4, [r5, #4]
 8001fdc:	e7e1      	b.n	8001fa2 <_swilseek+0x1a>
 8001fde:	2e02      	cmp	r6, #2
 8001fe0:	d1ed      	bne.n	8001fbe <_swilseek+0x36>
 8001fe2:	af02      	add	r7, sp, #8
 8001fe4:	6803      	ldr	r3, [r0, #0]
 8001fe6:	f847 3d08 	str.w	r3, [r7, #-8]!
 8001fea:	260c      	movs	r6, #12
 8001fec:	4630      	mov	r0, r6
 8001fee:	4639      	mov	r1, r7
 8001ff0:	beab      	bkpt	0x00ab
 8001ff2:	4606      	mov	r6, r0
 8001ff4:	4630      	mov	r0, r6
 8001ff6:	f7ff ff7f 	bl	8001ef8 <checkerror>
 8001ffa:	1c43      	adds	r3, r0, #1
 8001ffc:	d0cf      	beq.n	8001f9e <_swilseek+0x16>
 8001ffe:	4404      	add	r4, r0
 8002000:	e7dd      	b.n	8001fbe <_swilseek+0x36>

08002002 <_lseek>:
 8002002:	f7ff bfc1 	b.w	8001f88 <_swilseek>

08002006 <_swiwrite>:
 8002006:	b530      	push	{r4, r5, lr}
 8002008:	b085      	sub	sp, #20
 800200a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800200e:	9203      	str	r2, [sp, #12]
 8002010:	2405      	movs	r4, #5
 8002012:	ad01      	add	r5, sp, #4
 8002014:	4620      	mov	r0, r4
 8002016:	4629      	mov	r1, r5
 8002018:	beab      	bkpt	0x00ab
 800201a:	4604      	mov	r4, r0
 800201c:	4620      	mov	r0, r4
 800201e:	f7ff ff6b 	bl	8001ef8 <checkerror>
 8002022:	b005      	add	sp, #20
 8002024:	bd30      	pop	{r4, r5, pc}

08002026 <_write>:
 8002026:	b570      	push	{r4, r5, r6, lr}
 8002028:	460e      	mov	r6, r1
 800202a:	4615      	mov	r5, r2
 800202c:	f7ff ff4a 	bl	8001ec4 <findslot>
 8002030:	4604      	mov	r4, r0
 8002032:	b930      	cbnz	r0, 8002042 <_write+0x1c>
 8002034:	f000 f9ee 	bl	8002414 <__errno>
 8002038:	2309      	movs	r3, #9
 800203a:	6003      	str	r3, [r0, #0]
 800203c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002040:	bd70      	pop	{r4, r5, r6, pc}
 8002042:	462a      	mov	r2, r5
 8002044:	4631      	mov	r1, r6
 8002046:	6800      	ldr	r0, [r0, #0]
 8002048:	f7ff ffdd 	bl	8002006 <_swiwrite>
 800204c:	1e02      	subs	r2, r0, #0
 800204e:	dbf5      	blt.n	800203c <_write+0x16>
 8002050:	6863      	ldr	r3, [r4, #4]
 8002052:	1aa8      	subs	r0, r5, r2
 8002054:	4403      	add	r3, r0
 8002056:	42aa      	cmp	r2, r5
 8002058:	6063      	str	r3, [r4, #4]
 800205a:	d1f1      	bne.n	8002040 <_write+0x1a>
 800205c:	2000      	movs	r0, #0
 800205e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8002062:	f7ff bf59 	b.w	8001f18 <error>

08002066 <_swiclose>:
 8002066:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002068:	ad02      	add	r5, sp, #8
 800206a:	2402      	movs	r4, #2
 800206c:	f845 0d04 	str.w	r0, [r5, #-4]!
 8002070:	4620      	mov	r0, r4
 8002072:	4629      	mov	r1, r5
 8002074:	beab      	bkpt	0x00ab
 8002076:	4604      	mov	r4, r0
 8002078:	4620      	mov	r0, r4
 800207a:	f7ff ff3d 	bl	8001ef8 <checkerror>
 800207e:	b003      	add	sp, #12
 8002080:	bd30      	pop	{r4, r5, pc}
	...

08002084 <_close>:
 8002084:	b538      	push	{r3, r4, r5, lr}
 8002086:	4605      	mov	r5, r0
 8002088:	f7ff ff1c 	bl	8001ec4 <findslot>
 800208c:	4604      	mov	r4, r0
 800208e:	b930      	cbnz	r0, 800209e <_close+0x1a>
 8002090:	f000 f9c0 	bl	8002414 <__errno>
 8002094:	2309      	movs	r3, #9
 8002096:	6003      	str	r3, [r0, #0]
 8002098:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800209c:	bd38      	pop	{r3, r4, r5, pc}
 800209e:	3d01      	subs	r5, #1
 80020a0:	2d01      	cmp	r5, #1
 80020a2:	d809      	bhi.n	80020b8 <_close+0x34>
 80020a4:	4b09      	ldr	r3, [pc, #36]	; (80020cc <_close+0x48>)
 80020a6:	689a      	ldr	r2, [r3, #8]
 80020a8:	691b      	ldr	r3, [r3, #16]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d104      	bne.n	80020b8 <_close+0x34>
 80020ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020b2:	6003      	str	r3, [r0, #0]
 80020b4:	2000      	movs	r0, #0
 80020b6:	e7f1      	b.n	800209c <_close+0x18>
 80020b8:	6820      	ldr	r0, [r4, #0]
 80020ba:	f7ff ffd4 	bl	8002066 <_swiclose>
 80020be:	2800      	cmp	r0, #0
 80020c0:	d1ec      	bne.n	800209c <_close+0x18>
 80020c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020c6:	6023      	str	r3, [r4, #0]
 80020c8:	e7e8      	b.n	800209c <_close+0x18>
 80020ca:	bf00      	nop
 80020cc:	200000a4 	.word	0x200000a4

080020d0 <_swistat>:
 80020d0:	b570      	push	{r4, r5, r6, lr}
 80020d2:	460c      	mov	r4, r1
 80020d4:	f7ff fef6 	bl	8001ec4 <findslot>
 80020d8:	4606      	mov	r6, r0
 80020da:	b930      	cbnz	r0, 80020ea <_swistat+0x1a>
 80020dc:	f000 f99a 	bl	8002414 <__errno>
 80020e0:	2309      	movs	r3, #9
 80020e2:	6003      	str	r3, [r0, #0]
 80020e4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80020e8:	bd70      	pop	{r4, r5, r6, pc}
 80020ea:	6863      	ldr	r3, [r4, #4]
 80020ec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020f0:	6063      	str	r3, [r4, #4]
 80020f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020f6:	6463      	str	r3, [r4, #68]	; 0x44
 80020f8:	250c      	movs	r5, #12
 80020fa:	4628      	mov	r0, r5
 80020fc:	4631      	mov	r1, r6
 80020fe:	beab      	bkpt	0x00ab
 8002100:	4605      	mov	r5, r0
 8002102:	4628      	mov	r0, r5
 8002104:	f7ff fef8 	bl	8001ef8 <checkerror>
 8002108:	1c43      	adds	r3, r0, #1
 800210a:	bf1c      	itt	ne
 800210c:	6120      	strne	r0, [r4, #16]
 800210e:	2000      	movne	r0, #0
 8002110:	e7ea      	b.n	80020e8 <_swistat+0x18>

08002112 <_fstat>:
 8002112:	460b      	mov	r3, r1
 8002114:	b510      	push	{r4, lr}
 8002116:	2100      	movs	r1, #0
 8002118:	4604      	mov	r4, r0
 800211a:	2258      	movs	r2, #88	; 0x58
 800211c:	4618      	mov	r0, r3
 800211e:	f000 fa6d 	bl	80025fc <memset>
 8002122:	4601      	mov	r1, r0
 8002124:	4620      	mov	r0, r4
 8002126:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800212a:	f7ff bfd1 	b.w	80020d0 <_swistat>

0800212e <_stat>:
 800212e:	b538      	push	{r3, r4, r5, lr}
 8002130:	460d      	mov	r5, r1
 8002132:	4604      	mov	r4, r0
 8002134:	2258      	movs	r2, #88	; 0x58
 8002136:	2100      	movs	r1, #0
 8002138:	4628      	mov	r0, r5
 800213a:	f000 fa5f 	bl	80025fc <memset>
 800213e:	4620      	mov	r0, r4
 8002140:	2100      	movs	r1, #0
 8002142:	f000 f811 	bl	8002168 <_swiopen>
 8002146:	1c43      	adds	r3, r0, #1
 8002148:	4604      	mov	r4, r0
 800214a:	d00b      	beq.n	8002164 <_stat+0x36>
 800214c:	686b      	ldr	r3, [r5, #4]
 800214e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8002152:	606b      	str	r3, [r5, #4]
 8002154:	4629      	mov	r1, r5
 8002156:	f7ff ffbb 	bl	80020d0 <_swistat>
 800215a:	4605      	mov	r5, r0
 800215c:	4620      	mov	r0, r4
 800215e:	f7ff ff91 	bl	8002084 <_close>
 8002162:	462c      	mov	r4, r5
 8002164:	4620      	mov	r0, r4
 8002166:	bd38      	pop	{r3, r4, r5, pc}

08002168 <_swiopen>:
 8002168:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800216c:	4b2b      	ldr	r3, [pc, #172]	; (800221c <_swiopen+0xb4>)
 800216e:	b096      	sub	sp, #88	; 0x58
 8002170:	4682      	mov	sl, r0
 8002172:	460e      	mov	r6, r1
 8002174:	2500      	movs	r5, #0
 8002176:	4698      	mov	r8, r3
 8002178:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 800217c:	1c61      	adds	r1, r4, #1
 800217e:	ea4f 07c5 	mov.w	r7, r5, lsl #3
 8002182:	d036      	beq.n	80021f2 <_swiopen+0x8a>
 8002184:	3501      	adds	r5, #1
 8002186:	2d14      	cmp	r5, #20
 8002188:	d1f6      	bne.n	8002178 <_swiopen+0x10>
 800218a:	f000 f943 	bl	8002414 <__errno>
 800218e:	2318      	movs	r3, #24
 8002190:	6003      	str	r3, [r0, #0]
 8002192:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8002196:	e03c      	b.n	8002212 <_swiopen+0xaa>
 8002198:	f3c6 4400 	ubfx	r4, r6, #16, #1
 800219c:	f240 6301 	movw	r3, #1537	; 0x601
 80021a0:	07b2      	lsls	r2, r6, #30
 80021a2:	bf48      	it	mi
 80021a4:	f044 0402 	orrmi.w	r4, r4, #2
 80021a8:	421e      	tst	r6, r3
 80021aa:	bf18      	it	ne
 80021ac:	f044 0404 	orrne.w	r4, r4, #4
 80021b0:	0733      	lsls	r3, r6, #28
 80021b2:	bf48      	it	mi
 80021b4:	f024 0404 	bicmi.w	r4, r4, #4
 80021b8:	4650      	mov	r0, sl
 80021ba:	bf48      	it	mi
 80021bc:	f044 0408 	orrmi.w	r4, r4, #8
 80021c0:	f8cd a000 	str.w	sl, [sp]
 80021c4:	f7fe f80c 	bl	80001e0 <strlen>
 80021c8:	e9cd 4001 	strd	r4, r0, [sp, #4]
 80021cc:	2401      	movs	r4, #1
 80021ce:	4620      	mov	r0, r4
 80021d0:	4649      	mov	r1, r9
 80021d2:	beab      	bkpt	0x00ab
 80021d4:	4604      	mov	r4, r0
 80021d6:	2c00      	cmp	r4, #0
 80021d8:	db06      	blt.n	80021e8 <_swiopen+0x80>
 80021da:	4447      	add	r7, r8
 80021dc:	2300      	movs	r3, #0
 80021de:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 80021e2:	607b      	str	r3, [r7, #4]
 80021e4:	462c      	mov	r4, r5
 80021e6:	e014      	b.n	8002212 <_swiopen+0xaa>
 80021e8:	4620      	mov	r0, r4
 80021ea:	f7ff fe95 	bl	8001f18 <error>
 80021ee:	4604      	mov	r4, r0
 80021f0:	e00f      	b.n	8002212 <_swiopen+0xaa>
 80021f2:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 80021f6:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 80021fa:	46e9      	mov	r9, sp
 80021fc:	d1cc      	bne.n	8002198 <_swiopen+0x30>
 80021fe:	4649      	mov	r1, r9
 8002200:	4650      	mov	r0, sl
 8002202:	f7ff ff94 	bl	800212e <_stat>
 8002206:	3001      	adds	r0, #1
 8002208:	d0c6      	beq.n	8002198 <_swiopen+0x30>
 800220a:	f000 f903 	bl	8002414 <__errno>
 800220e:	2311      	movs	r3, #17
 8002210:	6003      	str	r3, [r0, #0]
 8002212:	4620      	mov	r0, r4
 8002214:	b016      	add	sp, #88	; 0x58
 8002216:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800221a:	bf00      	nop
 800221c:	200000a4 	.word	0x200000a4

08002220 <_get_semihosting_exts>:
 8002220:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002224:	4607      	mov	r7, r0
 8002226:	4688      	mov	r8, r1
 8002228:	4829      	ldr	r0, [pc, #164]	; (80022d0 <_get_semihosting_exts+0xb0>)
 800222a:	2100      	movs	r1, #0
 800222c:	4615      	mov	r5, r2
 800222e:	f7ff ff9b 	bl	8002168 <_swiopen>
 8002232:	462a      	mov	r2, r5
 8002234:	4604      	mov	r4, r0
 8002236:	2100      	movs	r1, #0
 8002238:	4638      	mov	r0, r7
 800223a:	f000 f9df 	bl	80025fc <memset>
 800223e:	1c63      	adds	r3, r4, #1
 8002240:	d015      	beq.n	800226e <_get_semihosting_exts+0x4e>
 8002242:	4620      	mov	r0, r4
 8002244:	f7ff fe3e 	bl	8001ec4 <findslot>
 8002248:	260c      	movs	r6, #12
 800224a:	4681      	mov	r9, r0
 800224c:	4630      	mov	r0, r6
 800224e:	4649      	mov	r1, r9
 8002250:	beab      	bkpt	0x00ab
 8002252:	4606      	mov	r6, r0
 8002254:	4630      	mov	r0, r6
 8002256:	f7ff fe4f 	bl	8001ef8 <checkerror>
 800225a:	2803      	cmp	r0, #3
 800225c:	dd02      	ble.n	8002264 <_get_semihosting_exts+0x44>
 800225e:	3803      	subs	r0, #3
 8002260:	42a8      	cmp	r0, r5
 8002262:	dc08      	bgt.n	8002276 <_get_semihosting_exts+0x56>
 8002264:	4620      	mov	r0, r4
 8002266:	f7ff ff0d 	bl	8002084 <_close>
 800226a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800226e:	4620      	mov	r0, r4
 8002270:	b003      	add	sp, #12
 8002272:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002276:	2204      	movs	r2, #4
 8002278:	eb0d 0102 	add.w	r1, sp, r2
 800227c:	4620      	mov	r0, r4
 800227e:	f7ff fe69 	bl	8001f54 <_read>
 8002282:	2803      	cmp	r0, #3
 8002284:	ddee      	ble.n	8002264 <_get_semihosting_exts+0x44>
 8002286:	f89d 3004 	ldrb.w	r3, [sp, #4]
 800228a:	2b53      	cmp	r3, #83	; 0x53
 800228c:	d1ea      	bne.n	8002264 <_get_semihosting_exts+0x44>
 800228e:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8002292:	2b48      	cmp	r3, #72	; 0x48
 8002294:	d1e6      	bne.n	8002264 <_get_semihosting_exts+0x44>
 8002296:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800229a:	2b46      	cmp	r3, #70	; 0x46
 800229c:	d1e2      	bne.n	8002264 <_get_semihosting_exts+0x44>
 800229e:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80022a2:	2b42      	cmp	r3, #66	; 0x42
 80022a4:	d1de      	bne.n	8002264 <_get_semihosting_exts+0x44>
 80022a6:	2201      	movs	r2, #1
 80022a8:	4641      	mov	r1, r8
 80022aa:	4620      	mov	r0, r4
 80022ac:	f7ff fe6c 	bl	8001f88 <_swilseek>
 80022b0:	2800      	cmp	r0, #0
 80022b2:	dbd7      	blt.n	8002264 <_get_semihosting_exts+0x44>
 80022b4:	462a      	mov	r2, r5
 80022b6:	4639      	mov	r1, r7
 80022b8:	4620      	mov	r0, r4
 80022ba:	f7ff fe4b 	bl	8001f54 <_read>
 80022be:	4605      	mov	r5, r0
 80022c0:	4620      	mov	r0, r4
 80022c2:	f7ff fedf 	bl	8002084 <_close>
 80022c6:	4628      	mov	r0, r5
 80022c8:	f7ff fe16 	bl	8001ef8 <checkerror>
 80022cc:	4604      	mov	r4, r0
 80022ce:	e7ce      	b.n	800226e <_get_semihosting_exts+0x4e>
 80022d0:	08003390 	.word	0x08003390

080022d4 <initialise_semihosting_exts>:
 80022d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80022d6:	4d0a      	ldr	r5, [pc, #40]	; (8002300 <initialise_semihosting_exts+0x2c>)
 80022d8:	4c0a      	ldr	r4, [pc, #40]	; (8002304 <initialise_semihosting_exts+0x30>)
 80022da:	2100      	movs	r1, #0
 80022dc:	2201      	movs	r2, #1
 80022de:	a801      	add	r0, sp, #4
 80022e0:	6029      	str	r1, [r5, #0]
 80022e2:	6022      	str	r2, [r4, #0]
 80022e4:	f7ff ff9c 	bl	8002220 <_get_semihosting_exts>
 80022e8:	2800      	cmp	r0, #0
 80022ea:	dd07      	ble.n	80022fc <initialise_semihosting_exts+0x28>
 80022ec:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80022f0:	f003 0201 	and.w	r2, r3, #1
 80022f4:	f003 0302 	and.w	r3, r3, #2
 80022f8:	602a      	str	r2, [r5, #0]
 80022fa:	6023      	str	r3, [r4, #0]
 80022fc:	b003      	add	sp, #12
 80022fe:	bd30      	pop	{r4, r5, pc}
 8002300:	2000000c 	.word	0x2000000c
 8002304:	20000010 	.word	0x20000010

08002308 <_has_ext_stdout_stderr>:
 8002308:	b510      	push	{r4, lr}
 800230a:	4c04      	ldr	r4, [pc, #16]	; (800231c <_has_ext_stdout_stderr+0x14>)
 800230c:	6822      	ldr	r2, [r4, #0]
 800230e:	2a00      	cmp	r2, #0
 8002310:	da01      	bge.n	8002316 <_has_ext_stdout_stderr+0xe>
 8002312:	f7ff ffdf 	bl	80022d4 <initialise_semihosting_exts>
 8002316:	6820      	ldr	r0, [r4, #0]
 8002318:	bd10      	pop	{r4, pc}
 800231a:	bf00      	nop
 800231c:	20000010 	.word	0x20000010

08002320 <initialise_monitor_handles>:
 8002320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002324:	b085      	sub	sp, #20
 8002326:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 80023d8 <initialise_monitor_handles+0xb8>
 800232a:	f8cd 9004 	str.w	r9, [sp, #4]
 800232e:	2303      	movs	r3, #3
 8002330:	2400      	movs	r4, #0
 8002332:	9303      	str	r3, [sp, #12]
 8002334:	f10d 0804 	add.w	r8, sp, #4
 8002338:	9402      	str	r4, [sp, #8]
 800233a:	2501      	movs	r5, #1
 800233c:	4628      	mov	r0, r5
 800233e:	4641      	mov	r1, r8
 8002340:	beab      	bkpt	0x00ab
 8002342:	4605      	mov	r5, r0
 8002344:	4e20      	ldr	r6, [pc, #128]	; (80023c8 <initialise_monitor_handles+0xa8>)
 8002346:	4a21      	ldr	r2, [pc, #132]	; (80023cc <initialise_monitor_handles+0xac>)
 8002348:	6035      	str	r5, [r6, #0]
 800234a:	4623      	mov	r3, r4
 800234c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002350:	4614      	mov	r4, r2
 8002352:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 8002356:	3301      	adds	r3, #1
 8002358:	2b14      	cmp	r3, #20
 800235a:	d1fa      	bne.n	8002352 <initialise_monitor_handles+0x32>
 800235c:	f7ff ffd4 	bl	8002308 <_has_ext_stdout_stderr>
 8002360:	4d1b      	ldr	r5, [pc, #108]	; (80023d0 <initialise_monitor_handles+0xb0>)
 8002362:	b1d0      	cbz	r0, 800239a <initialise_monitor_handles+0x7a>
 8002364:	f04f 0a03 	mov.w	sl, #3
 8002368:	2304      	movs	r3, #4
 800236a:	f8cd 9004 	str.w	r9, [sp, #4]
 800236e:	2701      	movs	r7, #1
 8002370:	f8cd a00c 	str.w	sl, [sp, #12]
 8002374:	9302      	str	r3, [sp, #8]
 8002376:	4638      	mov	r0, r7
 8002378:	4641      	mov	r1, r8
 800237a:	beab      	bkpt	0x00ab
 800237c:	4683      	mov	fp, r0
 800237e:	4b15      	ldr	r3, [pc, #84]	; (80023d4 <initialise_monitor_handles+0xb4>)
 8002380:	f8cd 9004 	str.w	r9, [sp, #4]
 8002384:	f8c3 b000 	str.w	fp, [r3]
 8002388:	2308      	movs	r3, #8
 800238a:	f8cd a00c 	str.w	sl, [sp, #12]
 800238e:	9302      	str	r3, [sp, #8]
 8002390:	4638      	mov	r0, r7
 8002392:	4641      	mov	r1, r8
 8002394:	beab      	bkpt	0x00ab
 8002396:	4607      	mov	r7, r0
 8002398:	602f      	str	r7, [r5, #0]
 800239a:	682b      	ldr	r3, [r5, #0]
 800239c:	3301      	adds	r3, #1
 800239e:	bf02      	ittt	eq
 80023a0:	4b0c      	ldreq	r3, [pc, #48]	; (80023d4 <initialise_monitor_handles+0xb4>)
 80023a2:	681b      	ldreq	r3, [r3, #0]
 80023a4:	602b      	streq	r3, [r5, #0]
 80023a6:	6833      	ldr	r3, [r6, #0]
 80023a8:	6023      	str	r3, [r4, #0]
 80023aa:	2600      	movs	r6, #0
 80023ac:	6066      	str	r6, [r4, #4]
 80023ae:	f7ff ffab 	bl	8002308 <_has_ext_stdout_stderr>
 80023b2:	b130      	cbz	r0, 80023c2 <initialise_monitor_handles+0xa2>
 80023b4:	4b07      	ldr	r3, [pc, #28]	; (80023d4 <initialise_monitor_handles+0xb4>)
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	e9c4 3602 	strd	r3, r6, [r4, #8]
 80023bc:	682b      	ldr	r3, [r5, #0]
 80023be:	e9c4 3604 	strd	r3, r6, [r4, #16]
 80023c2:	b005      	add	sp, #20
 80023c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80023c8:	2000009c 	.word	0x2000009c
 80023cc:	200000a4 	.word	0x200000a4
 80023d0:	20000098 	.word	0x20000098
 80023d4:	200000a0 	.word	0x200000a0
 80023d8:	080033a6 	.word	0x080033a6

080023dc <_isatty>:
 80023dc:	b570      	push	{r4, r5, r6, lr}
 80023de:	f7ff fd71 	bl	8001ec4 <findslot>
 80023e2:	2509      	movs	r5, #9
 80023e4:	4604      	mov	r4, r0
 80023e6:	b920      	cbnz	r0, 80023f2 <_isatty+0x16>
 80023e8:	f000 f814 	bl	8002414 <__errno>
 80023ec:	6005      	str	r5, [r0, #0]
 80023ee:	4620      	mov	r0, r4
 80023f0:	bd70      	pop	{r4, r5, r6, pc}
 80023f2:	4628      	mov	r0, r5
 80023f4:	4621      	mov	r1, r4
 80023f6:	beab      	bkpt	0x00ab
 80023f8:	4604      	mov	r4, r0
 80023fa:	2c01      	cmp	r4, #1
 80023fc:	d0f7      	beq.n	80023ee <_isatty+0x12>
 80023fe:	f000 f809 	bl	8002414 <__errno>
 8002402:	2400      	movs	r4, #0
 8002404:	4606      	mov	r6, r0
 8002406:	2513      	movs	r5, #19
 8002408:	4628      	mov	r0, r5
 800240a:	4621      	mov	r1, r4
 800240c:	beab      	bkpt	0x00ab
 800240e:	4605      	mov	r5, r0
 8002410:	6035      	str	r5, [r6, #0]
 8002412:	e7ec      	b.n	80023ee <_isatty+0x12>

08002414 <__errno>:
 8002414:	4b01      	ldr	r3, [pc, #4]	; (800241c <__errno+0x8>)
 8002416:	6818      	ldr	r0, [r3, #0]
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	20000014 	.word	0x20000014

08002420 <std>:
 8002420:	2300      	movs	r3, #0
 8002422:	b510      	push	{r4, lr}
 8002424:	4604      	mov	r4, r0
 8002426:	e9c0 3300 	strd	r3, r3, [r0]
 800242a:	6083      	str	r3, [r0, #8]
 800242c:	8181      	strh	r1, [r0, #12]
 800242e:	6643      	str	r3, [r0, #100]	; 0x64
 8002430:	81c2      	strh	r2, [r0, #14]
 8002432:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002436:	6183      	str	r3, [r0, #24]
 8002438:	4619      	mov	r1, r3
 800243a:	2208      	movs	r2, #8
 800243c:	305c      	adds	r0, #92	; 0x5c
 800243e:	f000 f8dd 	bl	80025fc <memset>
 8002442:	4b05      	ldr	r3, [pc, #20]	; (8002458 <std+0x38>)
 8002444:	6263      	str	r3, [r4, #36]	; 0x24
 8002446:	4b05      	ldr	r3, [pc, #20]	; (800245c <std+0x3c>)
 8002448:	62a3      	str	r3, [r4, #40]	; 0x28
 800244a:	4b05      	ldr	r3, [pc, #20]	; (8002460 <std+0x40>)
 800244c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800244e:	4b05      	ldr	r3, [pc, #20]	; (8002464 <std+0x44>)
 8002450:	6224      	str	r4, [r4, #32]
 8002452:	6323      	str	r3, [r4, #48]	; 0x30
 8002454:	bd10      	pop	{r4, pc}
 8002456:	bf00      	nop
 8002458:	080027d9 	.word	0x080027d9
 800245c:	080027fb 	.word	0x080027fb
 8002460:	08002833 	.word	0x08002833
 8002464:	08002857 	.word	0x08002857

08002468 <_cleanup_r>:
 8002468:	4901      	ldr	r1, [pc, #4]	; (8002470 <_cleanup_r+0x8>)
 800246a:	f000 b885 	b.w	8002578 <_fwalk_reent>
 800246e:	bf00      	nop
 8002470:	08002b31 	.word	0x08002b31

08002474 <__sfmoreglue>:
 8002474:	b570      	push	{r4, r5, r6, lr}
 8002476:	1e4a      	subs	r2, r1, #1
 8002478:	2568      	movs	r5, #104	; 0x68
 800247a:	4355      	muls	r5, r2
 800247c:	460e      	mov	r6, r1
 800247e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002482:	f000 f8c3 	bl	800260c <_malloc_r>
 8002486:	4604      	mov	r4, r0
 8002488:	b140      	cbz	r0, 800249c <__sfmoreglue+0x28>
 800248a:	2100      	movs	r1, #0
 800248c:	e9c0 1600 	strd	r1, r6, [r0]
 8002490:	300c      	adds	r0, #12
 8002492:	60a0      	str	r0, [r4, #8]
 8002494:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002498:	f000 f8b0 	bl	80025fc <memset>
 800249c:	4620      	mov	r0, r4
 800249e:	bd70      	pop	{r4, r5, r6, pc}

080024a0 <__sinit>:
 80024a0:	6983      	ldr	r3, [r0, #24]
 80024a2:	b510      	push	{r4, lr}
 80024a4:	4604      	mov	r4, r0
 80024a6:	bb33      	cbnz	r3, 80024f6 <__sinit+0x56>
 80024a8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80024ac:	6503      	str	r3, [r0, #80]	; 0x50
 80024ae:	4b12      	ldr	r3, [pc, #72]	; (80024f8 <__sinit+0x58>)
 80024b0:	4a12      	ldr	r2, [pc, #72]	; (80024fc <__sinit+0x5c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	6282      	str	r2, [r0, #40]	; 0x28
 80024b6:	4298      	cmp	r0, r3
 80024b8:	bf04      	itt	eq
 80024ba:	2301      	moveq	r3, #1
 80024bc:	6183      	streq	r3, [r0, #24]
 80024be:	f000 f81f 	bl	8002500 <__sfp>
 80024c2:	6060      	str	r0, [r4, #4]
 80024c4:	4620      	mov	r0, r4
 80024c6:	f000 f81b 	bl	8002500 <__sfp>
 80024ca:	60a0      	str	r0, [r4, #8]
 80024cc:	4620      	mov	r0, r4
 80024ce:	f000 f817 	bl	8002500 <__sfp>
 80024d2:	2200      	movs	r2, #0
 80024d4:	60e0      	str	r0, [r4, #12]
 80024d6:	2104      	movs	r1, #4
 80024d8:	6860      	ldr	r0, [r4, #4]
 80024da:	f7ff ffa1 	bl	8002420 <std>
 80024de:	2201      	movs	r2, #1
 80024e0:	2109      	movs	r1, #9
 80024e2:	68a0      	ldr	r0, [r4, #8]
 80024e4:	f7ff ff9c 	bl	8002420 <std>
 80024e8:	2202      	movs	r2, #2
 80024ea:	2112      	movs	r1, #18
 80024ec:	68e0      	ldr	r0, [r4, #12]
 80024ee:	f7ff ff97 	bl	8002420 <std>
 80024f2:	2301      	movs	r3, #1
 80024f4:	61a3      	str	r3, [r4, #24]
 80024f6:	bd10      	pop	{r4, pc}
 80024f8:	0800340c 	.word	0x0800340c
 80024fc:	08002469 	.word	0x08002469

08002500 <__sfp>:
 8002500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002502:	4b1b      	ldr	r3, [pc, #108]	; (8002570 <__sfp+0x70>)
 8002504:	681e      	ldr	r6, [r3, #0]
 8002506:	69b3      	ldr	r3, [r6, #24]
 8002508:	4607      	mov	r7, r0
 800250a:	b913      	cbnz	r3, 8002512 <__sfp+0x12>
 800250c:	4630      	mov	r0, r6
 800250e:	f7ff ffc7 	bl	80024a0 <__sinit>
 8002512:	3648      	adds	r6, #72	; 0x48
 8002514:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002518:	3b01      	subs	r3, #1
 800251a:	d503      	bpl.n	8002524 <__sfp+0x24>
 800251c:	6833      	ldr	r3, [r6, #0]
 800251e:	b133      	cbz	r3, 800252e <__sfp+0x2e>
 8002520:	6836      	ldr	r6, [r6, #0]
 8002522:	e7f7      	b.n	8002514 <__sfp+0x14>
 8002524:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002528:	b16d      	cbz	r5, 8002546 <__sfp+0x46>
 800252a:	3468      	adds	r4, #104	; 0x68
 800252c:	e7f4      	b.n	8002518 <__sfp+0x18>
 800252e:	2104      	movs	r1, #4
 8002530:	4638      	mov	r0, r7
 8002532:	f7ff ff9f 	bl	8002474 <__sfmoreglue>
 8002536:	6030      	str	r0, [r6, #0]
 8002538:	2800      	cmp	r0, #0
 800253a:	d1f1      	bne.n	8002520 <__sfp+0x20>
 800253c:	230c      	movs	r3, #12
 800253e:	603b      	str	r3, [r7, #0]
 8002540:	4604      	mov	r4, r0
 8002542:	4620      	mov	r0, r4
 8002544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002546:	4b0b      	ldr	r3, [pc, #44]	; (8002574 <__sfp+0x74>)
 8002548:	6665      	str	r5, [r4, #100]	; 0x64
 800254a:	e9c4 5500 	strd	r5, r5, [r4]
 800254e:	60a5      	str	r5, [r4, #8]
 8002550:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002554:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002558:	2208      	movs	r2, #8
 800255a:	4629      	mov	r1, r5
 800255c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002560:	f000 f84c 	bl	80025fc <memset>
 8002564:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002568:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800256c:	e7e9      	b.n	8002542 <__sfp+0x42>
 800256e:	bf00      	nop
 8002570:	0800340c 	.word	0x0800340c
 8002574:	ffff0001 	.word	0xffff0001

08002578 <_fwalk_reent>:
 8002578:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800257c:	4680      	mov	r8, r0
 800257e:	4689      	mov	r9, r1
 8002580:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002584:	2600      	movs	r6, #0
 8002586:	b914      	cbnz	r4, 800258e <_fwalk_reent+0x16>
 8002588:	4630      	mov	r0, r6
 800258a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800258e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002592:	3f01      	subs	r7, #1
 8002594:	d501      	bpl.n	800259a <_fwalk_reent+0x22>
 8002596:	6824      	ldr	r4, [r4, #0]
 8002598:	e7f5      	b.n	8002586 <_fwalk_reent+0xe>
 800259a:	89ab      	ldrh	r3, [r5, #12]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d907      	bls.n	80025b0 <_fwalk_reent+0x38>
 80025a0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80025a4:	3301      	adds	r3, #1
 80025a6:	d003      	beq.n	80025b0 <_fwalk_reent+0x38>
 80025a8:	4629      	mov	r1, r5
 80025aa:	4640      	mov	r0, r8
 80025ac:	47c8      	blx	r9
 80025ae:	4306      	orrs	r6, r0
 80025b0:	3568      	adds	r5, #104	; 0x68
 80025b2:	e7ee      	b.n	8002592 <_fwalk_reent+0x1a>

080025b4 <__libc_init_array>:
 80025b4:	b570      	push	{r4, r5, r6, lr}
 80025b6:	4e0d      	ldr	r6, [pc, #52]	; (80025ec <__libc_init_array+0x38>)
 80025b8:	4c0d      	ldr	r4, [pc, #52]	; (80025f0 <__libc_init_array+0x3c>)
 80025ba:	1ba4      	subs	r4, r4, r6
 80025bc:	10a4      	asrs	r4, r4, #2
 80025be:	2500      	movs	r5, #0
 80025c0:	42a5      	cmp	r5, r4
 80025c2:	d109      	bne.n	80025d8 <__libc_init_array+0x24>
 80025c4:	4e0b      	ldr	r6, [pc, #44]	; (80025f4 <__libc_init_array+0x40>)
 80025c6:	4c0c      	ldr	r4, [pc, #48]	; (80025f8 <__libc_init_array+0x44>)
 80025c8:	f000 fe9e 	bl	8003308 <_init>
 80025cc:	1ba4      	subs	r4, r4, r6
 80025ce:	10a4      	asrs	r4, r4, #2
 80025d0:	2500      	movs	r5, #0
 80025d2:	42a5      	cmp	r5, r4
 80025d4:	d105      	bne.n	80025e2 <__libc_init_array+0x2e>
 80025d6:	bd70      	pop	{r4, r5, r6, pc}
 80025d8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025dc:	4798      	blx	r3
 80025de:	3501      	adds	r5, #1
 80025e0:	e7ee      	b.n	80025c0 <__libc_init_array+0xc>
 80025e2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80025e6:	4798      	blx	r3
 80025e8:	3501      	adds	r5, #1
 80025ea:	e7f2      	b.n	80025d2 <__libc_init_array+0x1e>
 80025ec:	0800344c 	.word	0x0800344c
 80025f0:	0800344c 	.word	0x0800344c
 80025f4:	0800344c 	.word	0x0800344c
 80025f8:	08003450 	.word	0x08003450

080025fc <memset>:
 80025fc:	4402      	add	r2, r0
 80025fe:	4603      	mov	r3, r0
 8002600:	4293      	cmp	r3, r2
 8002602:	d100      	bne.n	8002606 <memset+0xa>
 8002604:	4770      	bx	lr
 8002606:	f803 1b01 	strb.w	r1, [r3], #1
 800260a:	e7f9      	b.n	8002600 <memset+0x4>

0800260c <_malloc_r>:
 800260c:	b570      	push	{r4, r5, r6, lr}
 800260e:	1ccd      	adds	r5, r1, #3
 8002610:	f025 0503 	bic.w	r5, r5, #3
 8002614:	3508      	adds	r5, #8
 8002616:	2d0c      	cmp	r5, #12
 8002618:	bf38      	it	cc
 800261a:	250c      	movcc	r5, #12
 800261c:	2d00      	cmp	r5, #0
 800261e:	4606      	mov	r6, r0
 8002620:	db01      	blt.n	8002626 <_malloc_r+0x1a>
 8002622:	42a9      	cmp	r1, r5
 8002624:	d903      	bls.n	800262e <_malloc_r+0x22>
 8002626:	230c      	movs	r3, #12
 8002628:	6033      	str	r3, [r6, #0]
 800262a:	2000      	movs	r0, #0
 800262c:	bd70      	pop	{r4, r5, r6, pc}
 800262e:	f000 fb1f 	bl	8002c70 <__malloc_lock>
 8002632:	4a21      	ldr	r2, [pc, #132]	; (80026b8 <_malloc_r+0xac>)
 8002634:	6814      	ldr	r4, [r2, #0]
 8002636:	4621      	mov	r1, r4
 8002638:	b991      	cbnz	r1, 8002660 <_malloc_r+0x54>
 800263a:	4c20      	ldr	r4, [pc, #128]	; (80026bc <_malloc_r+0xb0>)
 800263c:	6823      	ldr	r3, [r4, #0]
 800263e:	b91b      	cbnz	r3, 8002648 <_malloc_r+0x3c>
 8002640:	4630      	mov	r0, r6
 8002642:	f000 f8b9 	bl	80027b8 <_sbrk_r>
 8002646:	6020      	str	r0, [r4, #0]
 8002648:	4629      	mov	r1, r5
 800264a:	4630      	mov	r0, r6
 800264c:	f000 f8b4 	bl	80027b8 <_sbrk_r>
 8002650:	1c43      	adds	r3, r0, #1
 8002652:	d124      	bne.n	800269e <_malloc_r+0x92>
 8002654:	230c      	movs	r3, #12
 8002656:	6033      	str	r3, [r6, #0]
 8002658:	4630      	mov	r0, r6
 800265a:	f000 fb0a 	bl	8002c72 <__malloc_unlock>
 800265e:	e7e4      	b.n	800262a <_malloc_r+0x1e>
 8002660:	680b      	ldr	r3, [r1, #0]
 8002662:	1b5b      	subs	r3, r3, r5
 8002664:	d418      	bmi.n	8002698 <_malloc_r+0x8c>
 8002666:	2b0b      	cmp	r3, #11
 8002668:	d90f      	bls.n	800268a <_malloc_r+0x7e>
 800266a:	600b      	str	r3, [r1, #0]
 800266c:	50cd      	str	r5, [r1, r3]
 800266e:	18cc      	adds	r4, r1, r3
 8002670:	4630      	mov	r0, r6
 8002672:	f000 fafe 	bl	8002c72 <__malloc_unlock>
 8002676:	f104 000b 	add.w	r0, r4, #11
 800267a:	1d23      	adds	r3, r4, #4
 800267c:	f020 0007 	bic.w	r0, r0, #7
 8002680:	1ac3      	subs	r3, r0, r3
 8002682:	d0d3      	beq.n	800262c <_malloc_r+0x20>
 8002684:	425a      	negs	r2, r3
 8002686:	50e2      	str	r2, [r4, r3]
 8002688:	e7d0      	b.n	800262c <_malloc_r+0x20>
 800268a:	428c      	cmp	r4, r1
 800268c:	684b      	ldr	r3, [r1, #4]
 800268e:	bf16      	itet	ne
 8002690:	6063      	strne	r3, [r4, #4]
 8002692:	6013      	streq	r3, [r2, #0]
 8002694:	460c      	movne	r4, r1
 8002696:	e7eb      	b.n	8002670 <_malloc_r+0x64>
 8002698:	460c      	mov	r4, r1
 800269a:	6849      	ldr	r1, [r1, #4]
 800269c:	e7cc      	b.n	8002638 <_malloc_r+0x2c>
 800269e:	1cc4      	adds	r4, r0, #3
 80026a0:	f024 0403 	bic.w	r4, r4, #3
 80026a4:	42a0      	cmp	r0, r4
 80026a6:	d005      	beq.n	80026b4 <_malloc_r+0xa8>
 80026a8:	1a21      	subs	r1, r4, r0
 80026aa:	4630      	mov	r0, r6
 80026ac:	f000 f884 	bl	80027b8 <_sbrk_r>
 80026b0:	3001      	adds	r0, #1
 80026b2:	d0cf      	beq.n	8002654 <_malloc_r+0x48>
 80026b4:	6025      	str	r5, [r4, #0]
 80026b6:	e7db      	b.n	8002670 <_malloc_r+0x64>
 80026b8:	20000144 	.word	0x20000144
 80026bc:	20000148 	.word	0x20000148

080026c0 <iprintf>:
 80026c0:	b40f      	push	{r0, r1, r2, r3}
 80026c2:	4b0a      	ldr	r3, [pc, #40]	; (80026ec <iprintf+0x2c>)
 80026c4:	b513      	push	{r0, r1, r4, lr}
 80026c6:	681c      	ldr	r4, [r3, #0]
 80026c8:	b124      	cbz	r4, 80026d4 <iprintf+0x14>
 80026ca:	69a3      	ldr	r3, [r4, #24]
 80026cc:	b913      	cbnz	r3, 80026d4 <iprintf+0x14>
 80026ce:	4620      	mov	r0, r4
 80026d0:	f7ff fee6 	bl	80024a0 <__sinit>
 80026d4:	ab05      	add	r3, sp, #20
 80026d6:	9a04      	ldr	r2, [sp, #16]
 80026d8:	68a1      	ldr	r1, [r4, #8]
 80026da:	9301      	str	r3, [sp, #4]
 80026dc:	4620      	mov	r0, r4
 80026de:	f000 fb41 	bl	8002d64 <_vfiprintf_r>
 80026e2:	b002      	add	sp, #8
 80026e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80026e8:	b004      	add	sp, #16
 80026ea:	4770      	bx	lr
 80026ec:	20000014 	.word	0x20000014

080026f0 <_puts_r>:
 80026f0:	b570      	push	{r4, r5, r6, lr}
 80026f2:	460e      	mov	r6, r1
 80026f4:	4605      	mov	r5, r0
 80026f6:	b118      	cbz	r0, 8002700 <_puts_r+0x10>
 80026f8:	6983      	ldr	r3, [r0, #24]
 80026fa:	b90b      	cbnz	r3, 8002700 <_puts_r+0x10>
 80026fc:	f7ff fed0 	bl	80024a0 <__sinit>
 8002700:	69ab      	ldr	r3, [r5, #24]
 8002702:	68ac      	ldr	r4, [r5, #8]
 8002704:	b913      	cbnz	r3, 800270c <_puts_r+0x1c>
 8002706:	4628      	mov	r0, r5
 8002708:	f7ff feca 	bl	80024a0 <__sinit>
 800270c:	4b23      	ldr	r3, [pc, #140]	; (800279c <_puts_r+0xac>)
 800270e:	429c      	cmp	r4, r3
 8002710:	d117      	bne.n	8002742 <_puts_r+0x52>
 8002712:	686c      	ldr	r4, [r5, #4]
 8002714:	89a3      	ldrh	r3, [r4, #12]
 8002716:	071b      	lsls	r3, r3, #28
 8002718:	d51d      	bpl.n	8002756 <_puts_r+0x66>
 800271a:	6923      	ldr	r3, [r4, #16]
 800271c:	b1db      	cbz	r3, 8002756 <_puts_r+0x66>
 800271e:	3e01      	subs	r6, #1
 8002720:	68a3      	ldr	r3, [r4, #8]
 8002722:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002726:	3b01      	subs	r3, #1
 8002728:	60a3      	str	r3, [r4, #8]
 800272a:	b9e9      	cbnz	r1, 8002768 <_puts_r+0x78>
 800272c:	2b00      	cmp	r3, #0
 800272e:	da2e      	bge.n	800278e <_puts_r+0x9e>
 8002730:	4622      	mov	r2, r4
 8002732:	210a      	movs	r1, #10
 8002734:	4628      	mov	r0, r5
 8002736:	f000 f893 	bl	8002860 <__swbuf_r>
 800273a:	3001      	adds	r0, #1
 800273c:	d011      	beq.n	8002762 <_puts_r+0x72>
 800273e:	200a      	movs	r0, #10
 8002740:	e011      	b.n	8002766 <_puts_r+0x76>
 8002742:	4b17      	ldr	r3, [pc, #92]	; (80027a0 <_puts_r+0xb0>)
 8002744:	429c      	cmp	r4, r3
 8002746:	d101      	bne.n	800274c <_puts_r+0x5c>
 8002748:	68ac      	ldr	r4, [r5, #8]
 800274a:	e7e3      	b.n	8002714 <_puts_r+0x24>
 800274c:	4b15      	ldr	r3, [pc, #84]	; (80027a4 <_puts_r+0xb4>)
 800274e:	429c      	cmp	r4, r3
 8002750:	bf08      	it	eq
 8002752:	68ec      	ldreq	r4, [r5, #12]
 8002754:	e7de      	b.n	8002714 <_puts_r+0x24>
 8002756:	4621      	mov	r1, r4
 8002758:	4628      	mov	r0, r5
 800275a:	f000 f8e5 	bl	8002928 <__swsetup_r>
 800275e:	2800      	cmp	r0, #0
 8002760:	d0dd      	beq.n	800271e <_puts_r+0x2e>
 8002762:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002766:	bd70      	pop	{r4, r5, r6, pc}
 8002768:	2b00      	cmp	r3, #0
 800276a:	da04      	bge.n	8002776 <_puts_r+0x86>
 800276c:	69a2      	ldr	r2, [r4, #24]
 800276e:	429a      	cmp	r2, r3
 8002770:	dc06      	bgt.n	8002780 <_puts_r+0x90>
 8002772:	290a      	cmp	r1, #10
 8002774:	d004      	beq.n	8002780 <_puts_r+0x90>
 8002776:	6823      	ldr	r3, [r4, #0]
 8002778:	1c5a      	adds	r2, r3, #1
 800277a:	6022      	str	r2, [r4, #0]
 800277c:	7019      	strb	r1, [r3, #0]
 800277e:	e7cf      	b.n	8002720 <_puts_r+0x30>
 8002780:	4622      	mov	r2, r4
 8002782:	4628      	mov	r0, r5
 8002784:	f000 f86c 	bl	8002860 <__swbuf_r>
 8002788:	3001      	adds	r0, #1
 800278a:	d1c9      	bne.n	8002720 <_puts_r+0x30>
 800278c:	e7e9      	b.n	8002762 <_puts_r+0x72>
 800278e:	6823      	ldr	r3, [r4, #0]
 8002790:	200a      	movs	r0, #10
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	6022      	str	r2, [r4, #0]
 8002796:	7018      	strb	r0, [r3, #0]
 8002798:	e7e5      	b.n	8002766 <_puts_r+0x76>
 800279a:	bf00      	nop
 800279c:	080033cc 	.word	0x080033cc
 80027a0:	080033ec 	.word	0x080033ec
 80027a4:	080033ac 	.word	0x080033ac

080027a8 <puts>:
 80027a8:	4b02      	ldr	r3, [pc, #8]	; (80027b4 <puts+0xc>)
 80027aa:	4601      	mov	r1, r0
 80027ac:	6818      	ldr	r0, [r3, #0]
 80027ae:	f7ff bf9f 	b.w	80026f0 <_puts_r>
 80027b2:	bf00      	nop
 80027b4:	20000014 	.word	0x20000014

080027b8 <_sbrk_r>:
 80027b8:	b538      	push	{r3, r4, r5, lr}
 80027ba:	4c06      	ldr	r4, [pc, #24]	; (80027d4 <_sbrk_r+0x1c>)
 80027bc:	2300      	movs	r3, #0
 80027be:	4605      	mov	r5, r0
 80027c0:	4608      	mov	r0, r1
 80027c2:	6023      	str	r3, [r4, #0]
 80027c4:	f7ff faf2 	bl	8001dac <_sbrk>
 80027c8:	1c43      	adds	r3, r0, #1
 80027ca:	d102      	bne.n	80027d2 <_sbrk_r+0x1a>
 80027cc:	6823      	ldr	r3, [r4, #0]
 80027ce:	b103      	cbz	r3, 80027d2 <_sbrk_r+0x1a>
 80027d0:	602b      	str	r3, [r5, #0]
 80027d2:	bd38      	pop	{r3, r4, r5, pc}
 80027d4:	20000150 	.word	0x20000150

080027d8 <__sread>:
 80027d8:	b510      	push	{r4, lr}
 80027da:	460c      	mov	r4, r1
 80027dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80027e0:	f000 fd5e 	bl	80032a0 <_read_r>
 80027e4:	2800      	cmp	r0, #0
 80027e6:	bfab      	itete	ge
 80027e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80027ea:	89a3      	ldrhlt	r3, [r4, #12]
 80027ec:	181b      	addge	r3, r3, r0
 80027ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80027f2:	bfac      	ite	ge
 80027f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80027f6:	81a3      	strhlt	r3, [r4, #12]
 80027f8:	bd10      	pop	{r4, pc}

080027fa <__swrite>:
 80027fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027fe:	461f      	mov	r7, r3
 8002800:	898b      	ldrh	r3, [r1, #12]
 8002802:	05db      	lsls	r3, r3, #23
 8002804:	4605      	mov	r5, r0
 8002806:	460c      	mov	r4, r1
 8002808:	4616      	mov	r6, r2
 800280a:	d505      	bpl.n	8002818 <__swrite+0x1e>
 800280c:	2302      	movs	r3, #2
 800280e:	2200      	movs	r2, #0
 8002810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002814:	f000 f9b6 	bl	8002b84 <_lseek_r>
 8002818:	89a3      	ldrh	r3, [r4, #12]
 800281a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800281e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002822:	81a3      	strh	r3, [r4, #12]
 8002824:	4632      	mov	r2, r6
 8002826:	463b      	mov	r3, r7
 8002828:	4628      	mov	r0, r5
 800282a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800282e:	f000 b869 	b.w	8002904 <_write_r>

08002832 <__sseek>:
 8002832:	b510      	push	{r4, lr}
 8002834:	460c      	mov	r4, r1
 8002836:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800283a:	f000 f9a3 	bl	8002b84 <_lseek_r>
 800283e:	1c43      	adds	r3, r0, #1
 8002840:	89a3      	ldrh	r3, [r4, #12]
 8002842:	bf15      	itete	ne
 8002844:	6560      	strne	r0, [r4, #84]	; 0x54
 8002846:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800284a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800284e:	81a3      	strheq	r3, [r4, #12]
 8002850:	bf18      	it	ne
 8002852:	81a3      	strhne	r3, [r4, #12]
 8002854:	bd10      	pop	{r4, pc}

08002856 <__sclose>:
 8002856:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800285a:	f000 b8d3 	b.w	8002a04 <_close_r>
	...

08002860 <__swbuf_r>:
 8002860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002862:	460e      	mov	r6, r1
 8002864:	4614      	mov	r4, r2
 8002866:	4605      	mov	r5, r0
 8002868:	b118      	cbz	r0, 8002872 <__swbuf_r+0x12>
 800286a:	6983      	ldr	r3, [r0, #24]
 800286c:	b90b      	cbnz	r3, 8002872 <__swbuf_r+0x12>
 800286e:	f7ff fe17 	bl	80024a0 <__sinit>
 8002872:	4b21      	ldr	r3, [pc, #132]	; (80028f8 <__swbuf_r+0x98>)
 8002874:	429c      	cmp	r4, r3
 8002876:	d12a      	bne.n	80028ce <__swbuf_r+0x6e>
 8002878:	686c      	ldr	r4, [r5, #4]
 800287a:	69a3      	ldr	r3, [r4, #24]
 800287c:	60a3      	str	r3, [r4, #8]
 800287e:	89a3      	ldrh	r3, [r4, #12]
 8002880:	071a      	lsls	r2, r3, #28
 8002882:	d52e      	bpl.n	80028e2 <__swbuf_r+0x82>
 8002884:	6923      	ldr	r3, [r4, #16]
 8002886:	b363      	cbz	r3, 80028e2 <__swbuf_r+0x82>
 8002888:	6923      	ldr	r3, [r4, #16]
 800288a:	6820      	ldr	r0, [r4, #0]
 800288c:	1ac0      	subs	r0, r0, r3
 800288e:	6963      	ldr	r3, [r4, #20]
 8002890:	b2f6      	uxtb	r6, r6
 8002892:	4283      	cmp	r3, r0
 8002894:	4637      	mov	r7, r6
 8002896:	dc04      	bgt.n	80028a2 <__swbuf_r+0x42>
 8002898:	4621      	mov	r1, r4
 800289a:	4628      	mov	r0, r5
 800289c:	f000 f948 	bl	8002b30 <_fflush_r>
 80028a0:	bb28      	cbnz	r0, 80028ee <__swbuf_r+0x8e>
 80028a2:	68a3      	ldr	r3, [r4, #8]
 80028a4:	3b01      	subs	r3, #1
 80028a6:	60a3      	str	r3, [r4, #8]
 80028a8:	6823      	ldr	r3, [r4, #0]
 80028aa:	1c5a      	adds	r2, r3, #1
 80028ac:	6022      	str	r2, [r4, #0]
 80028ae:	701e      	strb	r6, [r3, #0]
 80028b0:	6963      	ldr	r3, [r4, #20]
 80028b2:	3001      	adds	r0, #1
 80028b4:	4283      	cmp	r3, r0
 80028b6:	d004      	beq.n	80028c2 <__swbuf_r+0x62>
 80028b8:	89a3      	ldrh	r3, [r4, #12]
 80028ba:	07db      	lsls	r3, r3, #31
 80028bc:	d519      	bpl.n	80028f2 <__swbuf_r+0x92>
 80028be:	2e0a      	cmp	r6, #10
 80028c0:	d117      	bne.n	80028f2 <__swbuf_r+0x92>
 80028c2:	4621      	mov	r1, r4
 80028c4:	4628      	mov	r0, r5
 80028c6:	f000 f933 	bl	8002b30 <_fflush_r>
 80028ca:	b190      	cbz	r0, 80028f2 <__swbuf_r+0x92>
 80028cc:	e00f      	b.n	80028ee <__swbuf_r+0x8e>
 80028ce:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <__swbuf_r+0x9c>)
 80028d0:	429c      	cmp	r4, r3
 80028d2:	d101      	bne.n	80028d8 <__swbuf_r+0x78>
 80028d4:	68ac      	ldr	r4, [r5, #8]
 80028d6:	e7d0      	b.n	800287a <__swbuf_r+0x1a>
 80028d8:	4b09      	ldr	r3, [pc, #36]	; (8002900 <__swbuf_r+0xa0>)
 80028da:	429c      	cmp	r4, r3
 80028dc:	bf08      	it	eq
 80028de:	68ec      	ldreq	r4, [r5, #12]
 80028e0:	e7cb      	b.n	800287a <__swbuf_r+0x1a>
 80028e2:	4621      	mov	r1, r4
 80028e4:	4628      	mov	r0, r5
 80028e6:	f000 f81f 	bl	8002928 <__swsetup_r>
 80028ea:	2800      	cmp	r0, #0
 80028ec:	d0cc      	beq.n	8002888 <__swbuf_r+0x28>
 80028ee:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80028f2:	4638      	mov	r0, r7
 80028f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80028f6:	bf00      	nop
 80028f8:	080033cc 	.word	0x080033cc
 80028fc:	080033ec 	.word	0x080033ec
 8002900:	080033ac 	.word	0x080033ac

08002904 <_write_r>:
 8002904:	b538      	push	{r3, r4, r5, lr}
 8002906:	4c07      	ldr	r4, [pc, #28]	; (8002924 <_write_r+0x20>)
 8002908:	4605      	mov	r5, r0
 800290a:	4608      	mov	r0, r1
 800290c:	4611      	mov	r1, r2
 800290e:	2200      	movs	r2, #0
 8002910:	6022      	str	r2, [r4, #0]
 8002912:	461a      	mov	r2, r3
 8002914:	f7ff fb87 	bl	8002026 <_write>
 8002918:	1c43      	adds	r3, r0, #1
 800291a:	d102      	bne.n	8002922 <_write_r+0x1e>
 800291c:	6823      	ldr	r3, [r4, #0]
 800291e:	b103      	cbz	r3, 8002922 <_write_r+0x1e>
 8002920:	602b      	str	r3, [r5, #0]
 8002922:	bd38      	pop	{r3, r4, r5, pc}
 8002924:	20000150 	.word	0x20000150

08002928 <__swsetup_r>:
 8002928:	4b32      	ldr	r3, [pc, #200]	; (80029f4 <__swsetup_r+0xcc>)
 800292a:	b570      	push	{r4, r5, r6, lr}
 800292c:	681d      	ldr	r5, [r3, #0]
 800292e:	4606      	mov	r6, r0
 8002930:	460c      	mov	r4, r1
 8002932:	b125      	cbz	r5, 800293e <__swsetup_r+0x16>
 8002934:	69ab      	ldr	r3, [r5, #24]
 8002936:	b913      	cbnz	r3, 800293e <__swsetup_r+0x16>
 8002938:	4628      	mov	r0, r5
 800293a:	f7ff fdb1 	bl	80024a0 <__sinit>
 800293e:	4b2e      	ldr	r3, [pc, #184]	; (80029f8 <__swsetup_r+0xd0>)
 8002940:	429c      	cmp	r4, r3
 8002942:	d10f      	bne.n	8002964 <__swsetup_r+0x3c>
 8002944:	686c      	ldr	r4, [r5, #4]
 8002946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800294a:	b29a      	uxth	r2, r3
 800294c:	0715      	lsls	r5, r2, #28
 800294e:	d42c      	bmi.n	80029aa <__swsetup_r+0x82>
 8002950:	06d0      	lsls	r0, r2, #27
 8002952:	d411      	bmi.n	8002978 <__swsetup_r+0x50>
 8002954:	2209      	movs	r2, #9
 8002956:	6032      	str	r2, [r6, #0]
 8002958:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800295c:	81a3      	strh	r3, [r4, #12]
 800295e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002962:	e03e      	b.n	80029e2 <__swsetup_r+0xba>
 8002964:	4b25      	ldr	r3, [pc, #148]	; (80029fc <__swsetup_r+0xd4>)
 8002966:	429c      	cmp	r4, r3
 8002968:	d101      	bne.n	800296e <__swsetup_r+0x46>
 800296a:	68ac      	ldr	r4, [r5, #8]
 800296c:	e7eb      	b.n	8002946 <__swsetup_r+0x1e>
 800296e:	4b24      	ldr	r3, [pc, #144]	; (8002a00 <__swsetup_r+0xd8>)
 8002970:	429c      	cmp	r4, r3
 8002972:	bf08      	it	eq
 8002974:	68ec      	ldreq	r4, [r5, #12]
 8002976:	e7e6      	b.n	8002946 <__swsetup_r+0x1e>
 8002978:	0751      	lsls	r1, r2, #29
 800297a:	d512      	bpl.n	80029a2 <__swsetup_r+0x7a>
 800297c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800297e:	b141      	cbz	r1, 8002992 <__swsetup_r+0x6a>
 8002980:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002984:	4299      	cmp	r1, r3
 8002986:	d002      	beq.n	800298e <__swsetup_r+0x66>
 8002988:	4630      	mov	r0, r6
 800298a:	f000 f973 	bl	8002c74 <_free_r>
 800298e:	2300      	movs	r3, #0
 8002990:	6363      	str	r3, [r4, #52]	; 0x34
 8002992:	89a3      	ldrh	r3, [r4, #12]
 8002994:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002998:	81a3      	strh	r3, [r4, #12]
 800299a:	2300      	movs	r3, #0
 800299c:	6063      	str	r3, [r4, #4]
 800299e:	6923      	ldr	r3, [r4, #16]
 80029a0:	6023      	str	r3, [r4, #0]
 80029a2:	89a3      	ldrh	r3, [r4, #12]
 80029a4:	f043 0308 	orr.w	r3, r3, #8
 80029a8:	81a3      	strh	r3, [r4, #12]
 80029aa:	6923      	ldr	r3, [r4, #16]
 80029ac:	b94b      	cbnz	r3, 80029c2 <__swsetup_r+0x9a>
 80029ae:	89a3      	ldrh	r3, [r4, #12]
 80029b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80029b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029b8:	d003      	beq.n	80029c2 <__swsetup_r+0x9a>
 80029ba:	4621      	mov	r1, r4
 80029bc:	4630      	mov	r0, r6
 80029be:	f000 f917 	bl	8002bf0 <__smakebuf_r>
 80029c2:	89a2      	ldrh	r2, [r4, #12]
 80029c4:	f012 0301 	ands.w	r3, r2, #1
 80029c8:	d00c      	beq.n	80029e4 <__swsetup_r+0xbc>
 80029ca:	2300      	movs	r3, #0
 80029cc:	60a3      	str	r3, [r4, #8]
 80029ce:	6963      	ldr	r3, [r4, #20]
 80029d0:	425b      	negs	r3, r3
 80029d2:	61a3      	str	r3, [r4, #24]
 80029d4:	6923      	ldr	r3, [r4, #16]
 80029d6:	b953      	cbnz	r3, 80029ee <__swsetup_r+0xc6>
 80029d8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80029dc:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80029e0:	d1ba      	bne.n	8002958 <__swsetup_r+0x30>
 80029e2:	bd70      	pop	{r4, r5, r6, pc}
 80029e4:	0792      	lsls	r2, r2, #30
 80029e6:	bf58      	it	pl
 80029e8:	6963      	ldrpl	r3, [r4, #20]
 80029ea:	60a3      	str	r3, [r4, #8]
 80029ec:	e7f2      	b.n	80029d4 <__swsetup_r+0xac>
 80029ee:	2000      	movs	r0, #0
 80029f0:	e7f7      	b.n	80029e2 <__swsetup_r+0xba>
 80029f2:	bf00      	nop
 80029f4:	20000014 	.word	0x20000014
 80029f8:	080033cc 	.word	0x080033cc
 80029fc:	080033ec 	.word	0x080033ec
 8002a00:	080033ac 	.word	0x080033ac

08002a04 <_close_r>:
 8002a04:	b538      	push	{r3, r4, r5, lr}
 8002a06:	4c06      	ldr	r4, [pc, #24]	; (8002a20 <_close_r+0x1c>)
 8002a08:	2300      	movs	r3, #0
 8002a0a:	4605      	mov	r5, r0
 8002a0c:	4608      	mov	r0, r1
 8002a0e:	6023      	str	r3, [r4, #0]
 8002a10:	f7ff fb38 	bl	8002084 <_close>
 8002a14:	1c43      	adds	r3, r0, #1
 8002a16:	d102      	bne.n	8002a1e <_close_r+0x1a>
 8002a18:	6823      	ldr	r3, [r4, #0]
 8002a1a:	b103      	cbz	r3, 8002a1e <_close_r+0x1a>
 8002a1c:	602b      	str	r3, [r5, #0]
 8002a1e:	bd38      	pop	{r3, r4, r5, pc}
 8002a20:	20000150 	.word	0x20000150

08002a24 <__sflush_r>:
 8002a24:	898a      	ldrh	r2, [r1, #12]
 8002a26:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002a2a:	4605      	mov	r5, r0
 8002a2c:	0710      	lsls	r0, r2, #28
 8002a2e:	460c      	mov	r4, r1
 8002a30:	d458      	bmi.n	8002ae4 <__sflush_r+0xc0>
 8002a32:	684b      	ldr	r3, [r1, #4]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	dc05      	bgt.n	8002a44 <__sflush_r+0x20>
 8002a38:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	dc02      	bgt.n	8002a44 <__sflush_r+0x20>
 8002a3e:	2000      	movs	r0, #0
 8002a40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002a44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a46:	2e00      	cmp	r6, #0
 8002a48:	d0f9      	beq.n	8002a3e <__sflush_r+0x1a>
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002a50:	682f      	ldr	r7, [r5, #0]
 8002a52:	6a21      	ldr	r1, [r4, #32]
 8002a54:	602b      	str	r3, [r5, #0]
 8002a56:	d032      	beq.n	8002abe <__sflush_r+0x9a>
 8002a58:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002a5a:	89a3      	ldrh	r3, [r4, #12]
 8002a5c:	075a      	lsls	r2, r3, #29
 8002a5e:	d505      	bpl.n	8002a6c <__sflush_r+0x48>
 8002a60:	6863      	ldr	r3, [r4, #4]
 8002a62:	1ac0      	subs	r0, r0, r3
 8002a64:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002a66:	b10b      	cbz	r3, 8002a6c <__sflush_r+0x48>
 8002a68:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002a6a:	1ac0      	subs	r0, r0, r3
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	4602      	mov	r2, r0
 8002a70:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002a72:	6a21      	ldr	r1, [r4, #32]
 8002a74:	4628      	mov	r0, r5
 8002a76:	47b0      	blx	r6
 8002a78:	1c43      	adds	r3, r0, #1
 8002a7a:	89a3      	ldrh	r3, [r4, #12]
 8002a7c:	d106      	bne.n	8002a8c <__sflush_r+0x68>
 8002a7e:	6829      	ldr	r1, [r5, #0]
 8002a80:	291d      	cmp	r1, #29
 8002a82:	d848      	bhi.n	8002b16 <__sflush_r+0xf2>
 8002a84:	4a29      	ldr	r2, [pc, #164]	; (8002b2c <__sflush_r+0x108>)
 8002a86:	40ca      	lsrs	r2, r1
 8002a88:	07d6      	lsls	r6, r2, #31
 8002a8a:	d544      	bpl.n	8002b16 <__sflush_r+0xf2>
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	6062      	str	r2, [r4, #4]
 8002a90:	04d9      	lsls	r1, r3, #19
 8002a92:	6922      	ldr	r2, [r4, #16]
 8002a94:	6022      	str	r2, [r4, #0]
 8002a96:	d504      	bpl.n	8002aa2 <__sflush_r+0x7e>
 8002a98:	1c42      	adds	r2, r0, #1
 8002a9a:	d101      	bne.n	8002aa0 <__sflush_r+0x7c>
 8002a9c:	682b      	ldr	r3, [r5, #0]
 8002a9e:	b903      	cbnz	r3, 8002aa2 <__sflush_r+0x7e>
 8002aa0:	6560      	str	r0, [r4, #84]	; 0x54
 8002aa2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002aa4:	602f      	str	r7, [r5, #0]
 8002aa6:	2900      	cmp	r1, #0
 8002aa8:	d0c9      	beq.n	8002a3e <__sflush_r+0x1a>
 8002aaa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002aae:	4299      	cmp	r1, r3
 8002ab0:	d002      	beq.n	8002ab8 <__sflush_r+0x94>
 8002ab2:	4628      	mov	r0, r5
 8002ab4:	f000 f8de 	bl	8002c74 <_free_r>
 8002ab8:	2000      	movs	r0, #0
 8002aba:	6360      	str	r0, [r4, #52]	; 0x34
 8002abc:	e7c0      	b.n	8002a40 <__sflush_r+0x1c>
 8002abe:	2301      	movs	r3, #1
 8002ac0:	4628      	mov	r0, r5
 8002ac2:	47b0      	blx	r6
 8002ac4:	1c41      	adds	r1, r0, #1
 8002ac6:	d1c8      	bne.n	8002a5a <__sflush_r+0x36>
 8002ac8:	682b      	ldr	r3, [r5, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d0c5      	beq.n	8002a5a <__sflush_r+0x36>
 8002ace:	2b1d      	cmp	r3, #29
 8002ad0:	d001      	beq.n	8002ad6 <__sflush_r+0xb2>
 8002ad2:	2b16      	cmp	r3, #22
 8002ad4:	d101      	bne.n	8002ada <__sflush_r+0xb6>
 8002ad6:	602f      	str	r7, [r5, #0]
 8002ad8:	e7b1      	b.n	8002a3e <__sflush_r+0x1a>
 8002ada:	89a3      	ldrh	r3, [r4, #12]
 8002adc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002ae0:	81a3      	strh	r3, [r4, #12]
 8002ae2:	e7ad      	b.n	8002a40 <__sflush_r+0x1c>
 8002ae4:	690f      	ldr	r7, [r1, #16]
 8002ae6:	2f00      	cmp	r7, #0
 8002ae8:	d0a9      	beq.n	8002a3e <__sflush_r+0x1a>
 8002aea:	0793      	lsls	r3, r2, #30
 8002aec:	680e      	ldr	r6, [r1, #0]
 8002aee:	bf08      	it	eq
 8002af0:	694b      	ldreq	r3, [r1, #20]
 8002af2:	600f      	str	r7, [r1, #0]
 8002af4:	bf18      	it	ne
 8002af6:	2300      	movne	r3, #0
 8002af8:	eba6 0807 	sub.w	r8, r6, r7
 8002afc:	608b      	str	r3, [r1, #8]
 8002afe:	f1b8 0f00 	cmp.w	r8, #0
 8002b02:	dd9c      	ble.n	8002a3e <__sflush_r+0x1a>
 8002b04:	4643      	mov	r3, r8
 8002b06:	463a      	mov	r2, r7
 8002b08:	6a21      	ldr	r1, [r4, #32]
 8002b0a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002b0c:	4628      	mov	r0, r5
 8002b0e:	47b0      	blx	r6
 8002b10:	2800      	cmp	r0, #0
 8002b12:	dc06      	bgt.n	8002b22 <__sflush_r+0xfe>
 8002b14:	89a3      	ldrh	r3, [r4, #12]
 8002b16:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002b1a:	81a3      	strh	r3, [r4, #12]
 8002b1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002b20:	e78e      	b.n	8002a40 <__sflush_r+0x1c>
 8002b22:	4407      	add	r7, r0
 8002b24:	eba8 0800 	sub.w	r8, r8, r0
 8002b28:	e7e9      	b.n	8002afe <__sflush_r+0xda>
 8002b2a:	bf00      	nop
 8002b2c:	20400001 	.word	0x20400001

08002b30 <_fflush_r>:
 8002b30:	b538      	push	{r3, r4, r5, lr}
 8002b32:	690b      	ldr	r3, [r1, #16]
 8002b34:	4605      	mov	r5, r0
 8002b36:	460c      	mov	r4, r1
 8002b38:	b1db      	cbz	r3, 8002b72 <_fflush_r+0x42>
 8002b3a:	b118      	cbz	r0, 8002b44 <_fflush_r+0x14>
 8002b3c:	6983      	ldr	r3, [r0, #24]
 8002b3e:	b90b      	cbnz	r3, 8002b44 <_fflush_r+0x14>
 8002b40:	f7ff fcae 	bl	80024a0 <__sinit>
 8002b44:	4b0c      	ldr	r3, [pc, #48]	; (8002b78 <_fflush_r+0x48>)
 8002b46:	429c      	cmp	r4, r3
 8002b48:	d109      	bne.n	8002b5e <_fflush_r+0x2e>
 8002b4a:	686c      	ldr	r4, [r5, #4]
 8002b4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b50:	b17b      	cbz	r3, 8002b72 <_fflush_r+0x42>
 8002b52:	4621      	mov	r1, r4
 8002b54:	4628      	mov	r0, r5
 8002b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002b5a:	f7ff bf63 	b.w	8002a24 <__sflush_r>
 8002b5e:	4b07      	ldr	r3, [pc, #28]	; (8002b7c <_fflush_r+0x4c>)
 8002b60:	429c      	cmp	r4, r3
 8002b62:	d101      	bne.n	8002b68 <_fflush_r+0x38>
 8002b64:	68ac      	ldr	r4, [r5, #8]
 8002b66:	e7f1      	b.n	8002b4c <_fflush_r+0x1c>
 8002b68:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <_fflush_r+0x50>)
 8002b6a:	429c      	cmp	r4, r3
 8002b6c:	bf08      	it	eq
 8002b6e:	68ec      	ldreq	r4, [r5, #12]
 8002b70:	e7ec      	b.n	8002b4c <_fflush_r+0x1c>
 8002b72:	2000      	movs	r0, #0
 8002b74:	bd38      	pop	{r3, r4, r5, pc}
 8002b76:	bf00      	nop
 8002b78:	080033cc 	.word	0x080033cc
 8002b7c:	080033ec 	.word	0x080033ec
 8002b80:	080033ac 	.word	0x080033ac

08002b84 <_lseek_r>:
 8002b84:	b538      	push	{r3, r4, r5, lr}
 8002b86:	4c07      	ldr	r4, [pc, #28]	; (8002ba4 <_lseek_r+0x20>)
 8002b88:	4605      	mov	r5, r0
 8002b8a:	4608      	mov	r0, r1
 8002b8c:	4611      	mov	r1, r2
 8002b8e:	2200      	movs	r2, #0
 8002b90:	6022      	str	r2, [r4, #0]
 8002b92:	461a      	mov	r2, r3
 8002b94:	f7ff fa35 	bl	8002002 <_lseek>
 8002b98:	1c43      	adds	r3, r0, #1
 8002b9a:	d102      	bne.n	8002ba2 <_lseek_r+0x1e>
 8002b9c:	6823      	ldr	r3, [r4, #0]
 8002b9e:	b103      	cbz	r3, 8002ba2 <_lseek_r+0x1e>
 8002ba0:	602b      	str	r3, [r5, #0]
 8002ba2:	bd38      	pop	{r3, r4, r5, pc}
 8002ba4:	20000150 	.word	0x20000150

08002ba8 <__swhatbuf_r>:
 8002ba8:	b570      	push	{r4, r5, r6, lr}
 8002baa:	460e      	mov	r6, r1
 8002bac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002bb0:	2900      	cmp	r1, #0
 8002bb2:	b096      	sub	sp, #88	; 0x58
 8002bb4:	4614      	mov	r4, r2
 8002bb6:	461d      	mov	r5, r3
 8002bb8:	da07      	bge.n	8002bca <__swhatbuf_r+0x22>
 8002bba:	2300      	movs	r3, #0
 8002bbc:	602b      	str	r3, [r5, #0]
 8002bbe:	89b3      	ldrh	r3, [r6, #12]
 8002bc0:	061a      	lsls	r2, r3, #24
 8002bc2:	d410      	bmi.n	8002be6 <__swhatbuf_r+0x3e>
 8002bc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002bc8:	e00e      	b.n	8002be8 <__swhatbuf_r+0x40>
 8002bca:	466a      	mov	r2, sp
 8002bcc:	f000 fb7a 	bl	80032c4 <_fstat_r>
 8002bd0:	2800      	cmp	r0, #0
 8002bd2:	dbf2      	blt.n	8002bba <__swhatbuf_r+0x12>
 8002bd4:	9a01      	ldr	r2, [sp, #4]
 8002bd6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002bda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002bde:	425a      	negs	r2, r3
 8002be0:	415a      	adcs	r2, r3
 8002be2:	602a      	str	r2, [r5, #0]
 8002be4:	e7ee      	b.n	8002bc4 <__swhatbuf_r+0x1c>
 8002be6:	2340      	movs	r3, #64	; 0x40
 8002be8:	2000      	movs	r0, #0
 8002bea:	6023      	str	r3, [r4, #0]
 8002bec:	b016      	add	sp, #88	; 0x58
 8002bee:	bd70      	pop	{r4, r5, r6, pc}

08002bf0 <__smakebuf_r>:
 8002bf0:	898b      	ldrh	r3, [r1, #12]
 8002bf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002bf4:	079d      	lsls	r5, r3, #30
 8002bf6:	4606      	mov	r6, r0
 8002bf8:	460c      	mov	r4, r1
 8002bfa:	d507      	bpl.n	8002c0c <__smakebuf_r+0x1c>
 8002bfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002c00:	6023      	str	r3, [r4, #0]
 8002c02:	6123      	str	r3, [r4, #16]
 8002c04:	2301      	movs	r3, #1
 8002c06:	6163      	str	r3, [r4, #20]
 8002c08:	b002      	add	sp, #8
 8002c0a:	bd70      	pop	{r4, r5, r6, pc}
 8002c0c:	ab01      	add	r3, sp, #4
 8002c0e:	466a      	mov	r2, sp
 8002c10:	f7ff ffca 	bl	8002ba8 <__swhatbuf_r>
 8002c14:	9900      	ldr	r1, [sp, #0]
 8002c16:	4605      	mov	r5, r0
 8002c18:	4630      	mov	r0, r6
 8002c1a:	f7ff fcf7 	bl	800260c <_malloc_r>
 8002c1e:	b948      	cbnz	r0, 8002c34 <__smakebuf_r+0x44>
 8002c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c24:	059a      	lsls	r2, r3, #22
 8002c26:	d4ef      	bmi.n	8002c08 <__smakebuf_r+0x18>
 8002c28:	f023 0303 	bic.w	r3, r3, #3
 8002c2c:	f043 0302 	orr.w	r3, r3, #2
 8002c30:	81a3      	strh	r3, [r4, #12]
 8002c32:	e7e3      	b.n	8002bfc <__smakebuf_r+0xc>
 8002c34:	4b0d      	ldr	r3, [pc, #52]	; (8002c6c <__smakebuf_r+0x7c>)
 8002c36:	62b3      	str	r3, [r6, #40]	; 0x28
 8002c38:	89a3      	ldrh	r3, [r4, #12]
 8002c3a:	6020      	str	r0, [r4, #0]
 8002c3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002c40:	81a3      	strh	r3, [r4, #12]
 8002c42:	9b00      	ldr	r3, [sp, #0]
 8002c44:	6163      	str	r3, [r4, #20]
 8002c46:	9b01      	ldr	r3, [sp, #4]
 8002c48:	6120      	str	r0, [r4, #16]
 8002c4a:	b15b      	cbz	r3, 8002c64 <__smakebuf_r+0x74>
 8002c4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c50:	4630      	mov	r0, r6
 8002c52:	f000 fb49 	bl	80032e8 <_isatty_r>
 8002c56:	b128      	cbz	r0, 8002c64 <__smakebuf_r+0x74>
 8002c58:	89a3      	ldrh	r3, [r4, #12]
 8002c5a:	f023 0303 	bic.w	r3, r3, #3
 8002c5e:	f043 0301 	orr.w	r3, r3, #1
 8002c62:	81a3      	strh	r3, [r4, #12]
 8002c64:	89a3      	ldrh	r3, [r4, #12]
 8002c66:	431d      	orrs	r5, r3
 8002c68:	81a5      	strh	r5, [r4, #12]
 8002c6a:	e7cd      	b.n	8002c08 <__smakebuf_r+0x18>
 8002c6c:	08002469 	.word	0x08002469

08002c70 <__malloc_lock>:
 8002c70:	4770      	bx	lr

08002c72 <__malloc_unlock>:
 8002c72:	4770      	bx	lr

08002c74 <_free_r>:
 8002c74:	b538      	push	{r3, r4, r5, lr}
 8002c76:	4605      	mov	r5, r0
 8002c78:	2900      	cmp	r1, #0
 8002c7a:	d045      	beq.n	8002d08 <_free_r+0x94>
 8002c7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002c80:	1f0c      	subs	r4, r1, #4
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	bfb8      	it	lt
 8002c86:	18e4      	addlt	r4, r4, r3
 8002c88:	f7ff fff2 	bl	8002c70 <__malloc_lock>
 8002c8c:	4a1f      	ldr	r2, [pc, #124]	; (8002d0c <_free_r+0x98>)
 8002c8e:	6813      	ldr	r3, [r2, #0]
 8002c90:	4610      	mov	r0, r2
 8002c92:	b933      	cbnz	r3, 8002ca2 <_free_r+0x2e>
 8002c94:	6063      	str	r3, [r4, #4]
 8002c96:	6014      	str	r4, [r2, #0]
 8002c98:	4628      	mov	r0, r5
 8002c9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c9e:	f7ff bfe8 	b.w	8002c72 <__malloc_unlock>
 8002ca2:	42a3      	cmp	r3, r4
 8002ca4:	d90c      	bls.n	8002cc0 <_free_r+0x4c>
 8002ca6:	6821      	ldr	r1, [r4, #0]
 8002ca8:	1862      	adds	r2, r4, r1
 8002caa:	4293      	cmp	r3, r2
 8002cac:	bf04      	itt	eq
 8002cae:	681a      	ldreq	r2, [r3, #0]
 8002cb0:	685b      	ldreq	r3, [r3, #4]
 8002cb2:	6063      	str	r3, [r4, #4]
 8002cb4:	bf04      	itt	eq
 8002cb6:	1852      	addeq	r2, r2, r1
 8002cb8:	6022      	streq	r2, [r4, #0]
 8002cba:	6004      	str	r4, [r0, #0]
 8002cbc:	e7ec      	b.n	8002c98 <_free_r+0x24>
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	b10a      	cbz	r2, 8002cc8 <_free_r+0x54>
 8002cc4:	42a2      	cmp	r2, r4
 8002cc6:	d9fa      	bls.n	8002cbe <_free_r+0x4a>
 8002cc8:	6819      	ldr	r1, [r3, #0]
 8002cca:	1858      	adds	r0, r3, r1
 8002ccc:	42a0      	cmp	r0, r4
 8002cce:	d10b      	bne.n	8002ce8 <_free_r+0x74>
 8002cd0:	6820      	ldr	r0, [r4, #0]
 8002cd2:	4401      	add	r1, r0
 8002cd4:	1858      	adds	r0, r3, r1
 8002cd6:	4282      	cmp	r2, r0
 8002cd8:	6019      	str	r1, [r3, #0]
 8002cda:	d1dd      	bne.n	8002c98 <_free_r+0x24>
 8002cdc:	6810      	ldr	r0, [r2, #0]
 8002cde:	6852      	ldr	r2, [r2, #4]
 8002ce0:	605a      	str	r2, [r3, #4]
 8002ce2:	4401      	add	r1, r0
 8002ce4:	6019      	str	r1, [r3, #0]
 8002ce6:	e7d7      	b.n	8002c98 <_free_r+0x24>
 8002ce8:	d902      	bls.n	8002cf0 <_free_r+0x7c>
 8002cea:	230c      	movs	r3, #12
 8002cec:	602b      	str	r3, [r5, #0]
 8002cee:	e7d3      	b.n	8002c98 <_free_r+0x24>
 8002cf0:	6820      	ldr	r0, [r4, #0]
 8002cf2:	1821      	adds	r1, r4, r0
 8002cf4:	428a      	cmp	r2, r1
 8002cf6:	bf04      	itt	eq
 8002cf8:	6811      	ldreq	r1, [r2, #0]
 8002cfa:	6852      	ldreq	r2, [r2, #4]
 8002cfc:	6062      	str	r2, [r4, #4]
 8002cfe:	bf04      	itt	eq
 8002d00:	1809      	addeq	r1, r1, r0
 8002d02:	6021      	streq	r1, [r4, #0]
 8002d04:	605c      	str	r4, [r3, #4]
 8002d06:	e7c7      	b.n	8002c98 <_free_r+0x24>
 8002d08:	bd38      	pop	{r3, r4, r5, pc}
 8002d0a:	bf00      	nop
 8002d0c:	20000144 	.word	0x20000144

08002d10 <__sfputc_r>:
 8002d10:	6893      	ldr	r3, [r2, #8]
 8002d12:	3b01      	subs	r3, #1
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	b410      	push	{r4}
 8002d18:	6093      	str	r3, [r2, #8]
 8002d1a:	da08      	bge.n	8002d2e <__sfputc_r+0x1e>
 8002d1c:	6994      	ldr	r4, [r2, #24]
 8002d1e:	42a3      	cmp	r3, r4
 8002d20:	db01      	blt.n	8002d26 <__sfputc_r+0x16>
 8002d22:	290a      	cmp	r1, #10
 8002d24:	d103      	bne.n	8002d2e <__sfputc_r+0x1e>
 8002d26:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d2a:	f7ff bd99 	b.w	8002860 <__swbuf_r>
 8002d2e:	6813      	ldr	r3, [r2, #0]
 8002d30:	1c58      	adds	r0, r3, #1
 8002d32:	6010      	str	r0, [r2, #0]
 8002d34:	7019      	strb	r1, [r3, #0]
 8002d36:	4608      	mov	r0, r1
 8002d38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <__sfputs_r>:
 8002d3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d40:	4606      	mov	r6, r0
 8002d42:	460f      	mov	r7, r1
 8002d44:	4614      	mov	r4, r2
 8002d46:	18d5      	adds	r5, r2, r3
 8002d48:	42ac      	cmp	r4, r5
 8002d4a:	d101      	bne.n	8002d50 <__sfputs_r+0x12>
 8002d4c:	2000      	movs	r0, #0
 8002d4e:	e007      	b.n	8002d60 <__sfputs_r+0x22>
 8002d50:	463a      	mov	r2, r7
 8002d52:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d56:	4630      	mov	r0, r6
 8002d58:	f7ff ffda 	bl	8002d10 <__sfputc_r>
 8002d5c:	1c43      	adds	r3, r0, #1
 8002d5e:	d1f3      	bne.n	8002d48 <__sfputs_r+0xa>
 8002d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002d64 <_vfiprintf_r>:
 8002d64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d68:	460c      	mov	r4, r1
 8002d6a:	b09d      	sub	sp, #116	; 0x74
 8002d6c:	4617      	mov	r7, r2
 8002d6e:	461d      	mov	r5, r3
 8002d70:	4606      	mov	r6, r0
 8002d72:	b118      	cbz	r0, 8002d7c <_vfiprintf_r+0x18>
 8002d74:	6983      	ldr	r3, [r0, #24]
 8002d76:	b90b      	cbnz	r3, 8002d7c <_vfiprintf_r+0x18>
 8002d78:	f7ff fb92 	bl	80024a0 <__sinit>
 8002d7c:	4b7c      	ldr	r3, [pc, #496]	; (8002f70 <_vfiprintf_r+0x20c>)
 8002d7e:	429c      	cmp	r4, r3
 8002d80:	d158      	bne.n	8002e34 <_vfiprintf_r+0xd0>
 8002d82:	6874      	ldr	r4, [r6, #4]
 8002d84:	89a3      	ldrh	r3, [r4, #12]
 8002d86:	0718      	lsls	r0, r3, #28
 8002d88:	d55e      	bpl.n	8002e48 <_vfiprintf_r+0xe4>
 8002d8a:	6923      	ldr	r3, [r4, #16]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d05b      	beq.n	8002e48 <_vfiprintf_r+0xe4>
 8002d90:	2300      	movs	r3, #0
 8002d92:	9309      	str	r3, [sp, #36]	; 0x24
 8002d94:	2320      	movs	r3, #32
 8002d96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d9a:	2330      	movs	r3, #48	; 0x30
 8002d9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002da0:	9503      	str	r5, [sp, #12]
 8002da2:	f04f 0b01 	mov.w	fp, #1
 8002da6:	46b8      	mov	r8, r7
 8002da8:	4645      	mov	r5, r8
 8002daa:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002dae:	b10b      	cbz	r3, 8002db4 <_vfiprintf_r+0x50>
 8002db0:	2b25      	cmp	r3, #37	; 0x25
 8002db2:	d154      	bne.n	8002e5e <_vfiprintf_r+0xfa>
 8002db4:	ebb8 0a07 	subs.w	sl, r8, r7
 8002db8:	d00b      	beq.n	8002dd2 <_vfiprintf_r+0x6e>
 8002dba:	4653      	mov	r3, sl
 8002dbc:	463a      	mov	r2, r7
 8002dbe:	4621      	mov	r1, r4
 8002dc0:	4630      	mov	r0, r6
 8002dc2:	f7ff ffbc 	bl	8002d3e <__sfputs_r>
 8002dc6:	3001      	adds	r0, #1
 8002dc8:	f000 80c2 	beq.w	8002f50 <_vfiprintf_r+0x1ec>
 8002dcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dce:	4453      	add	r3, sl
 8002dd0:	9309      	str	r3, [sp, #36]	; 0x24
 8002dd2:	f898 3000 	ldrb.w	r3, [r8]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	f000 80ba 	beq.w	8002f50 <_vfiprintf_r+0x1ec>
 8002ddc:	2300      	movs	r3, #0
 8002dde:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002de2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002de6:	9304      	str	r3, [sp, #16]
 8002de8:	9307      	str	r3, [sp, #28]
 8002dea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002dee:	931a      	str	r3, [sp, #104]	; 0x68
 8002df0:	46a8      	mov	r8, r5
 8002df2:	2205      	movs	r2, #5
 8002df4:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002df8:	485e      	ldr	r0, [pc, #376]	; (8002f74 <_vfiprintf_r+0x210>)
 8002dfa:	f7fd f9f9 	bl	80001f0 <memchr>
 8002dfe:	9b04      	ldr	r3, [sp, #16]
 8002e00:	bb78      	cbnz	r0, 8002e62 <_vfiprintf_r+0xfe>
 8002e02:	06d9      	lsls	r1, r3, #27
 8002e04:	bf44      	itt	mi
 8002e06:	2220      	movmi	r2, #32
 8002e08:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002e0c:	071a      	lsls	r2, r3, #28
 8002e0e:	bf44      	itt	mi
 8002e10:	222b      	movmi	r2, #43	; 0x2b
 8002e12:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002e16:	782a      	ldrb	r2, [r5, #0]
 8002e18:	2a2a      	cmp	r2, #42	; 0x2a
 8002e1a:	d02a      	beq.n	8002e72 <_vfiprintf_r+0x10e>
 8002e1c:	9a07      	ldr	r2, [sp, #28]
 8002e1e:	46a8      	mov	r8, r5
 8002e20:	2000      	movs	r0, #0
 8002e22:	250a      	movs	r5, #10
 8002e24:	4641      	mov	r1, r8
 8002e26:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e2a:	3b30      	subs	r3, #48	; 0x30
 8002e2c:	2b09      	cmp	r3, #9
 8002e2e:	d969      	bls.n	8002f04 <_vfiprintf_r+0x1a0>
 8002e30:	b360      	cbz	r0, 8002e8c <_vfiprintf_r+0x128>
 8002e32:	e024      	b.n	8002e7e <_vfiprintf_r+0x11a>
 8002e34:	4b50      	ldr	r3, [pc, #320]	; (8002f78 <_vfiprintf_r+0x214>)
 8002e36:	429c      	cmp	r4, r3
 8002e38:	d101      	bne.n	8002e3e <_vfiprintf_r+0xda>
 8002e3a:	68b4      	ldr	r4, [r6, #8]
 8002e3c:	e7a2      	b.n	8002d84 <_vfiprintf_r+0x20>
 8002e3e:	4b4f      	ldr	r3, [pc, #316]	; (8002f7c <_vfiprintf_r+0x218>)
 8002e40:	429c      	cmp	r4, r3
 8002e42:	bf08      	it	eq
 8002e44:	68f4      	ldreq	r4, [r6, #12]
 8002e46:	e79d      	b.n	8002d84 <_vfiprintf_r+0x20>
 8002e48:	4621      	mov	r1, r4
 8002e4a:	4630      	mov	r0, r6
 8002e4c:	f7ff fd6c 	bl	8002928 <__swsetup_r>
 8002e50:	2800      	cmp	r0, #0
 8002e52:	d09d      	beq.n	8002d90 <_vfiprintf_r+0x2c>
 8002e54:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e58:	b01d      	add	sp, #116	; 0x74
 8002e5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e5e:	46a8      	mov	r8, r5
 8002e60:	e7a2      	b.n	8002da8 <_vfiprintf_r+0x44>
 8002e62:	4a44      	ldr	r2, [pc, #272]	; (8002f74 <_vfiprintf_r+0x210>)
 8002e64:	1a80      	subs	r0, r0, r2
 8002e66:	fa0b f000 	lsl.w	r0, fp, r0
 8002e6a:	4318      	orrs	r0, r3
 8002e6c:	9004      	str	r0, [sp, #16]
 8002e6e:	4645      	mov	r5, r8
 8002e70:	e7be      	b.n	8002df0 <_vfiprintf_r+0x8c>
 8002e72:	9a03      	ldr	r2, [sp, #12]
 8002e74:	1d11      	adds	r1, r2, #4
 8002e76:	6812      	ldr	r2, [r2, #0]
 8002e78:	9103      	str	r1, [sp, #12]
 8002e7a:	2a00      	cmp	r2, #0
 8002e7c:	db01      	blt.n	8002e82 <_vfiprintf_r+0x11e>
 8002e7e:	9207      	str	r2, [sp, #28]
 8002e80:	e004      	b.n	8002e8c <_vfiprintf_r+0x128>
 8002e82:	4252      	negs	r2, r2
 8002e84:	f043 0302 	orr.w	r3, r3, #2
 8002e88:	9207      	str	r2, [sp, #28]
 8002e8a:	9304      	str	r3, [sp, #16]
 8002e8c:	f898 3000 	ldrb.w	r3, [r8]
 8002e90:	2b2e      	cmp	r3, #46	; 0x2e
 8002e92:	d10e      	bne.n	8002eb2 <_vfiprintf_r+0x14e>
 8002e94:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002e98:	2b2a      	cmp	r3, #42	; 0x2a
 8002e9a:	d138      	bne.n	8002f0e <_vfiprintf_r+0x1aa>
 8002e9c:	9b03      	ldr	r3, [sp, #12]
 8002e9e:	1d1a      	adds	r2, r3, #4
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	9203      	str	r2, [sp, #12]
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	bfb8      	it	lt
 8002ea8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8002eac:	f108 0802 	add.w	r8, r8, #2
 8002eb0:	9305      	str	r3, [sp, #20]
 8002eb2:	4d33      	ldr	r5, [pc, #204]	; (8002f80 <_vfiprintf_r+0x21c>)
 8002eb4:	f898 1000 	ldrb.w	r1, [r8]
 8002eb8:	2203      	movs	r2, #3
 8002eba:	4628      	mov	r0, r5
 8002ebc:	f7fd f998 	bl	80001f0 <memchr>
 8002ec0:	b140      	cbz	r0, 8002ed4 <_vfiprintf_r+0x170>
 8002ec2:	2340      	movs	r3, #64	; 0x40
 8002ec4:	1b40      	subs	r0, r0, r5
 8002ec6:	fa03 f000 	lsl.w	r0, r3, r0
 8002eca:	9b04      	ldr	r3, [sp, #16]
 8002ecc:	4303      	orrs	r3, r0
 8002ece:	f108 0801 	add.w	r8, r8, #1
 8002ed2:	9304      	str	r3, [sp, #16]
 8002ed4:	f898 1000 	ldrb.w	r1, [r8]
 8002ed8:	482a      	ldr	r0, [pc, #168]	; (8002f84 <_vfiprintf_r+0x220>)
 8002eda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002ede:	2206      	movs	r2, #6
 8002ee0:	f108 0701 	add.w	r7, r8, #1
 8002ee4:	f7fd f984 	bl	80001f0 <memchr>
 8002ee8:	2800      	cmp	r0, #0
 8002eea:	d037      	beq.n	8002f5c <_vfiprintf_r+0x1f8>
 8002eec:	4b26      	ldr	r3, [pc, #152]	; (8002f88 <_vfiprintf_r+0x224>)
 8002eee:	bb1b      	cbnz	r3, 8002f38 <_vfiprintf_r+0x1d4>
 8002ef0:	9b03      	ldr	r3, [sp, #12]
 8002ef2:	3307      	adds	r3, #7
 8002ef4:	f023 0307 	bic.w	r3, r3, #7
 8002ef8:	3308      	adds	r3, #8
 8002efa:	9303      	str	r3, [sp, #12]
 8002efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002efe:	444b      	add	r3, r9
 8002f00:	9309      	str	r3, [sp, #36]	; 0x24
 8002f02:	e750      	b.n	8002da6 <_vfiprintf_r+0x42>
 8002f04:	fb05 3202 	mla	r2, r5, r2, r3
 8002f08:	2001      	movs	r0, #1
 8002f0a:	4688      	mov	r8, r1
 8002f0c:	e78a      	b.n	8002e24 <_vfiprintf_r+0xc0>
 8002f0e:	2300      	movs	r3, #0
 8002f10:	f108 0801 	add.w	r8, r8, #1
 8002f14:	9305      	str	r3, [sp, #20]
 8002f16:	4619      	mov	r1, r3
 8002f18:	250a      	movs	r5, #10
 8002f1a:	4640      	mov	r0, r8
 8002f1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f20:	3a30      	subs	r2, #48	; 0x30
 8002f22:	2a09      	cmp	r2, #9
 8002f24:	d903      	bls.n	8002f2e <_vfiprintf_r+0x1ca>
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d0c3      	beq.n	8002eb2 <_vfiprintf_r+0x14e>
 8002f2a:	9105      	str	r1, [sp, #20]
 8002f2c:	e7c1      	b.n	8002eb2 <_vfiprintf_r+0x14e>
 8002f2e:	fb05 2101 	mla	r1, r5, r1, r2
 8002f32:	2301      	movs	r3, #1
 8002f34:	4680      	mov	r8, r0
 8002f36:	e7f0      	b.n	8002f1a <_vfiprintf_r+0x1b6>
 8002f38:	ab03      	add	r3, sp, #12
 8002f3a:	9300      	str	r3, [sp, #0]
 8002f3c:	4622      	mov	r2, r4
 8002f3e:	4b13      	ldr	r3, [pc, #76]	; (8002f8c <_vfiprintf_r+0x228>)
 8002f40:	a904      	add	r1, sp, #16
 8002f42:	4630      	mov	r0, r6
 8002f44:	f3af 8000 	nop.w
 8002f48:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 8002f4c:	4681      	mov	r9, r0
 8002f4e:	d1d5      	bne.n	8002efc <_vfiprintf_r+0x198>
 8002f50:	89a3      	ldrh	r3, [r4, #12]
 8002f52:	065b      	lsls	r3, r3, #25
 8002f54:	f53f af7e 	bmi.w	8002e54 <_vfiprintf_r+0xf0>
 8002f58:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f5a:	e77d      	b.n	8002e58 <_vfiprintf_r+0xf4>
 8002f5c:	ab03      	add	r3, sp, #12
 8002f5e:	9300      	str	r3, [sp, #0]
 8002f60:	4622      	mov	r2, r4
 8002f62:	4b0a      	ldr	r3, [pc, #40]	; (8002f8c <_vfiprintf_r+0x228>)
 8002f64:	a904      	add	r1, sp, #16
 8002f66:	4630      	mov	r0, r6
 8002f68:	f000 f888 	bl	800307c <_printf_i>
 8002f6c:	e7ec      	b.n	8002f48 <_vfiprintf_r+0x1e4>
 8002f6e:	bf00      	nop
 8002f70:	080033cc 	.word	0x080033cc
 8002f74:	08003410 	.word	0x08003410
 8002f78:	080033ec 	.word	0x080033ec
 8002f7c:	080033ac 	.word	0x080033ac
 8002f80:	08003416 	.word	0x08003416
 8002f84:	0800341a 	.word	0x0800341a
 8002f88:	00000000 	.word	0x00000000
 8002f8c:	08002d3f 	.word	0x08002d3f

08002f90 <_printf_common>:
 8002f90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f94:	4691      	mov	r9, r2
 8002f96:	461f      	mov	r7, r3
 8002f98:	688a      	ldr	r2, [r1, #8]
 8002f9a:	690b      	ldr	r3, [r1, #16]
 8002f9c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	bfb8      	it	lt
 8002fa4:	4613      	movlt	r3, r2
 8002fa6:	f8c9 3000 	str.w	r3, [r9]
 8002faa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002fae:	4606      	mov	r6, r0
 8002fb0:	460c      	mov	r4, r1
 8002fb2:	b112      	cbz	r2, 8002fba <_printf_common+0x2a>
 8002fb4:	3301      	adds	r3, #1
 8002fb6:	f8c9 3000 	str.w	r3, [r9]
 8002fba:	6823      	ldr	r3, [r4, #0]
 8002fbc:	0699      	lsls	r1, r3, #26
 8002fbe:	bf42      	ittt	mi
 8002fc0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002fc4:	3302      	addmi	r3, #2
 8002fc6:	f8c9 3000 	strmi.w	r3, [r9]
 8002fca:	6825      	ldr	r5, [r4, #0]
 8002fcc:	f015 0506 	ands.w	r5, r5, #6
 8002fd0:	d107      	bne.n	8002fe2 <_printf_common+0x52>
 8002fd2:	f104 0a19 	add.w	sl, r4, #25
 8002fd6:	68e3      	ldr	r3, [r4, #12]
 8002fd8:	f8d9 2000 	ldr.w	r2, [r9]
 8002fdc:	1a9b      	subs	r3, r3, r2
 8002fde:	42ab      	cmp	r3, r5
 8002fe0:	dc28      	bgt.n	8003034 <_printf_common+0xa4>
 8002fe2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002fe6:	6822      	ldr	r2, [r4, #0]
 8002fe8:	3300      	adds	r3, #0
 8002fea:	bf18      	it	ne
 8002fec:	2301      	movne	r3, #1
 8002fee:	0692      	lsls	r2, r2, #26
 8002ff0:	d42d      	bmi.n	800304e <_printf_common+0xbe>
 8002ff2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ff6:	4639      	mov	r1, r7
 8002ff8:	4630      	mov	r0, r6
 8002ffa:	47c0      	blx	r8
 8002ffc:	3001      	adds	r0, #1
 8002ffe:	d020      	beq.n	8003042 <_printf_common+0xb2>
 8003000:	6823      	ldr	r3, [r4, #0]
 8003002:	68e5      	ldr	r5, [r4, #12]
 8003004:	f8d9 2000 	ldr.w	r2, [r9]
 8003008:	f003 0306 	and.w	r3, r3, #6
 800300c:	2b04      	cmp	r3, #4
 800300e:	bf08      	it	eq
 8003010:	1aad      	subeq	r5, r5, r2
 8003012:	68a3      	ldr	r3, [r4, #8]
 8003014:	6922      	ldr	r2, [r4, #16]
 8003016:	bf0c      	ite	eq
 8003018:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800301c:	2500      	movne	r5, #0
 800301e:	4293      	cmp	r3, r2
 8003020:	bfc4      	itt	gt
 8003022:	1a9b      	subgt	r3, r3, r2
 8003024:	18ed      	addgt	r5, r5, r3
 8003026:	f04f 0900 	mov.w	r9, #0
 800302a:	341a      	adds	r4, #26
 800302c:	454d      	cmp	r5, r9
 800302e:	d11a      	bne.n	8003066 <_printf_common+0xd6>
 8003030:	2000      	movs	r0, #0
 8003032:	e008      	b.n	8003046 <_printf_common+0xb6>
 8003034:	2301      	movs	r3, #1
 8003036:	4652      	mov	r2, sl
 8003038:	4639      	mov	r1, r7
 800303a:	4630      	mov	r0, r6
 800303c:	47c0      	blx	r8
 800303e:	3001      	adds	r0, #1
 8003040:	d103      	bne.n	800304a <_printf_common+0xba>
 8003042:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003046:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800304a:	3501      	adds	r5, #1
 800304c:	e7c3      	b.n	8002fd6 <_printf_common+0x46>
 800304e:	18e1      	adds	r1, r4, r3
 8003050:	1c5a      	adds	r2, r3, #1
 8003052:	2030      	movs	r0, #48	; 0x30
 8003054:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003058:	4422      	add	r2, r4
 800305a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800305e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003062:	3302      	adds	r3, #2
 8003064:	e7c5      	b.n	8002ff2 <_printf_common+0x62>
 8003066:	2301      	movs	r3, #1
 8003068:	4622      	mov	r2, r4
 800306a:	4639      	mov	r1, r7
 800306c:	4630      	mov	r0, r6
 800306e:	47c0      	blx	r8
 8003070:	3001      	adds	r0, #1
 8003072:	d0e6      	beq.n	8003042 <_printf_common+0xb2>
 8003074:	f109 0901 	add.w	r9, r9, #1
 8003078:	e7d8      	b.n	800302c <_printf_common+0x9c>
	...

0800307c <_printf_i>:
 800307c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003080:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003084:	460c      	mov	r4, r1
 8003086:	7e09      	ldrb	r1, [r1, #24]
 8003088:	b085      	sub	sp, #20
 800308a:	296e      	cmp	r1, #110	; 0x6e
 800308c:	4617      	mov	r7, r2
 800308e:	4606      	mov	r6, r0
 8003090:	4698      	mov	r8, r3
 8003092:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003094:	f000 80b3 	beq.w	80031fe <_printf_i+0x182>
 8003098:	d822      	bhi.n	80030e0 <_printf_i+0x64>
 800309a:	2963      	cmp	r1, #99	; 0x63
 800309c:	d036      	beq.n	800310c <_printf_i+0x90>
 800309e:	d80a      	bhi.n	80030b6 <_printf_i+0x3a>
 80030a0:	2900      	cmp	r1, #0
 80030a2:	f000 80b9 	beq.w	8003218 <_printf_i+0x19c>
 80030a6:	2958      	cmp	r1, #88	; 0x58
 80030a8:	f000 8083 	beq.w	80031b2 <_printf_i+0x136>
 80030ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80030b4:	e032      	b.n	800311c <_printf_i+0xa0>
 80030b6:	2964      	cmp	r1, #100	; 0x64
 80030b8:	d001      	beq.n	80030be <_printf_i+0x42>
 80030ba:	2969      	cmp	r1, #105	; 0x69
 80030bc:	d1f6      	bne.n	80030ac <_printf_i+0x30>
 80030be:	6820      	ldr	r0, [r4, #0]
 80030c0:	6813      	ldr	r3, [r2, #0]
 80030c2:	0605      	lsls	r5, r0, #24
 80030c4:	f103 0104 	add.w	r1, r3, #4
 80030c8:	d52a      	bpl.n	8003120 <_printf_i+0xa4>
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	6011      	str	r1, [r2, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	da03      	bge.n	80030da <_printf_i+0x5e>
 80030d2:	222d      	movs	r2, #45	; 0x2d
 80030d4:	425b      	negs	r3, r3
 80030d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80030da:	486f      	ldr	r0, [pc, #444]	; (8003298 <_printf_i+0x21c>)
 80030dc:	220a      	movs	r2, #10
 80030de:	e039      	b.n	8003154 <_printf_i+0xd8>
 80030e0:	2973      	cmp	r1, #115	; 0x73
 80030e2:	f000 809d 	beq.w	8003220 <_printf_i+0x1a4>
 80030e6:	d808      	bhi.n	80030fa <_printf_i+0x7e>
 80030e8:	296f      	cmp	r1, #111	; 0x6f
 80030ea:	d020      	beq.n	800312e <_printf_i+0xb2>
 80030ec:	2970      	cmp	r1, #112	; 0x70
 80030ee:	d1dd      	bne.n	80030ac <_printf_i+0x30>
 80030f0:	6823      	ldr	r3, [r4, #0]
 80030f2:	f043 0320 	orr.w	r3, r3, #32
 80030f6:	6023      	str	r3, [r4, #0]
 80030f8:	e003      	b.n	8003102 <_printf_i+0x86>
 80030fa:	2975      	cmp	r1, #117	; 0x75
 80030fc:	d017      	beq.n	800312e <_printf_i+0xb2>
 80030fe:	2978      	cmp	r1, #120	; 0x78
 8003100:	d1d4      	bne.n	80030ac <_printf_i+0x30>
 8003102:	2378      	movs	r3, #120	; 0x78
 8003104:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003108:	4864      	ldr	r0, [pc, #400]	; (800329c <_printf_i+0x220>)
 800310a:	e055      	b.n	80031b8 <_printf_i+0x13c>
 800310c:	6813      	ldr	r3, [r2, #0]
 800310e:	1d19      	adds	r1, r3, #4
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	6011      	str	r1, [r2, #0]
 8003114:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003118:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800311c:	2301      	movs	r3, #1
 800311e:	e08c      	b.n	800323a <_printf_i+0x1be>
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6011      	str	r1, [r2, #0]
 8003124:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003128:	bf18      	it	ne
 800312a:	b21b      	sxthne	r3, r3
 800312c:	e7cf      	b.n	80030ce <_printf_i+0x52>
 800312e:	6813      	ldr	r3, [r2, #0]
 8003130:	6825      	ldr	r5, [r4, #0]
 8003132:	1d18      	adds	r0, r3, #4
 8003134:	6010      	str	r0, [r2, #0]
 8003136:	0628      	lsls	r0, r5, #24
 8003138:	d501      	bpl.n	800313e <_printf_i+0xc2>
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	e002      	b.n	8003144 <_printf_i+0xc8>
 800313e:	0668      	lsls	r0, r5, #25
 8003140:	d5fb      	bpl.n	800313a <_printf_i+0xbe>
 8003142:	881b      	ldrh	r3, [r3, #0]
 8003144:	4854      	ldr	r0, [pc, #336]	; (8003298 <_printf_i+0x21c>)
 8003146:	296f      	cmp	r1, #111	; 0x6f
 8003148:	bf14      	ite	ne
 800314a:	220a      	movne	r2, #10
 800314c:	2208      	moveq	r2, #8
 800314e:	2100      	movs	r1, #0
 8003150:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003154:	6865      	ldr	r5, [r4, #4]
 8003156:	60a5      	str	r5, [r4, #8]
 8003158:	2d00      	cmp	r5, #0
 800315a:	f2c0 8095 	blt.w	8003288 <_printf_i+0x20c>
 800315e:	6821      	ldr	r1, [r4, #0]
 8003160:	f021 0104 	bic.w	r1, r1, #4
 8003164:	6021      	str	r1, [r4, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d13d      	bne.n	80031e6 <_printf_i+0x16a>
 800316a:	2d00      	cmp	r5, #0
 800316c:	f040 808e 	bne.w	800328c <_printf_i+0x210>
 8003170:	4665      	mov	r5, ip
 8003172:	2a08      	cmp	r2, #8
 8003174:	d10b      	bne.n	800318e <_printf_i+0x112>
 8003176:	6823      	ldr	r3, [r4, #0]
 8003178:	07db      	lsls	r3, r3, #31
 800317a:	d508      	bpl.n	800318e <_printf_i+0x112>
 800317c:	6923      	ldr	r3, [r4, #16]
 800317e:	6862      	ldr	r2, [r4, #4]
 8003180:	429a      	cmp	r2, r3
 8003182:	bfde      	ittt	le
 8003184:	2330      	movle	r3, #48	; 0x30
 8003186:	f805 3c01 	strble.w	r3, [r5, #-1]
 800318a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800318e:	ebac 0305 	sub.w	r3, ip, r5
 8003192:	6123      	str	r3, [r4, #16]
 8003194:	f8cd 8000 	str.w	r8, [sp]
 8003198:	463b      	mov	r3, r7
 800319a:	aa03      	add	r2, sp, #12
 800319c:	4621      	mov	r1, r4
 800319e:	4630      	mov	r0, r6
 80031a0:	f7ff fef6 	bl	8002f90 <_printf_common>
 80031a4:	3001      	adds	r0, #1
 80031a6:	d14d      	bne.n	8003244 <_printf_i+0x1c8>
 80031a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031ac:	b005      	add	sp, #20
 80031ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80031b2:	4839      	ldr	r0, [pc, #228]	; (8003298 <_printf_i+0x21c>)
 80031b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80031b8:	6813      	ldr	r3, [r2, #0]
 80031ba:	6821      	ldr	r1, [r4, #0]
 80031bc:	1d1d      	adds	r5, r3, #4
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	6015      	str	r5, [r2, #0]
 80031c2:	060a      	lsls	r2, r1, #24
 80031c4:	d50b      	bpl.n	80031de <_printf_i+0x162>
 80031c6:	07ca      	lsls	r2, r1, #31
 80031c8:	bf44      	itt	mi
 80031ca:	f041 0120 	orrmi.w	r1, r1, #32
 80031ce:	6021      	strmi	r1, [r4, #0]
 80031d0:	b91b      	cbnz	r3, 80031da <_printf_i+0x15e>
 80031d2:	6822      	ldr	r2, [r4, #0]
 80031d4:	f022 0220 	bic.w	r2, r2, #32
 80031d8:	6022      	str	r2, [r4, #0]
 80031da:	2210      	movs	r2, #16
 80031dc:	e7b7      	b.n	800314e <_printf_i+0xd2>
 80031de:	064d      	lsls	r5, r1, #25
 80031e0:	bf48      	it	mi
 80031e2:	b29b      	uxthmi	r3, r3
 80031e4:	e7ef      	b.n	80031c6 <_printf_i+0x14a>
 80031e6:	4665      	mov	r5, ip
 80031e8:	fbb3 f1f2 	udiv	r1, r3, r2
 80031ec:	fb02 3311 	mls	r3, r2, r1, r3
 80031f0:	5cc3      	ldrb	r3, [r0, r3]
 80031f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80031f6:	460b      	mov	r3, r1
 80031f8:	2900      	cmp	r1, #0
 80031fa:	d1f5      	bne.n	80031e8 <_printf_i+0x16c>
 80031fc:	e7b9      	b.n	8003172 <_printf_i+0xf6>
 80031fe:	6813      	ldr	r3, [r2, #0]
 8003200:	6825      	ldr	r5, [r4, #0]
 8003202:	6961      	ldr	r1, [r4, #20]
 8003204:	1d18      	adds	r0, r3, #4
 8003206:	6010      	str	r0, [r2, #0]
 8003208:	0628      	lsls	r0, r5, #24
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	d501      	bpl.n	8003212 <_printf_i+0x196>
 800320e:	6019      	str	r1, [r3, #0]
 8003210:	e002      	b.n	8003218 <_printf_i+0x19c>
 8003212:	066a      	lsls	r2, r5, #25
 8003214:	d5fb      	bpl.n	800320e <_printf_i+0x192>
 8003216:	8019      	strh	r1, [r3, #0]
 8003218:	2300      	movs	r3, #0
 800321a:	6123      	str	r3, [r4, #16]
 800321c:	4665      	mov	r5, ip
 800321e:	e7b9      	b.n	8003194 <_printf_i+0x118>
 8003220:	6813      	ldr	r3, [r2, #0]
 8003222:	1d19      	adds	r1, r3, #4
 8003224:	6011      	str	r1, [r2, #0]
 8003226:	681d      	ldr	r5, [r3, #0]
 8003228:	6862      	ldr	r2, [r4, #4]
 800322a:	2100      	movs	r1, #0
 800322c:	4628      	mov	r0, r5
 800322e:	f7fc ffdf 	bl	80001f0 <memchr>
 8003232:	b108      	cbz	r0, 8003238 <_printf_i+0x1bc>
 8003234:	1b40      	subs	r0, r0, r5
 8003236:	6060      	str	r0, [r4, #4]
 8003238:	6863      	ldr	r3, [r4, #4]
 800323a:	6123      	str	r3, [r4, #16]
 800323c:	2300      	movs	r3, #0
 800323e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003242:	e7a7      	b.n	8003194 <_printf_i+0x118>
 8003244:	6923      	ldr	r3, [r4, #16]
 8003246:	462a      	mov	r2, r5
 8003248:	4639      	mov	r1, r7
 800324a:	4630      	mov	r0, r6
 800324c:	47c0      	blx	r8
 800324e:	3001      	adds	r0, #1
 8003250:	d0aa      	beq.n	80031a8 <_printf_i+0x12c>
 8003252:	6823      	ldr	r3, [r4, #0]
 8003254:	079b      	lsls	r3, r3, #30
 8003256:	d413      	bmi.n	8003280 <_printf_i+0x204>
 8003258:	68e0      	ldr	r0, [r4, #12]
 800325a:	9b03      	ldr	r3, [sp, #12]
 800325c:	4298      	cmp	r0, r3
 800325e:	bfb8      	it	lt
 8003260:	4618      	movlt	r0, r3
 8003262:	e7a3      	b.n	80031ac <_printf_i+0x130>
 8003264:	2301      	movs	r3, #1
 8003266:	464a      	mov	r2, r9
 8003268:	4639      	mov	r1, r7
 800326a:	4630      	mov	r0, r6
 800326c:	47c0      	blx	r8
 800326e:	3001      	adds	r0, #1
 8003270:	d09a      	beq.n	80031a8 <_printf_i+0x12c>
 8003272:	3501      	adds	r5, #1
 8003274:	68e3      	ldr	r3, [r4, #12]
 8003276:	9a03      	ldr	r2, [sp, #12]
 8003278:	1a9b      	subs	r3, r3, r2
 800327a:	42ab      	cmp	r3, r5
 800327c:	dcf2      	bgt.n	8003264 <_printf_i+0x1e8>
 800327e:	e7eb      	b.n	8003258 <_printf_i+0x1dc>
 8003280:	2500      	movs	r5, #0
 8003282:	f104 0919 	add.w	r9, r4, #25
 8003286:	e7f5      	b.n	8003274 <_printf_i+0x1f8>
 8003288:	2b00      	cmp	r3, #0
 800328a:	d1ac      	bne.n	80031e6 <_printf_i+0x16a>
 800328c:	7803      	ldrb	r3, [r0, #0]
 800328e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003292:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003296:	e76c      	b.n	8003172 <_printf_i+0xf6>
 8003298:	08003421 	.word	0x08003421
 800329c:	08003432 	.word	0x08003432

080032a0 <_read_r>:
 80032a0:	b538      	push	{r3, r4, r5, lr}
 80032a2:	4c07      	ldr	r4, [pc, #28]	; (80032c0 <_read_r+0x20>)
 80032a4:	4605      	mov	r5, r0
 80032a6:	4608      	mov	r0, r1
 80032a8:	4611      	mov	r1, r2
 80032aa:	2200      	movs	r2, #0
 80032ac:	6022      	str	r2, [r4, #0]
 80032ae:	461a      	mov	r2, r3
 80032b0:	f7fe fe50 	bl	8001f54 <_read>
 80032b4:	1c43      	adds	r3, r0, #1
 80032b6:	d102      	bne.n	80032be <_read_r+0x1e>
 80032b8:	6823      	ldr	r3, [r4, #0]
 80032ba:	b103      	cbz	r3, 80032be <_read_r+0x1e>
 80032bc:	602b      	str	r3, [r5, #0]
 80032be:	bd38      	pop	{r3, r4, r5, pc}
 80032c0:	20000150 	.word	0x20000150

080032c4 <_fstat_r>:
 80032c4:	b538      	push	{r3, r4, r5, lr}
 80032c6:	4c07      	ldr	r4, [pc, #28]	; (80032e4 <_fstat_r+0x20>)
 80032c8:	2300      	movs	r3, #0
 80032ca:	4605      	mov	r5, r0
 80032cc:	4608      	mov	r0, r1
 80032ce:	4611      	mov	r1, r2
 80032d0:	6023      	str	r3, [r4, #0]
 80032d2:	f7fe ff1e 	bl	8002112 <_fstat>
 80032d6:	1c43      	adds	r3, r0, #1
 80032d8:	d102      	bne.n	80032e0 <_fstat_r+0x1c>
 80032da:	6823      	ldr	r3, [r4, #0]
 80032dc:	b103      	cbz	r3, 80032e0 <_fstat_r+0x1c>
 80032de:	602b      	str	r3, [r5, #0]
 80032e0:	bd38      	pop	{r3, r4, r5, pc}
 80032e2:	bf00      	nop
 80032e4:	20000150 	.word	0x20000150

080032e8 <_isatty_r>:
 80032e8:	b538      	push	{r3, r4, r5, lr}
 80032ea:	4c06      	ldr	r4, [pc, #24]	; (8003304 <_isatty_r+0x1c>)
 80032ec:	2300      	movs	r3, #0
 80032ee:	4605      	mov	r5, r0
 80032f0:	4608      	mov	r0, r1
 80032f2:	6023      	str	r3, [r4, #0]
 80032f4:	f7ff f872 	bl	80023dc <_isatty>
 80032f8:	1c43      	adds	r3, r0, #1
 80032fa:	d102      	bne.n	8003302 <_isatty_r+0x1a>
 80032fc:	6823      	ldr	r3, [r4, #0]
 80032fe:	b103      	cbz	r3, 8003302 <_isatty_r+0x1a>
 8003300:	602b      	str	r3, [r5, #0]
 8003302:	bd38      	pop	{r3, r4, r5, pc}
 8003304:	20000150 	.word	0x20000150

08003308 <_init>:
 8003308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800330a:	bf00      	nop
 800330c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800330e:	bc08      	pop	{r3}
 8003310:	469e      	mov	lr, r3
 8003312:	4770      	bx	lr

08003314 <_fini>:
 8003314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003316:	bf00      	nop
 8003318:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800331a:	bc08      	pop	{r3}
 800331c:	469e      	mov	lr, r3
 800331e:	4770      	bx	lr
