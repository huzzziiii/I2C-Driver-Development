
hal_i2c_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001b04  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08001c98  08001c98  00011c98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001ca8  08001ca8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08001ca8  08001ca8  00011ca8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08001cb0  08001cb0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001cb0  08001cb0  00011cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001cb4  08001cb4  00011cb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08001cb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  2000000c  08001cc4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000002c  08001cc4  0002002c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004234  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00000fb5  00000000  00000000  00024270  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000480  00000000  00000000  00025228  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000003e8  00000000  00000000  000256a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000140f7  00000000  00000000  00025a90  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000488c  00000000  00000000  00039b87  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007d38d  00000000  00000000  0003e413  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000bb7a0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001070  00000000  00000000  000bb81c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08001c80 	.word	0x08001c80

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08001c80 	.word	0x08001c80

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e8:	f000 b972 	b.w	80004d0 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9e08      	ldr	r6, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	4688      	mov	r8, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14b      	bne.n	80002aa <__udivmoddi4+0xa6>
 8000212:	428a      	cmp	r2, r1
 8000214:	4615      	mov	r5, r2
 8000216:	d967      	bls.n	80002e8 <__udivmoddi4+0xe4>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b14a      	cbz	r2, 8000232 <__udivmoddi4+0x2e>
 800021e:	f1c2 0720 	rsb	r7, r2, #32
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	fa20 f707 	lsr.w	r7, r0, r7
 800022a:	4095      	lsls	r5, r2
 800022c:	ea47 0803 	orr.w	r8, r7, r3
 8000230:	4094      	lsls	r4, r2
 8000232:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000236:	0c23      	lsrs	r3, r4, #16
 8000238:	fbb8 f7fe 	udiv	r7, r8, lr
 800023c:	fa1f fc85 	uxth.w	ip, r5
 8000240:	fb0e 8817 	mls	r8, lr, r7, r8
 8000244:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000248:	fb07 f10c 	mul.w	r1, r7, ip
 800024c:	4299      	cmp	r1, r3
 800024e:	d909      	bls.n	8000264 <__udivmoddi4+0x60>
 8000250:	18eb      	adds	r3, r5, r3
 8000252:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000256:	f080 811b 	bcs.w	8000490 <__udivmoddi4+0x28c>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 8118 	bls.w	8000490 <__udivmoddi4+0x28c>
 8000260:	3f02      	subs	r7, #2
 8000262:	442b      	add	r3, r5
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0fe 	udiv	r0, r3, lr
 800026c:	fb0e 3310 	mls	r3, lr, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 fc0c 	mul.w	ip, r0, ip
 8000278:	45a4      	cmp	ip, r4
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x8c>
 800027c:	192c      	adds	r4, r5, r4
 800027e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000282:	f080 8107 	bcs.w	8000494 <__udivmoddi4+0x290>
 8000286:	45a4      	cmp	ip, r4
 8000288:	f240 8104 	bls.w	8000494 <__udivmoddi4+0x290>
 800028c:	3802      	subs	r0, #2
 800028e:	442c      	add	r4, r5
 8000290:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000294:	eba4 040c 	sub.w	r4, r4, ip
 8000298:	2700      	movs	r7, #0
 800029a:	b11e      	cbz	r6, 80002a4 <__udivmoddi4+0xa0>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c6 4300 	strd	r4, r3, [r6]
 80002a4:	4639      	mov	r1, r7
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xbe>
 80002ae:	2e00      	cmp	r6, #0
 80002b0:	f000 80eb 	beq.w	800048a <__udivmoddi4+0x286>
 80002b4:	2700      	movs	r7, #0
 80002b6:	e9c6 0100 	strd	r0, r1, [r6]
 80002ba:	4638      	mov	r0, r7
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f783 	clz	r7, r3
 80002c6:	2f00      	cmp	r7, #0
 80002c8:	d147      	bne.n	800035a <__udivmoddi4+0x156>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd0>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80fa 	bhi.w	80004c8 <__udivmoddi4+0x2c4>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	4698      	mov	r8, r3
 80002de:	2e00      	cmp	r6, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa0>
 80002e2:	e9c6 4800 	strd	r4, r8, [r6]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa0>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xe8>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 808f 	bne.w	8000414 <__udivmoddi4+0x210>
 80002f6:	1b49      	subs	r1, r1, r5
 80002f8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002fc:	fa1f f885 	uxth.w	r8, r5
 8000300:	2701      	movs	r7, #1
 8000302:	fbb1 fcfe 	udiv	ip, r1, lr
 8000306:	0c23      	lsrs	r3, r4, #16
 8000308:	fb0e 111c 	mls	r1, lr, ip, r1
 800030c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000310:	fb08 f10c 	mul.w	r1, r8, ip
 8000314:	4299      	cmp	r1, r3
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x124>
 8000318:	18eb      	adds	r3, r5, r3
 800031a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x122>
 8000320:	4299      	cmp	r1, r3
 8000322:	f200 80cd 	bhi.w	80004c0 <__udivmoddi4+0x2bc>
 8000326:	4684      	mov	ip, r0
 8000328:	1a59      	subs	r1, r3, r1
 800032a:	b2a3      	uxth	r3, r4
 800032c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000330:	fb0e 1410 	mls	r4, lr, r0, r1
 8000334:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000338:	fb08 f800 	mul.w	r8, r8, r0
 800033c:	45a0      	cmp	r8, r4
 800033e:	d907      	bls.n	8000350 <__udivmoddi4+0x14c>
 8000340:	192c      	adds	r4, r5, r4
 8000342:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x14a>
 8000348:	45a0      	cmp	r8, r4
 800034a:	f200 80b6 	bhi.w	80004ba <__udivmoddi4+0x2b6>
 800034e:	4618      	mov	r0, r3
 8000350:	eba4 0408 	sub.w	r4, r4, r8
 8000354:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000358:	e79f      	b.n	800029a <__udivmoddi4+0x96>
 800035a:	f1c7 0c20 	rsb	ip, r7, #32
 800035e:	40bb      	lsls	r3, r7
 8000360:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000364:	ea4e 0e03 	orr.w	lr, lr, r3
 8000368:	fa01 f407 	lsl.w	r4, r1, r7
 800036c:	fa20 f50c 	lsr.w	r5, r0, ip
 8000370:	fa21 f30c 	lsr.w	r3, r1, ip
 8000374:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000378:	4325      	orrs	r5, r4
 800037a:	fbb3 f9f8 	udiv	r9, r3, r8
 800037e:	0c2c      	lsrs	r4, r5, #16
 8000380:	fb08 3319 	mls	r3, r8, r9, r3
 8000384:	fa1f fa8e 	uxth.w	sl, lr
 8000388:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 800038c:	fb09 f40a 	mul.w	r4, r9, sl
 8000390:	429c      	cmp	r4, r3
 8000392:	fa02 f207 	lsl.w	r2, r2, r7
 8000396:	fa00 f107 	lsl.w	r1, r0, r7
 800039a:	d90b      	bls.n	80003b4 <__udivmoddi4+0x1b0>
 800039c:	eb1e 0303 	adds.w	r3, lr, r3
 80003a0:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80003a4:	f080 8087 	bcs.w	80004b6 <__udivmoddi4+0x2b2>
 80003a8:	429c      	cmp	r4, r3
 80003aa:	f240 8084 	bls.w	80004b6 <__udivmoddi4+0x2b2>
 80003ae:	f1a9 0902 	sub.w	r9, r9, #2
 80003b2:	4473      	add	r3, lr
 80003b4:	1b1b      	subs	r3, r3, r4
 80003b6:	b2ad      	uxth	r5, r5
 80003b8:	fbb3 f0f8 	udiv	r0, r3, r8
 80003bc:	fb08 3310 	mls	r3, r8, r0, r3
 80003c0:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c4:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c8:	45a2      	cmp	sl, r4
 80003ca:	d908      	bls.n	80003de <__udivmoddi4+0x1da>
 80003cc:	eb1e 0404 	adds.w	r4, lr, r4
 80003d0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80003d4:	d26b      	bcs.n	80004ae <__udivmoddi4+0x2aa>
 80003d6:	45a2      	cmp	sl, r4
 80003d8:	d969      	bls.n	80004ae <__udivmoddi4+0x2aa>
 80003da:	3802      	subs	r0, #2
 80003dc:	4474      	add	r4, lr
 80003de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003e2:	fba0 8902 	umull	r8, r9, r0, r2
 80003e6:	eba4 040a 	sub.w	r4, r4, sl
 80003ea:	454c      	cmp	r4, r9
 80003ec:	46c2      	mov	sl, r8
 80003ee:	464b      	mov	r3, r9
 80003f0:	d354      	bcc.n	800049c <__udivmoddi4+0x298>
 80003f2:	d051      	beq.n	8000498 <__udivmoddi4+0x294>
 80003f4:	2e00      	cmp	r6, #0
 80003f6:	d069      	beq.n	80004cc <__udivmoddi4+0x2c8>
 80003f8:	ebb1 050a 	subs.w	r5, r1, sl
 80003fc:	eb64 0403 	sbc.w	r4, r4, r3
 8000400:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000404:	40fd      	lsrs	r5, r7
 8000406:	40fc      	lsrs	r4, r7
 8000408:	ea4c 0505 	orr.w	r5, ip, r5
 800040c:	e9c6 5400 	strd	r5, r4, [r6]
 8000410:	2700      	movs	r7, #0
 8000412:	e747      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000414:	f1c2 0320 	rsb	r3, r2, #32
 8000418:	fa20 f703 	lsr.w	r7, r0, r3
 800041c:	4095      	lsls	r5, r2
 800041e:	fa01 f002 	lsl.w	r0, r1, r2
 8000422:	fa21 f303 	lsr.w	r3, r1, r3
 8000426:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800042a:	4338      	orrs	r0, r7
 800042c:	0c01      	lsrs	r1, r0, #16
 800042e:	fbb3 f7fe 	udiv	r7, r3, lr
 8000432:	fa1f f885 	uxth.w	r8, r5
 8000436:	fb0e 3317 	mls	r3, lr, r7, r3
 800043a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043e:	fb07 f308 	mul.w	r3, r7, r8
 8000442:	428b      	cmp	r3, r1
 8000444:	fa04 f402 	lsl.w	r4, r4, r2
 8000448:	d907      	bls.n	800045a <__udivmoddi4+0x256>
 800044a:	1869      	adds	r1, r5, r1
 800044c:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000450:	d22f      	bcs.n	80004b2 <__udivmoddi4+0x2ae>
 8000452:	428b      	cmp	r3, r1
 8000454:	d92d      	bls.n	80004b2 <__udivmoddi4+0x2ae>
 8000456:	3f02      	subs	r7, #2
 8000458:	4429      	add	r1, r5
 800045a:	1acb      	subs	r3, r1, r3
 800045c:	b281      	uxth	r1, r0
 800045e:	fbb3 f0fe 	udiv	r0, r3, lr
 8000462:	fb0e 3310 	mls	r3, lr, r0, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb00 f308 	mul.w	r3, r0, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x27e>
 8000472:	1869      	adds	r1, r5, r1
 8000474:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000478:	d217      	bcs.n	80004aa <__udivmoddi4+0x2a6>
 800047a:	428b      	cmp	r3, r1
 800047c:	d915      	bls.n	80004aa <__udivmoddi4+0x2a6>
 800047e:	3802      	subs	r0, #2
 8000480:	4429      	add	r1, r5
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000488:	e73b      	b.n	8000302 <__udivmoddi4+0xfe>
 800048a:	4637      	mov	r7, r6
 800048c:	4630      	mov	r0, r6
 800048e:	e709      	b.n	80002a4 <__udivmoddi4+0xa0>
 8000490:	4607      	mov	r7, r0
 8000492:	e6e7      	b.n	8000264 <__udivmoddi4+0x60>
 8000494:	4618      	mov	r0, r3
 8000496:	e6fb      	b.n	8000290 <__udivmoddi4+0x8c>
 8000498:	4541      	cmp	r1, r8
 800049a:	d2ab      	bcs.n	80003f4 <__udivmoddi4+0x1f0>
 800049c:	ebb8 0a02 	subs.w	sl, r8, r2
 80004a0:	eb69 020e 	sbc.w	r2, r9, lr
 80004a4:	3801      	subs	r0, #1
 80004a6:	4613      	mov	r3, r2
 80004a8:	e7a4      	b.n	80003f4 <__udivmoddi4+0x1f0>
 80004aa:	4660      	mov	r0, ip
 80004ac:	e7e9      	b.n	8000482 <__udivmoddi4+0x27e>
 80004ae:	4618      	mov	r0, r3
 80004b0:	e795      	b.n	80003de <__udivmoddi4+0x1da>
 80004b2:	4667      	mov	r7, ip
 80004b4:	e7d1      	b.n	800045a <__udivmoddi4+0x256>
 80004b6:	4681      	mov	r9, r0
 80004b8:	e77c      	b.n	80003b4 <__udivmoddi4+0x1b0>
 80004ba:	3802      	subs	r0, #2
 80004bc:	442c      	add	r4, r5
 80004be:	e747      	b.n	8000350 <__udivmoddi4+0x14c>
 80004c0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c4:	442b      	add	r3, r5
 80004c6:	e72f      	b.n	8000328 <__udivmoddi4+0x124>
 80004c8:	4638      	mov	r0, r7
 80004ca:	e708      	b.n	80002de <__udivmoddi4+0xda>
 80004cc:	4637      	mov	r7, r6
 80004ce:	e6e9      	b.n	80002a4 <__udivmoddi4+0xa0>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004d8:	4b0e      	ldr	r3, [pc, #56]	; (8000514 <HAL_Init+0x40>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	4a0d      	ldr	r2, [pc, #52]	; (8000514 <HAL_Init+0x40>)
 80004de:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004e2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004e4:	4b0b      	ldr	r3, [pc, #44]	; (8000514 <HAL_Init+0x40>)
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a0a      	ldr	r2, [pc, #40]	; (8000514 <HAL_Init+0x40>)
 80004ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80004ee:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80004f0:	4b08      	ldr	r3, [pc, #32]	; (8000514 <HAL_Init+0x40>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a07      	ldr	r2, [pc, #28]	; (8000514 <HAL_Init+0x40>)
 80004f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80004fa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80004fc:	2003      	movs	r0, #3
 80004fe:	f000 f92b 	bl	8000758 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000502:	2000      	movs	r0, #0
 8000504:	f000 f808 	bl	8000518 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000508:	f001 faca 	bl	8001aa0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800050c:	2300      	movs	r3, #0
}
 800050e:	4618      	mov	r0, r3
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40023c00 	.word	0x40023c00

08000518 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000520:	4b12      	ldr	r3, [pc, #72]	; (800056c <HAL_InitTick+0x54>)
 8000522:	681a      	ldr	r2, [r3, #0]
 8000524:	4b12      	ldr	r3, [pc, #72]	; (8000570 <HAL_InitTick+0x58>)
 8000526:	781b      	ldrb	r3, [r3, #0]
 8000528:	4619      	mov	r1, r3
 800052a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800052e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000532:	fbb2 f3f3 	udiv	r3, r2, r3
 8000536:	4618      	mov	r0, r3
 8000538:	f000 f943 	bl	80007c2 <HAL_SYSTICK_Config>
 800053c:	4603      	mov	r3, r0
 800053e:	2b00      	cmp	r3, #0
 8000540:	d001      	beq.n	8000546 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000542:	2301      	movs	r3, #1
 8000544:	e00e      	b.n	8000564 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	2b0f      	cmp	r3, #15
 800054a:	d80a      	bhi.n	8000562 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800054c:	2200      	movs	r2, #0
 800054e:	6879      	ldr	r1, [r7, #4]
 8000550:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000554:	f000 f90b 	bl	800076e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000558:	4a06      	ldr	r2, [pc, #24]	; (8000574 <HAL_InitTick+0x5c>)
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800055e:	2300      	movs	r3, #0
 8000560:	e000      	b.n	8000564 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000562:	2301      	movs	r3, #1
}
 8000564:	4618      	mov	r0, r3
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	20000008 	.word	0x20000008
 8000570:	20000004 	.word	0x20000004
 8000574:	20000000 	.word	0x20000000

08000578 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000578:	b480      	push	{r7}
 800057a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800057c:	4b06      	ldr	r3, [pc, #24]	; (8000598 <HAL_IncTick+0x20>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	461a      	mov	r2, r3
 8000582:	4b06      	ldr	r3, [pc, #24]	; (800059c <HAL_IncTick+0x24>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	4413      	add	r3, r2
 8000588:	4a04      	ldr	r2, [pc, #16]	; (800059c <HAL_IncTick+0x24>)
 800058a:	6013      	str	r3, [r2, #0]
}
 800058c:	bf00      	nop
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000004 	.word	0x20000004
 800059c:	20000028 	.word	0x20000028

080005a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  return uwTick;
 80005a4:	4b03      	ldr	r3, [pc, #12]	; (80005b4 <HAL_GetTick+0x14>)
 80005a6:	681b      	ldr	r3, [r3, #0]
}
 80005a8:	4618      	mov	r0, r3
 80005aa:	46bd      	mov	sp, r7
 80005ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop
 80005b4:	20000028 	.word	0x20000028

080005b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80005b8:	b480      	push	{r7}
 80005ba:	b085      	sub	sp, #20
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	f003 0307 	and.w	r3, r3, #7
 80005c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80005c8:	4b0c      	ldr	r3, [pc, #48]	; (80005fc <__NVIC_SetPriorityGrouping+0x44>)
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80005ce:	68ba      	ldr	r2, [r7, #8]
 80005d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80005d4:	4013      	ands	r3, r2
 80005d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80005dc:	68bb      	ldr	r3, [r7, #8]
 80005de:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80005e0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80005e4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80005ea:	4a04      	ldr	r2, [pc, #16]	; (80005fc <__NVIC_SetPriorityGrouping+0x44>)
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	60d3      	str	r3, [r2, #12]
}
 80005f0:	bf00      	nop
 80005f2:	3714      	adds	r7, #20
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	e000ed00 	.word	0xe000ed00

08000600 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000600:	b480      	push	{r7}
 8000602:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000604:	4b04      	ldr	r3, [pc, #16]	; (8000618 <__NVIC_GetPriorityGrouping+0x18>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	0a1b      	lsrs	r3, r3, #8
 800060a:	f003 0307 	and.w	r3, r3, #7
}
 800060e:	4618      	mov	r0, r3
 8000610:	46bd      	mov	sp, r7
 8000612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000616:	4770      	bx	lr
 8000618:	e000ed00 	.word	0xe000ed00

0800061c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800061c:	b480      	push	{r7}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	4603      	mov	r3, r0
 8000624:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000626:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800062a:	2b00      	cmp	r3, #0
 800062c:	db0b      	blt.n	8000646 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	f003 021f 	and.w	r2, r3, #31
 8000634:	4907      	ldr	r1, [pc, #28]	; (8000654 <__NVIC_EnableIRQ+0x38>)
 8000636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800063a:	095b      	lsrs	r3, r3, #5
 800063c:	2001      	movs	r0, #1
 800063e:	fa00 f202 	lsl.w	r2, r0, r2
 8000642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	e000e100 	.word	0xe000e100

08000658 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000658:	b480      	push	{r7}
 800065a:	b083      	sub	sp, #12
 800065c:	af00      	add	r7, sp, #0
 800065e:	4603      	mov	r3, r0
 8000660:	6039      	str	r1, [r7, #0]
 8000662:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000668:	2b00      	cmp	r3, #0
 800066a:	db0a      	blt.n	8000682 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	b2da      	uxtb	r2, r3
 8000670:	490c      	ldr	r1, [pc, #48]	; (80006a4 <__NVIC_SetPriority+0x4c>)
 8000672:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000676:	0112      	lsls	r2, r2, #4
 8000678:	b2d2      	uxtb	r2, r2
 800067a:	440b      	add	r3, r1
 800067c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000680:	e00a      	b.n	8000698 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	b2da      	uxtb	r2, r3
 8000686:	4908      	ldr	r1, [pc, #32]	; (80006a8 <__NVIC_SetPriority+0x50>)
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	f003 030f 	and.w	r3, r3, #15
 800068e:	3b04      	subs	r3, #4
 8000690:	0112      	lsls	r2, r2, #4
 8000692:	b2d2      	uxtb	r2, r2
 8000694:	440b      	add	r3, r1
 8000696:	761a      	strb	r2, [r3, #24]
}
 8000698:	bf00      	nop
 800069a:	370c      	adds	r7, #12
 800069c:	46bd      	mov	sp, r7
 800069e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a2:	4770      	bx	lr
 80006a4:	e000e100 	.word	0xe000e100
 80006a8:	e000ed00 	.word	0xe000ed00

080006ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006ac:	b480      	push	{r7}
 80006ae:	b089      	sub	sp, #36	; 0x24
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	60f8      	str	r0, [r7, #12]
 80006b4:	60b9      	str	r1, [r7, #8]
 80006b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f003 0307 	and.w	r3, r3, #7
 80006be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	f1c3 0307 	rsb	r3, r3, #7
 80006c6:	2b04      	cmp	r3, #4
 80006c8:	bf28      	it	cs
 80006ca:	2304      	movcs	r3, #4
 80006cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ce:	69fb      	ldr	r3, [r7, #28]
 80006d0:	3304      	adds	r3, #4
 80006d2:	2b06      	cmp	r3, #6
 80006d4:	d902      	bls.n	80006dc <NVIC_EncodePriority+0x30>
 80006d6:	69fb      	ldr	r3, [r7, #28]
 80006d8:	3b03      	subs	r3, #3
 80006da:	e000      	b.n	80006de <NVIC_EncodePriority+0x32>
 80006dc:	2300      	movs	r3, #0
 80006de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80006e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80006e4:	69bb      	ldr	r3, [r7, #24]
 80006e6:	fa02 f303 	lsl.w	r3, r2, r3
 80006ea:	43da      	mvns	r2, r3
 80006ec:	68bb      	ldr	r3, [r7, #8]
 80006ee:	401a      	ands	r2, r3
 80006f0:	697b      	ldr	r3, [r7, #20]
 80006f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80006f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80006f8:	697b      	ldr	r3, [r7, #20]
 80006fa:	fa01 f303 	lsl.w	r3, r1, r3
 80006fe:	43d9      	mvns	r1, r3
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000704:	4313      	orrs	r3, r2
         );
}
 8000706:	4618      	mov	r0, r3
 8000708:	3724      	adds	r7, #36	; 0x24
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
	...

08000714 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
 800071a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	3b01      	subs	r3, #1
 8000720:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000724:	d301      	bcc.n	800072a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000726:	2301      	movs	r3, #1
 8000728:	e00f      	b.n	800074a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800072a:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <SysTick_Config+0x40>)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	3b01      	subs	r3, #1
 8000730:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000732:	210f      	movs	r1, #15
 8000734:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000738:	f7ff ff8e 	bl	8000658 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800073c:	4b05      	ldr	r3, [pc, #20]	; (8000754 <SysTick_Config+0x40>)
 800073e:	2200      	movs	r2, #0
 8000740:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000742:	4b04      	ldr	r3, [pc, #16]	; (8000754 <SysTick_Config+0x40>)
 8000744:	2207      	movs	r2, #7
 8000746:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000748:	2300      	movs	r3, #0
}
 800074a:	4618      	mov	r0, r3
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	e000e010 	.word	0xe000e010

08000758 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b082      	sub	sp, #8
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000760:	6878      	ldr	r0, [r7, #4]
 8000762:	f7ff ff29 	bl	80005b8 <__NVIC_SetPriorityGrouping>
}
 8000766:	bf00      	nop
 8000768:	3708      	adds	r7, #8
 800076a:	46bd      	mov	sp, r7
 800076c:	bd80      	pop	{r7, pc}

0800076e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800076e:	b580      	push	{r7, lr}
 8000770:	b086      	sub	sp, #24
 8000772:	af00      	add	r7, sp, #0
 8000774:	4603      	mov	r3, r0
 8000776:	60b9      	str	r1, [r7, #8]
 8000778:	607a      	str	r2, [r7, #4]
 800077a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800077c:	2300      	movs	r3, #0
 800077e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000780:	f7ff ff3e 	bl	8000600 <__NVIC_GetPriorityGrouping>
 8000784:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	68b9      	ldr	r1, [r7, #8]
 800078a:	6978      	ldr	r0, [r7, #20]
 800078c:	f7ff ff8e 	bl	80006ac <NVIC_EncodePriority>
 8000790:	4602      	mov	r2, r0
 8000792:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000796:	4611      	mov	r1, r2
 8000798:	4618      	mov	r0, r3
 800079a:	f7ff ff5d 	bl	8000658 <__NVIC_SetPriority>
}
 800079e:	bf00      	nop
 80007a0:	3718      	adds	r7, #24
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}

080007a6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007a6:	b580      	push	{r7, lr}
 80007a8:	b082      	sub	sp, #8
 80007aa:	af00      	add	r7, sp, #0
 80007ac:	4603      	mov	r3, r0
 80007ae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80007b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b4:	4618      	mov	r0, r3
 80007b6:	f7ff ff31 	bl	800061c <__NVIC_EnableIRQ>
}
 80007ba:	bf00      	nop
 80007bc:	3708      	adds	r7, #8
 80007be:	46bd      	mov	sp, r7
 80007c0:	bd80      	pop	{r7, pc}

080007c2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007c2:	b580      	push	{r7, lr}
 80007c4:	b082      	sub	sp, #8
 80007c6:	af00      	add	r7, sp, #0
 80007c8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ca:	6878      	ldr	r0, [r7, #4]
 80007cc:	f7ff ffa2 	bl	8000714 <SysTick_Config>
 80007d0:	4603      	mov	r3, r0
}
 80007d2:	4618      	mov	r0, r3
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
	...

080007dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007dc:	b480      	push	{r7}
 80007de:	b089      	sub	sp, #36	; 0x24
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
 80007e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007ea:	2300      	movs	r3, #0
 80007ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007ee:	2300      	movs	r3, #0
 80007f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007f2:	2300      	movs	r3, #0
 80007f4:	61fb      	str	r3, [r7, #28]
 80007f6:	e159      	b.n	8000aac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007f8:	2201      	movs	r2, #1
 80007fa:	69fb      	ldr	r3, [r7, #28]
 80007fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000800:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	697a      	ldr	r2, [r7, #20]
 8000808:	4013      	ands	r3, r2
 800080a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800080c:	693a      	ldr	r2, [r7, #16]
 800080e:	697b      	ldr	r3, [r7, #20]
 8000810:	429a      	cmp	r2, r3
 8000812:	f040 8148 	bne.w	8000aa6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000816:	683b      	ldr	r3, [r7, #0]
 8000818:	685b      	ldr	r3, [r3, #4]
 800081a:	2b02      	cmp	r3, #2
 800081c:	d003      	beq.n	8000826 <HAL_GPIO_Init+0x4a>
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	685b      	ldr	r3, [r3, #4]
 8000822:	2b12      	cmp	r3, #18
 8000824:	d123      	bne.n	800086e <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000826:	69fb      	ldr	r3, [r7, #28]
 8000828:	08da      	lsrs	r2, r3, #3
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	3208      	adds	r2, #8
 800082e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000832:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000834:	69fb      	ldr	r3, [r7, #28]
 8000836:	f003 0307 	and.w	r3, r3, #7
 800083a:	009b      	lsls	r3, r3, #2
 800083c:	220f      	movs	r2, #15
 800083e:	fa02 f303 	lsl.w	r3, r2, r3
 8000842:	43db      	mvns	r3, r3
 8000844:	69ba      	ldr	r2, [r7, #24]
 8000846:	4013      	ands	r3, r2
 8000848:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800084a:	683b      	ldr	r3, [r7, #0]
 800084c:	691a      	ldr	r2, [r3, #16]
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	f003 0307 	and.w	r3, r3, #7
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	fa02 f303 	lsl.w	r3, r2, r3
 800085a:	69ba      	ldr	r2, [r7, #24]
 800085c:	4313      	orrs	r3, r2
 800085e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000860:	69fb      	ldr	r3, [r7, #28]
 8000862:	08da      	lsrs	r2, r3, #3
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	3208      	adds	r2, #8
 8000868:	69b9      	ldr	r1, [r7, #24]
 800086a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
//        GPIOx->AFR[0] = 1 << 30 | 1 << 26;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000874:	69fb      	ldr	r3, [r7, #28]
 8000876:	005b      	lsls	r3, r3, #1
 8000878:	2203      	movs	r2, #3
 800087a:	fa02 f303 	lsl.w	r3, r2, r3
 800087e:	43db      	mvns	r3, r3
 8000880:	69ba      	ldr	r2, [r7, #24]
 8000882:	4013      	ands	r3, r2
 8000884:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	f003 0203 	and.w	r2, r3, #3
 800088e:	69fb      	ldr	r3, [r7, #28]
 8000890:	005b      	lsls	r3, r3, #1
 8000892:	fa02 f303 	lsl.w	r3, r2, r3
 8000896:	69ba      	ldr	r2, [r7, #24]
 8000898:	4313      	orrs	r3, r2
 800089a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	69ba      	ldr	r2, [r7, #24]
 80008a0:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008a2:	683b      	ldr	r3, [r7, #0]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	2b01      	cmp	r3, #1
 80008a8:	d00b      	beq.n	80008c2 <HAL_GPIO_Init+0xe6>
 80008aa:	683b      	ldr	r3, [r7, #0]
 80008ac:	685b      	ldr	r3, [r3, #4]
 80008ae:	2b02      	cmp	r3, #2
 80008b0:	d007      	beq.n	80008c2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008b2:	683b      	ldr	r3, [r7, #0]
 80008b4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008b6:	2b11      	cmp	r3, #17
 80008b8:	d003      	beq.n	80008c2 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008ba:	683b      	ldr	r3, [r7, #0]
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	2b12      	cmp	r3, #18
 80008c0:	d130      	bne.n	8000924 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	689b      	ldr	r3, [r3, #8]
 80008c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008c8:	69fb      	ldr	r3, [r7, #28]
 80008ca:	005b      	lsls	r3, r3, #1
 80008cc:	2203      	movs	r2, #3
 80008ce:	fa02 f303 	lsl.w	r3, r2, r3
 80008d2:	43db      	mvns	r3, r3
 80008d4:	69ba      	ldr	r2, [r7, #24]
 80008d6:	4013      	ands	r3, r2
 80008d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	68da      	ldr	r2, [r3, #12]
 80008de:	69fb      	ldr	r3, [r7, #28]
 80008e0:	005b      	lsls	r3, r3, #1
 80008e2:	fa02 f303 	lsl.w	r3, r2, r3
 80008e6:	69ba      	ldr	r2, [r7, #24]
 80008e8:	4313      	orrs	r3, r2
 80008ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	69ba      	ldr	r2, [r7, #24]
 80008f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	685b      	ldr	r3, [r3, #4]
 80008f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008f8:	2201      	movs	r2, #1
 80008fa:	69fb      	ldr	r3, [r7, #28]
 80008fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000900:	43db      	mvns	r3, r3
 8000902:	69ba      	ldr	r2, [r7, #24]
 8000904:	4013      	ands	r3, r2
 8000906:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000908:	683b      	ldr	r3, [r7, #0]
 800090a:	685b      	ldr	r3, [r3, #4]
 800090c:	091b      	lsrs	r3, r3, #4
 800090e:	f003 0201 	and.w	r2, r3, #1
 8000912:	69fb      	ldr	r3, [r7, #28]
 8000914:	fa02 f303 	lsl.w	r3, r2, r3
 8000918:	69ba      	ldr	r2, [r7, #24]
 800091a:	4313      	orrs	r3, r2
 800091c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	69ba      	ldr	r2, [r7, #24]
 8000922:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	68db      	ldr	r3, [r3, #12]
 8000928:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800092a:	69fb      	ldr	r3, [r7, #28]
 800092c:	005b      	lsls	r3, r3, #1
 800092e:	2203      	movs	r2, #3
 8000930:	fa02 f303 	lsl.w	r3, r2, r3
 8000934:	43db      	mvns	r3, r3
 8000936:	69ba      	ldr	r2, [r7, #24]
 8000938:	4013      	ands	r3, r2
 800093a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800093c:	683b      	ldr	r3, [r7, #0]
 800093e:	689a      	ldr	r2, [r3, #8]
 8000940:	69fb      	ldr	r3, [r7, #28]
 8000942:	005b      	lsls	r3, r3, #1
 8000944:	fa02 f303 	lsl.w	r3, r2, r3
 8000948:	69ba      	ldr	r2, [r7, #24]
 800094a:	4313      	orrs	r3, r2
 800094c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	69ba      	ldr	r2, [r7, #24]
 8000952:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000954:	683b      	ldr	r3, [r7, #0]
 8000956:	685b      	ldr	r3, [r3, #4]
 8000958:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800095c:	2b00      	cmp	r3, #0
 800095e:	f000 80a2 	beq.w	8000aa6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000962:	2300      	movs	r3, #0
 8000964:	60fb      	str	r3, [r7, #12]
 8000966:	4b56      	ldr	r3, [pc, #344]	; (8000ac0 <HAL_GPIO_Init+0x2e4>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	4a55      	ldr	r2, [pc, #340]	; (8000ac0 <HAL_GPIO_Init+0x2e4>)
 800096c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000970:	6453      	str	r3, [r2, #68]	; 0x44
 8000972:	4b53      	ldr	r3, [pc, #332]	; (8000ac0 <HAL_GPIO_Init+0x2e4>)
 8000974:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000976:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097a:	60fb      	str	r3, [r7, #12]
 800097c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800097e:	4a51      	ldr	r2, [pc, #324]	; (8000ac4 <HAL_GPIO_Init+0x2e8>)
 8000980:	69fb      	ldr	r3, [r7, #28]
 8000982:	089b      	lsrs	r3, r3, #2
 8000984:	3302      	adds	r3, #2
 8000986:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800098a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800098c:	69fb      	ldr	r3, [r7, #28]
 800098e:	f003 0303 	and.w	r3, r3, #3
 8000992:	009b      	lsls	r3, r3, #2
 8000994:	220f      	movs	r2, #15
 8000996:	fa02 f303 	lsl.w	r3, r2, r3
 800099a:	43db      	mvns	r3, r3
 800099c:	69ba      	ldr	r2, [r7, #24]
 800099e:	4013      	ands	r3, r2
 80009a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	4a48      	ldr	r2, [pc, #288]	; (8000ac8 <HAL_GPIO_Init+0x2ec>)
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d019      	beq.n	80009de <HAL_GPIO_Init+0x202>
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	4a47      	ldr	r2, [pc, #284]	; (8000acc <HAL_GPIO_Init+0x2f0>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d013      	beq.n	80009da <HAL_GPIO_Init+0x1fe>
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	4a46      	ldr	r2, [pc, #280]	; (8000ad0 <HAL_GPIO_Init+0x2f4>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d00d      	beq.n	80009d6 <HAL_GPIO_Init+0x1fa>
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4a45      	ldr	r2, [pc, #276]	; (8000ad4 <HAL_GPIO_Init+0x2f8>)
 80009be:	4293      	cmp	r3, r2
 80009c0:	d007      	beq.n	80009d2 <HAL_GPIO_Init+0x1f6>
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	4a44      	ldr	r2, [pc, #272]	; (8000ad8 <HAL_GPIO_Init+0x2fc>)
 80009c6:	4293      	cmp	r3, r2
 80009c8:	d101      	bne.n	80009ce <HAL_GPIO_Init+0x1f2>
 80009ca:	2304      	movs	r3, #4
 80009cc:	e008      	b.n	80009e0 <HAL_GPIO_Init+0x204>
 80009ce:	2307      	movs	r3, #7
 80009d0:	e006      	b.n	80009e0 <HAL_GPIO_Init+0x204>
 80009d2:	2303      	movs	r3, #3
 80009d4:	e004      	b.n	80009e0 <HAL_GPIO_Init+0x204>
 80009d6:	2302      	movs	r3, #2
 80009d8:	e002      	b.n	80009e0 <HAL_GPIO_Init+0x204>
 80009da:	2301      	movs	r3, #1
 80009dc:	e000      	b.n	80009e0 <HAL_GPIO_Init+0x204>
 80009de:	2300      	movs	r3, #0
 80009e0:	69fa      	ldr	r2, [r7, #28]
 80009e2:	f002 0203 	and.w	r2, r2, #3
 80009e6:	0092      	lsls	r2, r2, #2
 80009e8:	4093      	lsls	r3, r2
 80009ea:	69ba      	ldr	r2, [r7, #24]
 80009ec:	4313      	orrs	r3, r2
 80009ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80009f0:	4934      	ldr	r1, [pc, #208]	; (8000ac4 <HAL_GPIO_Init+0x2e8>)
 80009f2:	69fb      	ldr	r3, [r7, #28]
 80009f4:	089b      	lsrs	r3, r3, #2
 80009f6:	3302      	adds	r3, #2
 80009f8:	69ba      	ldr	r2, [r7, #24]
 80009fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80009fe:	4b37      	ldr	r3, [pc, #220]	; (8000adc <HAL_GPIO_Init+0x300>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a04:	693b      	ldr	r3, [r7, #16]
 8000a06:	43db      	mvns	r3, r3
 8000a08:	69ba      	ldr	r2, [r7, #24]
 8000a0a:	4013      	ands	r3, r2
 8000a0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	685b      	ldr	r3, [r3, #4]
 8000a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d003      	beq.n	8000a22 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000a1a:	69ba      	ldr	r2, [r7, #24]
 8000a1c:	693b      	ldr	r3, [r7, #16]
 8000a1e:	4313      	orrs	r3, r2
 8000a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a22:	4a2e      	ldr	r2, [pc, #184]	; (8000adc <HAL_GPIO_Init+0x300>)
 8000a24:	69bb      	ldr	r3, [r7, #24]
 8000a26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a28:	4b2c      	ldr	r3, [pc, #176]	; (8000adc <HAL_GPIO_Init+0x300>)
 8000a2a:	685b      	ldr	r3, [r3, #4]
 8000a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a2e:	693b      	ldr	r3, [r7, #16]
 8000a30:	43db      	mvns	r3, r3
 8000a32:	69ba      	ldr	r2, [r7, #24]
 8000a34:	4013      	ands	r3, r2
 8000a36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a38:	683b      	ldr	r3, [r7, #0]
 8000a3a:	685b      	ldr	r3, [r3, #4]
 8000a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a40:	2b00      	cmp	r3, #0
 8000a42:	d003      	beq.n	8000a4c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000a44:	69ba      	ldr	r2, [r7, #24]
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a4c:	4a23      	ldr	r2, [pc, #140]	; (8000adc <HAL_GPIO_Init+0x300>)
 8000a4e:	69bb      	ldr	r3, [r7, #24]
 8000a50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a52:	4b22      	ldr	r3, [pc, #136]	; (8000adc <HAL_GPIO_Init+0x300>)
 8000a54:	689b      	ldr	r3, [r3, #8]
 8000a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a58:	693b      	ldr	r3, [r7, #16]
 8000a5a:	43db      	mvns	r3, r3
 8000a5c:	69ba      	ldr	r2, [r7, #24]
 8000a5e:	4013      	ands	r3, r2
 8000a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000a62:	683b      	ldr	r3, [r7, #0]
 8000a64:	685b      	ldr	r3, [r3, #4]
 8000a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	d003      	beq.n	8000a76 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000a6e:	69ba      	ldr	r2, [r7, #24]
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	4313      	orrs	r3, r2
 8000a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000a76:	4a19      	ldr	r2, [pc, #100]	; (8000adc <HAL_GPIO_Init+0x300>)
 8000a78:	69bb      	ldr	r3, [r7, #24]
 8000a7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000a7c:	4b17      	ldr	r3, [pc, #92]	; (8000adc <HAL_GPIO_Init+0x300>)
 8000a7e:	68db      	ldr	r3, [r3, #12]
 8000a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a82:	693b      	ldr	r3, [r7, #16]
 8000a84:	43db      	mvns	r3, r3
 8000a86:	69ba      	ldr	r2, [r7, #24]
 8000a88:	4013      	ands	r3, r2
 8000a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000a8c:	683b      	ldr	r3, [r7, #0]
 8000a8e:	685b      	ldr	r3, [r3, #4]
 8000a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000a94:	2b00      	cmp	r3, #0
 8000a96:	d003      	beq.n	8000aa0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000a98:	69ba      	ldr	r2, [r7, #24]
 8000a9a:	693b      	ldr	r3, [r7, #16]
 8000a9c:	4313      	orrs	r3, r2
 8000a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000aa0:	4a0e      	ldr	r2, [pc, #56]	; (8000adc <HAL_GPIO_Init+0x300>)
 8000aa2:	69bb      	ldr	r3, [r7, #24]
 8000aa4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000aa6:	69fb      	ldr	r3, [r7, #28]
 8000aa8:	3301      	adds	r3, #1
 8000aaa:	61fb      	str	r3, [r7, #28]
 8000aac:	69fb      	ldr	r3, [r7, #28]
 8000aae:	2b0f      	cmp	r3, #15
 8000ab0:	f67f aea2 	bls.w	80007f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ab4:	bf00      	nop
 8000ab6:	3724      	adds	r7, #36	; 0x24
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40013800 	.word	0x40013800
 8000ac8:	40020000 	.word	0x40020000
 8000acc:	40020400 	.word	0x40020400
 8000ad0:	40020800 	.word	0x40020800
 8000ad4:	40020c00 	.word	0x40020c00
 8000ad8:	40021000 	.word	0x40021000
 8000adc:	40013c00 	.word	0x40013c00

08000ae0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
 8000ae8:	460b      	mov	r3, r1
 8000aea:	807b      	strh	r3, [r7, #2]
 8000aec:	4613      	mov	r3, r2
 8000aee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000af0:	787b      	ldrb	r3, [r7, #1]
 8000af2:	2b00      	cmp	r3, #0
 8000af4:	d003      	beq.n	8000afe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000af6:	887a      	ldrh	r2, [r7, #2]
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000afc:	e003      	b.n	8000b06 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000afe:	887b      	ldrh	r3, [r7, #2]
 8000b00:	041a      	lsls	r2, r3, #16
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	619a      	str	r2, [r3, #24]
}
 8000b06:	bf00      	nop
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b12:	b480      	push	{r7}
 8000b14:	b083      	sub	sp, #12
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
 8000b1a:	460b      	mov	r3, r1
 8000b1c:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	695a      	ldr	r2, [r3, #20]
 8000b22:	887b      	ldrh	r3, [r7, #2]
 8000b24:	401a      	ands	r2, r3
 8000b26:	887b      	ldrh	r3, [r7, #2]
 8000b28:	429a      	cmp	r2, r3
 8000b2a:	d104      	bne.n	8000b36 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000b2c:	887b      	ldrh	r3, [r7, #2]
 8000b2e:	041a      	lsls	r2, r3, #16
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000b34:	e002      	b.n	8000b3c <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000b36:	887a      	ldrh	r2, [r7, #2]
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	619a      	str	r2, [r3, #24]
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	4603      	mov	r3, r0
 8000b50:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000b52:	4b08      	ldr	r3, [pc, #32]	; (8000b74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b54:	695a      	ldr	r2, [r3, #20]
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	4013      	ands	r3, r2
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d006      	beq.n	8000b6c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000b5e:	4a05      	ldr	r2, [pc, #20]	; (8000b74 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000b60:	88fb      	ldrh	r3, [r7, #6]
 8000b62:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000b64:	88fb      	ldrh	r3, [r7, #6]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f000 f806 	bl	8000b78 <HAL_GPIO_EXTI_Callback>
  }
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40013c00 	.word	0x40013c00

08000b78 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	b083      	sub	sp, #12
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	4603      	mov	r3, r0
 8000b80:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000b82:	bf00      	nop
 8000b84:	370c      	adds	r7, #12
 8000b86:	46bd      	mov	sp, r7
 8000b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8c:	4770      	bx	lr
	...

08000b90 <I2C_PeripheralClkControl>:
// static functions' declarations
static void I2C_ClearADDRFlag(I2C_TypeDef *pI2Cx);
static void I2C_WriteSlaveAddress(I2C_Handle_t *I2C_handle, uint8_t operation);
static void I2C_ControlAcking(I2C_TypeDef *pI2Cx, uint8_t enable);

void I2C_PeripheralClkControl(I2C_TypeDef *pI2Cx) {
 8000b90:	b480      	push	{r7}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
	if (pI2Cx == I2C1) {
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	4a12      	ldr	r2, [pc, #72]	; (8000be4 <I2C_PeripheralClkControl+0x54>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d106      	bne.n	8000bae <I2C_PeripheralClkControl+0x1e>
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000ba0:	4b11      	ldr	r3, [pc, #68]	; (8000be8 <I2C_PeripheralClkControl+0x58>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba4:	4a10      	ldr	r2, [pc, #64]	; (8000be8 <I2C_PeripheralClkControl+0x58>)
 8000ba6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000baa:	6413      	str	r3, [r2, #64]	; 0x40
	else if (pI2Cx == I2C3) {
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
	}


}
 8000bac:	e014      	b.n	8000bd8 <I2C_PeripheralClkControl+0x48>
	else if (pI2Cx == I2C2) {
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4a0e      	ldr	r2, [pc, #56]	; (8000bec <I2C_PeripheralClkControl+0x5c>)
 8000bb2:	4293      	cmp	r3, r2
 8000bb4:	d106      	bne.n	8000bc4 <I2C_PeripheralClkControl+0x34>
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8000bb6:	4b0c      	ldr	r3, [pc, #48]	; (8000be8 <I2C_PeripheralClkControl+0x58>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	4a0b      	ldr	r2, [pc, #44]	; (8000be8 <I2C_PeripheralClkControl+0x58>)
 8000bbc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000bc0:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bc2:	e009      	b.n	8000bd8 <I2C_PeripheralClkControl+0x48>
	else if (pI2Cx == I2C3) {
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4a0a      	ldr	r2, [pc, #40]	; (8000bf0 <I2C_PeripheralClkControl+0x60>)
 8000bc8:	4293      	cmp	r3, r2
 8000bca:	d105      	bne.n	8000bd8 <I2C_PeripheralClkControl+0x48>
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <I2C_PeripheralClkControl+0x58>)
 8000bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd0:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <I2C_PeripheralClkControl+0x58>)
 8000bd2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000bd6:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000bd8:	bf00      	nop
 8000bda:	370c      	adds	r7, #12
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	40005400 	.word	0x40005400
 8000be8:	40023800 	.word	0x40023800
 8000bec:	40005800 	.word	0x40005800
 8000bf0:	40005c00 	.word	0x40005c00

08000bf4 <I2C_Init>:

void I2C_Init(I2C_Handle_t *I2C_handle) {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b084      	sub	sp, #16
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	6078      	str	r0, [r7, #4]

	I2C_PeripheralClkControl(I2C_handle->pI2Cx);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	4618      	mov	r0, r3
 8000c02:	f7ff ffc5 	bl	8000b90 <I2C_PeripheralClkControl>

	// control ACK bit
	I2C_handle->pI2Cx->CR1 |= I2C_handle->I2C_Config.I2C_AckControl << 10;
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	681a      	ldr	r2, [r3, #0]
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	7a5b      	ldrb	r3, [r3, #9]
 8000c10:	029b      	lsls	r3, r3, #10
 8000c12:	4619      	mov	r1, r3
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	430a      	orrs	r2, r1
 8000c1a:	601a      	str	r2, [r3, #0]

	// device address
	I2C_handle->pI2Cx->OAR1 |= I2C_handle->I2C_Config.I2C_DeviceAddress << 1;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	689a      	ldr	r2, [r3, #8]
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	7a1b      	ldrb	r3, [r3, #8]
 8000c26:	005b      	lsls	r3, r3, #1
 8000c28:	4619      	mov	r1, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	430a      	orrs	r2, r1
 8000c30:	609a      	str	r2, [r3, #8]
	I2C_handle->pI2Cx->OAR1 |= 1 << 14; 		// setting 14th bit to 1 as per datasheet
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	689a      	ldr	r2, [r3, #8]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000c40:	609a      	str	r2, [r3, #8]

	// peripheral clock frequency
	uint32_t peripheralClkFreq = (SystemCoreClock / 1000000) & 0x3f;
 8000c42:	4b23      	ldr	r3, [pc, #140]	; (8000cd0 <I2C_Init+0xdc>)
 8000c44:	681b      	ldr	r3, [r3, #0]
 8000c46:	4a23      	ldr	r2, [pc, #140]	; (8000cd4 <I2C_Init+0xe0>)
 8000c48:	fba2 2303 	umull	r2, r3, r2, r3
 8000c4c:	0c9b      	lsrs	r3, r3, #18
 8000c4e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000c52:	60fb      	str	r3, [r7, #12]
	I2C_handle->pI2Cx->CR2 |= peripheralClkFreq;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	681b      	ldr	r3, [r3, #0]
 8000c58:	6859      	ldr	r1, [r3, #4]
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	68fa      	ldr	r2, [r7, #12]
 8000c60:	430a      	orrs	r2, r1
 8000c62:	605a      	str	r2, [r3, #4]

	//setting CCR register
	if (I2C_handle->I2C_Config.I2C_SCLSpeed == I2C_SCL_SPEED_SM) {
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	685b      	ldr	r3, [r3, #4]
 8000c68:	4a1b      	ldr	r2, [pc, #108]	; (8000cd8 <I2C_Init+0xe4>)
 8000c6a:	4293      	cmp	r3, r2
 8000c6c:	d10f      	bne.n	8000c8e <I2C_Init+0x9a>
		uint16_t ccr = SystemCoreClock / (2 * I2C_handle->I2C_Config.I2C_SCLSpeed);
 8000c6e:	4b18      	ldr	r3, [pc, #96]	; (8000cd0 <I2C_Init+0xdc>)
 8000c70:	681a      	ldr	r2, [r3, #0]
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	005b      	lsls	r3, r3, #1
 8000c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c7c:	817b      	strh	r3, [r7, #10]
			//uint16_t ccr = t_high / t_pclk;
		I2C_handle->pI2Cx->CCR |= ccr;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	69d9      	ldr	r1, [r3, #28]
 8000c84:	897a      	ldrh	r2, [r7, #10]
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	430a      	orrs	r2, r1
 8000c8c:	61da      	str	r2, [r3, #28]
	}

	// TRise configuration
	if(I2C_handle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM) {
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	4a11      	ldr	r2, [pc, #68]	; (8000cd8 <I2C_Init+0xe4>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d80f      	bhi.n	8000cb8 <I2C_Init+0xc4>
		I2C_handle->pI2Cx->TRISE |= ( (SystemCoreClock / 1000000 + 1) & 0x3f); // max rise time in SmMode = 1000ns - 0011 1111
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	681b      	ldr	r3, [r3, #0]
 8000c9c:	6a19      	ldr	r1, [r3, #32]
 8000c9e:	4b0c      	ldr	r3, [pc, #48]	; (8000cd0 <I2C_Init+0xdc>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a0c      	ldr	r2, [pc, #48]	; (8000cd4 <I2C_Init+0xe0>)
 8000ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca8:	0c9b      	lsrs	r3, r3, #18
 8000caa:	3301      	adds	r3, #1
 8000cac:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	681b      	ldr	r3, [r3, #0]
 8000cb4:	430a      	orrs	r2, r1
 8000cb6:	621a      	str	r2, [r3, #32]
	}

	// control peripheral clk and PE
	I2C_handle->pI2Cx->CR1 |= ENABLE;
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	f042 0201 	orr.w	r2, r2, #1
 8000cc6:	601a      	str	r2, [r3, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	3710      	adds	r7, #16
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	20000008 	.word	0x20000008
 8000cd4:	431bde83 	.word	0x431bde83
 8000cd8:	000186a0 	.word	0x000186a0

08000cdc <GetFlagStatus>:

uint8_t GetFlagStatus(I2C_TypeDef *pI2Cx, uint16_t flag) {
 8000cdc:	b480      	push	{r7}
 8000cde:	b083      	sub	sp, #12
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	807b      	strh	r3, [r7, #2]
	if (pI2Cx->SR1 & flag)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	695a      	ldr	r2, [r3, #20]
 8000cec:	887b      	ldrh	r3, [r7, #2]
 8000cee:	4013      	ands	r3, r2
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d001      	beq.n	8000cf8 <GetFlagStatus+0x1c>
		return FLAG_SET;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	e000      	b.n	8000cfa <GetFlagStatus+0x1e>
	return FLAG_NOT_SET;
 8000cf8:	2300      	movs	r3, #0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	370c      	adds	r7, #12
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d04:	4770      	bx	lr

08000d06 <GenerateStartCondition>:

void GenerateStartCondition(I2C_Handle_t *I2C_handle) {
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
	I2C_handle->pI2Cx->CR1 |= I2C_CR1_START;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	681a      	ldr	r2, [r3, #0]
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000d1c:	601a      	str	r2, [r3, #0]
}
 8000d1e:	bf00      	nop
 8000d20:	370c      	adds	r7, #12
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr

08000d2a <GenerateStopCondition>:

static void GenerateStopCondition(I2C_Handle_t *I2C_handle) {
 8000d2a:	b480      	push	{r7}
 8000d2c:	b083      	sub	sp, #12
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
	I2C_handle->pI2Cx->CR1 |= I2C_CR1_STOP;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	681a      	ldr	r2, [r3, #0]
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000d40:	601a      	str	r2, [r3, #0]
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <I2C_WriteSlaveAddress>:

static void I2C_WriteSlaveAddress(I2C_Handle_t *I2C_handle, uint8_t operation) {
 8000d4e:	b480      	push	{r7}
 8000d50:	b085      	sub	sp, #20
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	6078      	str	r0, [r7, #4]
 8000d56:	460b      	mov	r3, r1
 8000d58:	70fb      	strb	r3, [r7, #3]
	uint8_t slaveAddress = I2C_handle->I2C_Config.I2C_DeviceAddress;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	7a1b      	ldrb	r3, [r3, #8]
 8000d5e:	73fb      	strb	r3, [r7, #15]
	slaveAddress <<= 1;
 8000d60:	7bfb      	ldrb	r3, [r7, #15]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	73fb      	strb	r3, [r7, #15]
	slaveAddress = operation == WRITE ? (slaveAddress & ~1) : (slaveAddress | 1);
 8000d66:	78fb      	ldrb	r3, [r7, #3]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d104      	bne.n	8000d76 <I2C_WriteSlaveAddress+0x28>
 8000d6c:	7bfb      	ldrb	r3, [r7, #15]
 8000d6e:	f023 0301 	bic.w	r3, r3, #1
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	e003      	b.n	8000d7e <I2C_WriteSlaveAddress+0x30>
 8000d76:	7bfb      	ldrb	r3, [r7, #15]
 8000d78:	f043 0301 	orr.w	r3, r3, #1
 8000d7c:	b2db      	uxtb	r3, r3
 8000d7e:	73fb      	strb	r3, [r7, #15]

	I2C_handle->pI2Cx->DR = slaveAddress;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	7bfa      	ldrb	r2, [r7, #15]
 8000d86:	611a      	str	r2, [r3, #16]
}
 8000d88:	bf00      	nop
 8000d8a:	3714      	adds	r7, #20
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr

08000d94 <I2C_ClearADDRFlag>:

// read SR1 and SR2 registers to clear ADDR flag
static void I2C_ClearADDRFlag(I2C_TypeDef *pI2Cx) {
 8000d94:	b480      	push	{r7}
 8000d96:	b085      	sub	sp, #20
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead;
	dummyRead = pI2Cx->SR1;
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	695b      	ldr	r3, [r3, #20]
 8000da0:	60fb      	str	r3, [r7, #12]
    dummyRead = pI2Cx->SR2;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	699b      	ldr	r3, [r3, #24]
 8000da6:	60fb      	str	r3, [r7, #12]
}
 8000da8:	bf00      	nop
 8000daa:	3714      	adds	r7, #20
 8000dac:	46bd      	mov	sp, r7
 8000dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db2:	4770      	bx	lr

08000db4 <I2C_ControlAcking>:
static void I2C_ControlAcking(I2C_TypeDef *pI2Cx, uint8_t enable)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
 8000dbc:	460b      	mov	r3, r1
 8000dbe:	70fb      	strb	r3, [r7, #3]
//	pI2Cx->CR1 = enable ? (pI2Cx->CR1 | (1 << I2C_CR1_ACK)) : (pI2Cx->CR1 & ~(1 << I2C_CR1_ACK));
	if (enable)
 8000dc0:	78fb      	ldrb	r3, [r7, #3]
 8000dc2:	2b00      	cmp	r3, #0
 8000dc4:	d004      	beq.n	8000dd0 <I2C_ControlAcking+0x1c>
	{
		pI2Cx->CR1 |= 1U << I2C_CR1_ACK;
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(1U << I2C_CR1_ACK);
	}
}
 8000dce:	e003      	b.n	8000dd8 <I2C_ControlAcking+0x24>
		pI2Cx->CR1 &= ~(1U << I2C_CR1_ACK);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	601a      	str	r2, [r3, #0]
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <I2C_MasterRequestWrite>:
HAL_StatusTypeDef I2C_MasterRequestWrite (I2C_Handle_t *I2C_handle, uint8_t *data, uint8_t size)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	60f8      	str	r0, [r7, #12]
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	4613      	mov	r3, r2
 8000df0:	71fb      	strb	r3, [r7, #7]
	// generate start condition
	GenerateStartCondition(I2C_handle);
 8000df2:	68f8      	ldr	r0, [r7, #12]
 8000df4:	f7ff ff87 	bl	8000d06 <GenerateStartCondition>

	// validate the completion of start condition
	while (!GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_SB));
 8000df8:	bf00      	nop
 8000dfa:	68fb      	ldr	r3, [r7, #12]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2101      	movs	r1, #1
 8000e00:	4618      	mov	r0, r3
 8000e02:	f7ff ff6b 	bl	8000cdc <GetFlagStatus>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d0f6      	beq.n	8000dfa <I2C_MasterRequestWrite+0x16>

	// write slave address along with write bit
	I2C_WriteSlaveAddress(I2C_handle, WRITE);
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	68f8      	ldr	r0, [r7, #12]
 8000e10:	f7ff ff9d 	bl	8000d4e <I2C_WriteSlaveAddress>

	// wait for address to be sent
	while (!GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_ADDR));
 8000e14:	bf00      	nop
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	2102      	movs	r1, #2
 8000e1c:	4618      	mov	r0, r3
 8000e1e:	f7ff ff5d 	bl	8000cdc <GetFlagStatus>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d0f6      	beq.n	8000e16 <I2C_MasterRequestWrite+0x32>

	// clear address flag
	I2C_ClearADDRFlag(I2C_handle->pI2Cx);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff ffb1 	bl	8000d94 <I2C_ClearADDRFlag>

	/* write to the SDA lie */

	// wait for TXE bit to set
	while(!GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_TXE));
 8000e32:	bf00      	nop
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2180      	movs	r1, #128	; 0x80
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f7ff ff4e 	bl	8000cdc <GetFlagStatus>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d0f6      	beq.n	8000e34 <I2C_MasterRequestWrite+0x50>

	for (; size > 0; size--)
 8000e46:	e01d      	b.n	8000e84 <I2C_MasterRequestWrite+0xa0>
	{
		// making sure data register is not empty prior to reading from it
		while (!GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_TXE));
 8000e48:	bf00      	nop
 8000e4a:	68fb      	ldr	r3, [r7, #12]
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	2180      	movs	r1, #128	; 0x80
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff ff43 	bl	8000cdc <GetFlagStatus>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d0f6      	beq.n	8000e4a <I2C_MasterRequestWrite+0x66>

		I2C_handle->pI2Cx->DR = *data++;
 8000e5c:	68bb      	ldr	r3, [r7, #8]
 8000e5e:	1c5a      	adds	r2, r3, #1
 8000e60:	60ba      	str	r2, [r7, #8]
 8000e62:	781a      	ldrb	r2, [r3, #0]
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	611a      	str	r2, [r3, #16]

		while (!GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_BTF));
 8000e6a:	bf00      	nop
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2104      	movs	r1, #4
 8000e72:	4618      	mov	r0, r3
 8000e74:	f7ff ff32 	bl	8000cdc <GetFlagStatus>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0f6      	beq.n	8000e6c <I2C_MasterRequestWrite+0x88>
	for (; size > 0; size--)
 8000e7e:	79fb      	ldrb	r3, [r7, #7]
 8000e80:	3b01      	subs	r3, #1
 8000e82:	71fb      	strb	r3, [r7, #7]
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	2b00      	cmp	r3, #0
 8000e88:	d1de      	bne.n	8000e48 <I2C_MasterRequestWrite+0x64>
//			return HAL_ERROR;
//		}
	}


	while(! GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_TXE) );
 8000e8a:	bf00      	nop
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2180      	movs	r1, #128	; 0x80
 8000e92:	4618      	mov	r0, r3
 8000e94:	f7ff ff22 	bl	8000cdc <GetFlagStatus>
 8000e98:	4603      	mov	r3, r0
 8000e9a:	2b00      	cmp	r3, #0
 8000e9c:	d0f6      	beq.n	8000e8c <I2C_MasterRequestWrite+0xa8>


	while(! GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_BTF) );
 8000e9e:	bf00      	nop
 8000ea0:	68fb      	ldr	r3, [r7, #12]
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2104      	movs	r1, #4
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f7ff ff18 	bl	8000cdc <GetFlagStatus>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d0f6      	beq.n	8000ea0 <I2C_MasterRequestWrite+0xbc>

	GenerateStopCondition(I2C_handle);
 8000eb2:	68f8      	ldr	r0, [r7, #12]
 8000eb4:	f7ff ff39 	bl	8000d2a <GenerateStopCondition>

	return HAL_OK;
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	3710      	adds	r7, #16
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <I2C_MasterReceiveData>:
	I2C_MasterRequestWrite(I2C_handle, data, size);

}

void I2C_MasterReceiveData (I2C_Handle_t *I2C_handle, uint8_t *rxBuffer, uint8_t size)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b084      	sub	sp, #16
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	60f8      	str	r0, [r7, #12]
 8000eca:	60b9      	str	r1, [r7, #8]
 8000ecc:	4613      	mov	r3, r2
 8000ece:	71fb      	strb	r3, [r7, #7]
//
//	I2C_MasterTransmitData(I2C_handle, temperatureRegister, regSize);

	// -----------
	// generate start condition
	GenerateStartCondition(I2C_handle);
 8000ed0:	68f8      	ldr	r0, [r7, #12]
 8000ed2:	f7ff ff18 	bl	8000d06 <GenerateStartCondition>

	// validate the completion of start condition
	while (!GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_SB));
 8000ed6:	bf00      	nop
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	2101      	movs	r1, #1
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f7ff fefc 	bl	8000cdc <GetFlagStatus>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d0f6      	beq.n	8000ed8 <I2C_MasterReceiveData+0x16>

	// write slave address
	I2C_WriteSlaveAddress(I2C_handle, READ);
 8000eea:	2101      	movs	r1, #1
 8000eec:	68f8      	ldr	r0, [r7, #12]
 8000eee:	f7ff ff2e 	bl	8000d4e <I2C_WriteSlaveAddress>

	// wait for address to be sent
	while (!GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_ADDR));
 8000ef2:	bf00      	nop
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	2102      	movs	r1, #2
 8000efa:	4618      	mov	r0, r3
 8000efc:	f7ff feee 	bl	8000cdc <GetFlagStatus>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d0f6      	beq.n	8000ef4 <I2C_MasterReceiveData+0x32>

	if (size > 1) {
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	2b01      	cmp	r3, #1
 8000f0a:	f240 8083 	bls.w	8001014 <I2C_MasterReceiveData+0x152>

//		I2C_ClearADDRFlag(I2C_handle->pI2Cx);

		if (size == 2) {
 8000f0e:	79fb      	ldrb	r3, [r7, #7]
 8000f10:	2b02      	cmp	r3, #2
 8000f12:	d12f      	bne.n	8000f74 <I2C_MasterReceiveData+0xb2>
			I2C_ControlAcking(I2C_handle->pI2Cx, RESET);
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff ff4a 	bl	8000db4 <I2C_ControlAcking>
			I2C_handle->pI2Cx->CR1 |= 1 << 11;				//POS
 8000f20:	68fb      	ldr	r3, [r7, #12]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	68fb      	ldr	r3, [r7, #12]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8000f2e:	601a      	str	r2, [r3, #0]
			I2C_ClearADDRFlag(I2C_handle->pI2Cx);
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4618      	mov	r0, r3
 8000f36:	f7ff ff2d 	bl	8000d94 <I2C_ClearADDRFlag>

			while(!GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_BTF));
 8000f3a:	bf00      	nop
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	2104      	movs	r1, #4
 8000f42:	4618      	mov	r0, r3
 8000f44:	f7ff feca 	bl	8000cdc <GetFlagStatus>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d0f6      	beq.n	8000f3c <I2C_MasterReceiveData+0x7a>
			GenerateStopCondition(I2C_handle);
 8000f4e:	68f8      	ldr	r0, [r7, #12]
 8000f50:	f7ff feeb 	bl	8000d2a <GenerateStopCondition>
			*rxBuffer = (uint8_t) I2C_handle->pI2Cx->DR;
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	691b      	ldr	r3, [r3, #16]
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	701a      	strb	r2, [r3, #0]
			rxBuffer++;
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	3301      	adds	r3, #1
 8000f64:	60bb      	str	r3, [r7, #8]
			*rxBuffer = (uint8_t) I2C_handle->pI2Cx->DR;
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	691b      	ldr	r3, [r3, #16]
 8000f6c:	b2da      	uxtb	r2, r3
 8000f6e:	68bb      	ldr	r3, [r7, #8]
 8000f70:	701a      	strb	r2, [r3, #0]
		rxBuffer = I2C_handle->pI2Cx->DR;

	}


}
 8000f72:	e06e      	b.n	8001052 <I2C_MasterReceiveData+0x190>
		else if (size == 3) {
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	2b03      	cmp	r3, #3
 8000f78:	d16b      	bne.n	8001052 <I2C_MasterReceiveData+0x190>
			I2C_ControlAcking(I2C_handle->pI2Cx, SET);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2101      	movs	r1, #1
 8000f80:	4618      	mov	r0, r3
 8000f82:	f7ff ff17 	bl	8000db4 <I2C_ControlAcking>
			I2C_ClearADDRFlag(I2C_handle->pI2Cx);
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f7ff ff02 	bl	8000d94 <I2C_ClearADDRFlag>
			while (!GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_BTF));
 8000f90:	bf00      	nop
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	2104      	movs	r1, #4
 8000f98:	4618      	mov	r0, r3
 8000f9a:	f7ff fe9f 	bl	8000cdc <GetFlagStatus>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d0f6      	beq.n	8000f92 <I2C_MasterReceiveData+0xd0>
			I2C_ControlAcking(I2C_handle->pI2Cx, DISABLE);
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	2100      	movs	r1, #0
 8000faa:	4618      	mov	r0, r3
 8000fac:	f7ff ff02 	bl	8000db4 <I2C_ControlAcking>
			*rxBuffer = (uint8_t) I2C_handle->pI2Cx->DR;
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	691b      	ldr	r3, [r3, #16]
 8000fb6:	b2da      	uxtb	r2, r3
 8000fb8:	68bb      	ldr	r3, [r7, #8]
 8000fba:	701a      	strb	r2, [r3, #0]
			rxBuffer++;
 8000fbc:	68bb      	ldr	r3, [r7, #8]
 8000fbe:	3301      	adds	r3, #1
 8000fc0:	60bb      	str	r3, [r7, #8]
			size--;
 8000fc2:	79fb      	ldrb	r3, [r7, #7]
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	71fb      	strb	r3, [r7, #7]
			while (!GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_BTF));
 8000fc8:	bf00      	nop
 8000fca:	68fb      	ldr	r3, [r7, #12]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2104      	movs	r1, #4
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	f7ff fe83 	bl	8000cdc <GetFlagStatus>
 8000fd6:	4603      	mov	r3, r0
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d0f6      	beq.n	8000fca <I2C_MasterReceiveData+0x108>
			GenerateStopCondition(I2C_handle);
 8000fdc:	68f8      	ldr	r0, [r7, #12]
 8000fde:	f7ff fea4 	bl	8000d2a <GenerateStopCondition>
			*rxBuffer = (uint8_t) I2C_handle->pI2Cx->DR;
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	691b      	ldr	r3, [r3, #16]
 8000fe8:	b2da      	uxtb	r2, r3
 8000fea:	68bb      	ldr	r3, [r7, #8]
 8000fec:	701a      	strb	r2, [r3, #0]
			rxBuffer++;
 8000fee:	68bb      	ldr	r3, [r7, #8]
 8000ff0:	3301      	adds	r3, #1
 8000ff2:	60bb      	str	r3, [r7, #8]
			size--;
 8000ff4:	79fb      	ldrb	r3, [r7, #7]
 8000ff6:	3b01      	subs	r3, #1
 8000ff8:	71fb      	strb	r3, [r7, #7]
			*rxBuffer = (uint8_t) I2C_handle->pI2Cx->DR;
 8000ffa:	68fb      	ldr	r3, [r7, #12]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	691b      	ldr	r3, [r3, #16]
 8001000:	b2da      	uxtb	r2, r3
 8001002:	68bb      	ldr	r3, [r7, #8]
 8001004:	701a      	strb	r2, [r3, #0]
			rxBuffer++;
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	3301      	adds	r3, #1
 800100a:	60bb      	str	r3, [r7, #8]
			size--;
 800100c:	79fb      	ldrb	r3, [r7, #7]
 800100e:	3b01      	subs	r3, #1
 8001010:	71fb      	strb	r3, [r7, #7]
}
 8001012:	e01e      	b.n	8001052 <I2C_MasterReceiveData+0x190>
	else if (size == 1) {
 8001014:	79fb      	ldrb	r3, [r7, #7]
 8001016:	2b01      	cmp	r3, #1
 8001018:	d11b      	bne.n	8001052 <I2C_MasterReceiveData+0x190>
		I2C_ControlAcking(I2C_handle->pI2Cx, RESET);
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	2100      	movs	r1, #0
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fec7 	bl	8000db4 <I2C_ControlAcking>
		I2C_ClearADDRFlag(I2C_handle->pI2Cx);
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4618      	mov	r0, r3
 800102c:	f7ff feb2 	bl	8000d94 <I2C_ClearADDRFlag>
		while (!GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_RXNE));
 8001030:	bf00      	nop
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	2140      	movs	r1, #64	; 0x40
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff fe4f 	bl	8000cdc <GetFlagStatus>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d0f6      	beq.n	8001032 <I2C_MasterReceiveData+0x170>
		GenerateStopCondition(I2C_handle);
 8001044:	68f8      	ldr	r0, [r7, #12]
 8001046:	f7ff fe70 	bl	8000d2a <GenerateStopCondition>
		rxBuffer = I2C_handle->pI2Cx->DR;
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	691b      	ldr	r3, [r3, #16]
 8001050:	60bb      	str	r3, [r7, #8]
}
 8001052:	bf00      	nop
 8001054:	3710      	adds	r7, #16
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b086      	sub	sp, #24
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d101      	bne.n	800106e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	e22d      	b.n	80014ca <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0301 	and.w	r3, r3, #1
 8001076:	2b00      	cmp	r3, #0
 8001078:	d075      	beq.n	8001166 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800107a:	4ba3      	ldr	r3, [pc, #652]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f003 030c 	and.w	r3, r3, #12
 8001082:	2b04      	cmp	r3, #4
 8001084:	d00c      	beq.n	80010a0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001086:	4ba0      	ldr	r3, [pc, #640]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800108e:	2b08      	cmp	r3, #8
 8001090:	d112      	bne.n	80010b8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001092:	4b9d      	ldr	r3, [pc, #628]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800109a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800109e:	d10b      	bne.n	80010b8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a0:	4b99      	ldr	r3, [pc, #612]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d05b      	beq.n	8001164 <HAL_RCC_OscConfig+0x108>
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d157      	bne.n	8001164 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80010b4:	2301      	movs	r3, #1
 80010b6:	e208      	b.n	80014ca <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80010c0:	d106      	bne.n	80010d0 <HAL_RCC_OscConfig+0x74>
 80010c2:	4b91      	ldr	r3, [pc, #580]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4a90      	ldr	r2, [pc, #576]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80010c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010cc:	6013      	str	r3, [r2, #0]
 80010ce:	e01d      	b.n	800110c <HAL_RCC_OscConfig+0xb0>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80010d8:	d10c      	bne.n	80010f4 <HAL_RCC_OscConfig+0x98>
 80010da:	4b8b      	ldr	r3, [pc, #556]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	4a8a      	ldr	r2, [pc, #552]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80010e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80010e4:	6013      	str	r3, [r2, #0]
 80010e6:	4b88      	ldr	r3, [pc, #544]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	4a87      	ldr	r2, [pc, #540]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80010ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80010f0:	6013      	str	r3, [r2, #0]
 80010f2:	e00b      	b.n	800110c <HAL_RCC_OscConfig+0xb0>
 80010f4:	4b84      	ldr	r3, [pc, #528]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a83      	ldr	r2, [pc, #524]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80010fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010fe:	6013      	str	r3, [r2, #0]
 8001100:	4b81      	ldr	r3, [pc, #516]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a80      	ldr	r2, [pc, #512]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001106:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800110a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	2b00      	cmp	r3, #0
 8001112:	d013      	beq.n	800113c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001114:	f7ff fa44 	bl	80005a0 <HAL_GetTick>
 8001118:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800111a:	e008      	b.n	800112e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800111c:	f7ff fa40 	bl	80005a0 <HAL_GetTick>
 8001120:	4602      	mov	r2, r0
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	1ad3      	subs	r3, r2, r3
 8001126:	2b64      	cmp	r3, #100	; 0x64
 8001128:	d901      	bls.n	800112e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800112a:	2303      	movs	r3, #3
 800112c:	e1cd      	b.n	80014ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112e:	4b76      	ldr	r3, [pc, #472]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d0f0      	beq.n	800111c <HAL_RCC_OscConfig+0xc0>
 800113a:	e014      	b.n	8001166 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800113c:	f7ff fa30 	bl	80005a0 <HAL_GetTick>
 8001140:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001142:	e008      	b.n	8001156 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001144:	f7ff fa2c 	bl	80005a0 <HAL_GetTick>
 8001148:	4602      	mov	r2, r0
 800114a:	693b      	ldr	r3, [r7, #16]
 800114c:	1ad3      	subs	r3, r2, r3
 800114e:	2b64      	cmp	r3, #100	; 0x64
 8001150:	d901      	bls.n	8001156 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001152:	2303      	movs	r3, #3
 8001154:	e1b9      	b.n	80014ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001156:	4b6c      	ldr	r3, [pc, #432]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d1f0      	bne.n	8001144 <HAL_RCC_OscConfig+0xe8>
 8001162:	e000      	b.n	8001166 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001164:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f003 0302 	and.w	r3, r3, #2
 800116e:	2b00      	cmp	r3, #0
 8001170:	d063      	beq.n	800123a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001172:	4b65      	ldr	r3, [pc, #404]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f003 030c 	and.w	r3, r3, #12
 800117a:	2b00      	cmp	r3, #0
 800117c:	d00b      	beq.n	8001196 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800117e:	4b62      	ldr	r3, [pc, #392]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001180:	689b      	ldr	r3, [r3, #8]
 8001182:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001186:	2b08      	cmp	r3, #8
 8001188:	d11c      	bne.n	80011c4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800118a:	4b5f      	ldr	r3, [pc, #380]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 800118c:	685b      	ldr	r3, [r3, #4]
 800118e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001192:	2b00      	cmp	r3, #0
 8001194:	d116      	bne.n	80011c4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001196:	4b5c      	ldr	r3, [pc, #368]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f003 0302 	and.w	r3, r3, #2
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d005      	beq.n	80011ae <HAL_RCC_OscConfig+0x152>
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	2b01      	cmp	r3, #1
 80011a8:	d001      	beq.n	80011ae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80011aa:	2301      	movs	r3, #1
 80011ac:	e18d      	b.n	80014ca <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ae:	4b56      	ldr	r3, [pc, #344]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	691b      	ldr	r3, [r3, #16]
 80011ba:	00db      	lsls	r3, r3, #3
 80011bc:	4952      	ldr	r1, [pc, #328]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80011be:	4313      	orrs	r3, r2
 80011c0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011c2:	e03a      	b.n	800123a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	68db      	ldr	r3, [r3, #12]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d020      	beq.n	800120e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011cc:	4b4f      	ldr	r3, [pc, #316]	; (800130c <HAL_RCC_OscConfig+0x2b0>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80011d2:	f7ff f9e5 	bl	80005a0 <HAL_GetTick>
 80011d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011d8:	e008      	b.n	80011ec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80011da:	f7ff f9e1 	bl	80005a0 <HAL_GetTick>
 80011de:	4602      	mov	r2, r0
 80011e0:	693b      	ldr	r3, [r7, #16]
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	2b02      	cmp	r3, #2
 80011e6:	d901      	bls.n	80011ec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e16e      	b.n	80014ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011ec:	4b46      	ldr	r3, [pc, #280]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f003 0302 	and.w	r3, r3, #2
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d0f0      	beq.n	80011da <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011f8:	4b43      	ldr	r3, [pc, #268]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	691b      	ldr	r3, [r3, #16]
 8001204:	00db      	lsls	r3, r3, #3
 8001206:	4940      	ldr	r1, [pc, #256]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001208:	4313      	orrs	r3, r2
 800120a:	600b      	str	r3, [r1, #0]
 800120c:	e015      	b.n	800123a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800120e:	4b3f      	ldr	r3, [pc, #252]	; (800130c <HAL_RCC_OscConfig+0x2b0>)
 8001210:	2200      	movs	r2, #0
 8001212:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001214:	f7ff f9c4 	bl	80005a0 <HAL_GetTick>
 8001218:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800121a:	e008      	b.n	800122e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800121c:	f7ff f9c0 	bl	80005a0 <HAL_GetTick>
 8001220:	4602      	mov	r2, r0
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	1ad3      	subs	r3, r2, r3
 8001226:	2b02      	cmp	r3, #2
 8001228:	d901      	bls.n	800122e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800122a:	2303      	movs	r3, #3
 800122c:	e14d      	b.n	80014ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800122e:	4b36      	ldr	r3, [pc, #216]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f003 0302 	and.w	r3, r3, #2
 8001236:	2b00      	cmp	r3, #0
 8001238:	d1f0      	bne.n	800121c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f003 0308 	and.w	r3, r3, #8
 8001242:	2b00      	cmp	r3, #0
 8001244:	d030      	beq.n	80012a8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	695b      	ldr	r3, [r3, #20]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d016      	beq.n	800127c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800124e:	4b30      	ldr	r3, [pc, #192]	; (8001310 <HAL_RCC_OscConfig+0x2b4>)
 8001250:	2201      	movs	r2, #1
 8001252:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001254:	f7ff f9a4 	bl	80005a0 <HAL_GetTick>
 8001258:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800125a:	e008      	b.n	800126e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800125c:	f7ff f9a0 	bl	80005a0 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	1ad3      	subs	r3, r2, r3
 8001266:	2b02      	cmp	r3, #2
 8001268:	d901      	bls.n	800126e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800126a:	2303      	movs	r3, #3
 800126c:	e12d      	b.n	80014ca <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800126e:	4b26      	ldr	r3, [pc, #152]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 8001270:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	2b00      	cmp	r3, #0
 8001278:	d0f0      	beq.n	800125c <HAL_RCC_OscConfig+0x200>
 800127a:	e015      	b.n	80012a8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800127c:	4b24      	ldr	r3, [pc, #144]	; (8001310 <HAL_RCC_OscConfig+0x2b4>)
 800127e:	2200      	movs	r2, #0
 8001280:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001282:	f7ff f98d 	bl	80005a0 <HAL_GetTick>
 8001286:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001288:	e008      	b.n	800129c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800128a:	f7ff f989 	bl	80005a0 <HAL_GetTick>
 800128e:	4602      	mov	r2, r0
 8001290:	693b      	ldr	r3, [r7, #16]
 8001292:	1ad3      	subs	r3, r2, r3
 8001294:	2b02      	cmp	r3, #2
 8001296:	d901      	bls.n	800129c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001298:	2303      	movs	r3, #3
 800129a:	e116      	b.n	80014ca <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800129c:	4b1a      	ldr	r3, [pc, #104]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 800129e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80012a0:	f003 0302 	and.w	r3, r3, #2
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d1f0      	bne.n	800128a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0304 	and.w	r3, r3, #4
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	f000 80a0 	beq.w	80013f6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012b6:	2300      	movs	r3, #0
 80012b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012ba:	4b13      	ldr	r3, [pc, #76]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80012bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d10f      	bne.n	80012e6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	60fb      	str	r3, [r7, #12]
 80012ca:	4b0f      	ldr	r3, [pc, #60]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80012cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ce:	4a0e      	ldr	r2, [pc, #56]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80012d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80012d4:	6413      	str	r3, [r2, #64]	; 0x40
 80012d6:	4b0c      	ldr	r3, [pc, #48]	; (8001308 <HAL_RCC_OscConfig+0x2ac>)
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80012de:	60fb      	str	r3, [r7, #12]
 80012e0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80012e2:	2301      	movs	r3, #1
 80012e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e6:	4b0b      	ldr	r3, [pc, #44]	; (8001314 <HAL_RCC_OscConfig+0x2b8>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d121      	bne.n	8001336 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012f2:	4b08      	ldr	r3, [pc, #32]	; (8001314 <HAL_RCC_OscConfig+0x2b8>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a07      	ldr	r2, [pc, #28]	; (8001314 <HAL_RCC_OscConfig+0x2b8>)
 80012f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012fe:	f7ff f94f 	bl	80005a0 <HAL_GetTick>
 8001302:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001304:	e011      	b.n	800132a <HAL_RCC_OscConfig+0x2ce>
 8001306:	bf00      	nop
 8001308:	40023800 	.word	0x40023800
 800130c:	42470000 	.word	0x42470000
 8001310:	42470e80 	.word	0x42470e80
 8001314:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001318:	f7ff f942 	bl	80005a0 <HAL_GetTick>
 800131c:	4602      	mov	r2, r0
 800131e:	693b      	ldr	r3, [r7, #16]
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	2b02      	cmp	r3, #2
 8001324:	d901      	bls.n	800132a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8001326:	2303      	movs	r3, #3
 8001328:	e0cf      	b.n	80014ca <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800132a:	4b6a      	ldr	r3, [pc, #424]	; (80014d4 <HAL_RCC_OscConfig+0x478>)
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001332:	2b00      	cmp	r3, #0
 8001334:	d0f0      	beq.n	8001318 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	2b01      	cmp	r3, #1
 800133c:	d106      	bne.n	800134c <HAL_RCC_OscConfig+0x2f0>
 800133e:	4b66      	ldr	r3, [pc, #408]	; (80014d8 <HAL_RCC_OscConfig+0x47c>)
 8001340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001342:	4a65      	ldr	r2, [pc, #404]	; (80014d8 <HAL_RCC_OscConfig+0x47c>)
 8001344:	f043 0301 	orr.w	r3, r3, #1
 8001348:	6713      	str	r3, [r2, #112]	; 0x70
 800134a:	e01c      	b.n	8001386 <HAL_RCC_OscConfig+0x32a>
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	2b05      	cmp	r3, #5
 8001352:	d10c      	bne.n	800136e <HAL_RCC_OscConfig+0x312>
 8001354:	4b60      	ldr	r3, [pc, #384]	; (80014d8 <HAL_RCC_OscConfig+0x47c>)
 8001356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001358:	4a5f      	ldr	r2, [pc, #380]	; (80014d8 <HAL_RCC_OscConfig+0x47c>)
 800135a:	f043 0304 	orr.w	r3, r3, #4
 800135e:	6713      	str	r3, [r2, #112]	; 0x70
 8001360:	4b5d      	ldr	r3, [pc, #372]	; (80014d8 <HAL_RCC_OscConfig+0x47c>)
 8001362:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001364:	4a5c      	ldr	r2, [pc, #368]	; (80014d8 <HAL_RCC_OscConfig+0x47c>)
 8001366:	f043 0301 	orr.w	r3, r3, #1
 800136a:	6713      	str	r3, [r2, #112]	; 0x70
 800136c:	e00b      	b.n	8001386 <HAL_RCC_OscConfig+0x32a>
 800136e:	4b5a      	ldr	r3, [pc, #360]	; (80014d8 <HAL_RCC_OscConfig+0x47c>)
 8001370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001372:	4a59      	ldr	r2, [pc, #356]	; (80014d8 <HAL_RCC_OscConfig+0x47c>)
 8001374:	f023 0301 	bic.w	r3, r3, #1
 8001378:	6713      	str	r3, [r2, #112]	; 0x70
 800137a:	4b57      	ldr	r3, [pc, #348]	; (80014d8 <HAL_RCC_OscConfig+0x47c>)
 800137c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800137e:	4a56      	ldr	r2, [pc, #344]	; (80014d8 <HAL_RCC_OscConfig+0x47c>)
 8001380:	f023 0304 	bic.w	r3, r3, #4
 8001384:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	689b      	ldr	r3, [r3, #8]
 800138a:	2b00      	cmp	r3, #0
 800138c:	d015      	beq.n	80013ba <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800138e:	f7ff f907 	bl	80005a0 <HAL_GetTick>
 8001392:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001394:	e00a      	b.n	80013ac <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001396:	f7ff f903 	bl	80005a0 <HAL_GetTick>
 800139a:	4602      	mov	r2, r0
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	1ad3      	subs	r3, r2, r3
 80013a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80013a4:	4293      	cmp	r3, r2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e08e      	b.n	80014ca <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80013ac:	4b4a      	ldr	r3, [pc, #296]	; (80014d8 <HAL_RCC_OscConfig+0x47c>)
 80013ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0ee      	beq.n	8001396 <HAL_RCC_OscConfig+0x33a>
 80013b8:	e014      	b.n	80013e4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013ba:	f7ff f8f1 	bl	80005a0 <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013c0:	e00a      	b.n	80013d8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013c2:	f7ff f8ed 	bl	80005a0 <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80013d0:	4293      	cmp	r3, r2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e078      	b.n	80014ca <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013d8:	4b3f      	ldr	r3, [pc, #252]	; (80014d8 <HAL_RCC_OscConfig+0x47c>)
 80013da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80013dc:	f003 0302 	and.w	r3, r3, #2
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1ee      	bne.n	80013c2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80013e4:	7dfb      	ldrb	r3, [r7, #23]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d105      	bne.n	80013f6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013ea:	4b3b      	ldr	r3, [pc, #236]	; (80014d8 <HAL_RCC_OscConfig+0x47c>)
 80013ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ee:	4a3a      	ldr	r2, [pc, #232]	; (80014d8 <HAL_RCC_OscConfig+0x47c>)
 80013f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013f4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d064      	beq.n	80014c8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80013fe:	4b36      	ldr	r3, [pc, #216]	; (80014d8 <HAL_RCC_OscConfig+0x47c>)
 8001400:	689b      	ldr	r3, [r3, #8]
 8001402:	f003 030c 	and.w	r3, r3, #12
 8001406:	2b08      	cmp	r3, #8
 8001408:	d05c      	beq.n	80014c4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	699b      	ldr	r3, [r3, #24]
 800140e:	2b02      	cmp	r3, #2
 8001410:	d141      	bne.n	8001496 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001412:	4b32      	ldr	r3, [pc, #200]	; (80014dc <HAL_RCC_OscConfig+0x480>)
 8001414:	2200      	movs	r2, #0
 8001416:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001418:	f7ff f8c2 	bl	80005a0 <HAL_GetTick>
 800141c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800141e:	e008      	b.n	8001432 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001420:	f7ff f8be 	bl	80005a0 <HAL_GetTick>
 8001424:	4602      	mov	r2, r0
 8001426:	693b      	ldr	r3, [r7, #16]
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	2b02      	cmp	r3, #2
 800142c:	d901      	bls.n	8001432 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800142e:	2303      	movs	r3, #3
 8001430:	e04b      	b.n	80014ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001432:	4b29      	ldr	r3, [pc, #164]	; (80014d8 <HAL_RCC_OscConfig+0x47c>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1f0      	bne.n	8001420 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	69da      	ldr	r2, [r3, #28]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	6a1b      	ldr	r3, [r3, #32]
 8001446:	431a      	orrs	r2, r3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800144c:	019b      	lsls	r3, r3, #6
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001454:	085b      	lsrs	r3, r3, #1
 8001456:	3b01      	subs	r3, #1
 8001458:	041b      	lsls	r3, r3, #16
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001460:	061b      	lsls	r3, r3, #24
 8001462:	491d      	ldr	r1, [pc, #116]	; (80014d8 <HAL_RCC_OscConfig+0x47c>)
 8001464:	4313      	orrs	r3, r2
 8001466:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001468:	4b1c      	ldr	r3, [pc, #112]	; (80014dc <HAL_RCC_OscConfig+0x480>)
 800146a:	2201      	movs	r2, #1
 800146c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800146e:	f7ff f897 	bl	80005a0 <HAL_GetTick>
 8001472:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001474:	e008      	b.n	8001488 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001476:	f7ff f893 	bl	80005a0 <HAL_GetTick>
 800147a:	4602      	mov	r2, r0
 800147c:	693b      	ldr	r3, [r7, #16]
 800147e:	1ad3      	subs	r3, r2, r3
 8001480:	2b02      	cmp	r3, #2
 8001482:	d901      	bls.n	8001488 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001484:	2303      	movs	r3, #3
 8001486:	e020      	b.n	80014ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001488:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <HAL_RCC_OscConfig+0x47c>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001490:	2b00      	cmp	r3, #0
 8001492:	d0f0      	beq.n	8001476 <HAL_RCC_OscConfig+0x41a>
 8001494:	e018      	b.n	80014c8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001496:	4b11      	ldr	r3, [pc, #68]	; (80014dc <HAL_RCC_OscConfig+0x480>)
 8001498:	2200      	movs	r2, #0
 800149a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800149c:	f7ff f880 	bl	80005a0 <HAL_GetTick>
 80014a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014a2:	e008      	b.n	80014b6 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014a4:	f7ff f87c 	bl	80005a0 <HAL_GetTick>
 80014a8:	4602      	mov	r2, r0
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	1ad3      	subs	r3, r2, r3
 80014ae:	2b02      	cmp	r3, #2
 80014b0:	d901      	bls.n	80014b6 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 80014b2:	2303      	movs	r3, #3
 80014b4:	e009      	b.n	80014ca <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <HAL_RCC_OscConfig+0x47c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f0      	bne.n	80014a4 <HAL_RCC_OscConfig+0x448>
 80014c2:	e001      	b.n	80014c8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e000      	b.n	80014ca <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80014c8:	2300      	movs	r3, #0
}
 80014ca:	4618      	mov	r0, r3
 80014cc:	3718      	adds	r7, #24
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bd80      	pop	{r7, pc}
 80014d2:	bf00      	nop
 80014d4:	40007000 	.word	0x40007000
 80014d8:	40023800 	.word	0x40023800
 80014dc:	42470060 	.word	0x42470060

080014e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
 80014e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d101      	bne.n	80014f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80014f0:	2301      	movs	r3, #1
 80014f2:	e0ca      	b.n	800168a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80014f4:	4b67      	ldr	r3, [pc, #412]	; (8001694 <HAL_RCC_ClockConfig+0x1b4>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f003 030f 	and.w	r3, r3, #15
 80014fc:	683a      	ldr	r2, [r7, #0]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d90c      	bls.n	800151c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001502:	4b64      	ldr	r3, [pc, #400]	; (8001694 <HAL_RCC_ClockConfig+0x1b4>)
 8001504:	683a      	ldr	r2, [r7, #0]
 8001506:	b2d2      	uxtb	r2, r2
 8001508:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800150a:	4b62      	ldr	r3, [pc, #392]	; (8001694 <HAL_RCC_ClockConfig+0x1b4>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	683a      	ldr	r2, [r7, #0]
 8001514:	429a      	cmp	r2, r3
 8001516:	d001      	beq.n	800151c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001518:	2301      	movs	r3, #1
 800151a:	e0b6      	b.n	800168a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f003 0302 	and.w	r3, r3, #2
 8001524:	2b00      	cmp	r3, #0
 8001526:	d020      	beq.n	800156a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	f003 0304 	and.w	r3, r3, #4
 8001530:	2b00      	cmp	r3, #0
 8001532:	d005      	beq.n	8001540 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001534:	4b58      	ldr	r3, [pc, #352]	; (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 8001536:	689b      	ldr	r3, [r3, #8]
 8001538:	4a57      	ldr	r2, [pc, #348]	; (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 800153a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800153e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f003 0308 	and.w	r3, r3, #8
 8001548:	2b00      	cmp	r3, #0
 800154a:	d005      	beq.n	8001558 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800154c:	4b52      	ldr	r3, [pc, #328]	; (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 800154e:	689b      	ldr	r3, [r3, #8]
 8001550:	4a51      	ldr	r2, [pc, #324]	; (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 8001552:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001556:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001558:	4b4f      	ldr	r3, [pc, #316]	; (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	494c      	ldr	r1, [pc, #304]	; (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 8001566:	4313      	orrs	r3, r2
 8001568:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b00      	cmp	r3, #0
 8001574:	d044      	beq.n	8001600 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	2b01      	cmp	r3, #1
 800157c:	d107      	bne.n	800158e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800157e:	4b46      	ldr	r3, [pc, #280]	; (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d119      	bne.n	80015be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800158a:	2301      	movs	r3, #1
 800158c:	e07d      	b.n	800168a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	2b02      	cmp	r3, #2
 8001594:	d003      	beq.n	800159e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800159a:	2b03      	cmp	r3, #3
 800159c:	d107      	bne.n	80015ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800159e:	4b3e      	ldr	r3, [pc, #248]	; (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d109      	bne.n	80015be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e06d      	b.n	800168a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015ae:	4b3a      	ldr	r3, [pc, #232]	; (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0302 	and.w	r3, r3, #2
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d101      	bne.n	80015be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015ba:	2301      	movs	r3, #1
 80015bc:	e065      	b.n	800168a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015be:	4b36      	ldr	r3, [pc, #216]	; (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 80015c0:	689b      	ldr	r3, [r3, #8]
 80015c2:	f023 0203 	bic.w	r2, r3, #3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	685b      	ldr	r3, [r3, #4]
 80015ca:	4933      	ldr	r1, [pc, #204]	; (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015d0:	f7fe ffe6 	bl	80005a0 <HAL_GetTick>
 80015d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015d6:	e00a      	b.n	80015ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015d8:	f7fe ffe2 	bl	80005a0 <HAL_GetTick>
 80015dc:	4602      	mov	r2, r0
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	1ad3      	subs	r3, r2, r3
 80015e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d901      	bls.n	80015ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80015ea:	2303      	movs	r3, #3
 80015ec:	e04d      	b.n	800168a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ee:	4b2a      	ldr	r3, [pc, #168]	; (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 80015f0:	689b      	ldr	r3, [r3, #8]
 80015f2:	f003 020c 	and.w	r2, r3, #12
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	685b      	ldr	r3, [r3, #4]
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	429a      	cmp	r2, r3
 80015fe:	d1eb      	bne.n	80015d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001600:	4b24      	ldr	r3, [pc, #144]	; (8001694 <HAL_RCC_ClockConfig+0x1b4>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 030f 	and.w	r3, r3, #15
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	429a      	cmp	r2, r3
 800160c:	d20c      	bcs.n	8001628 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800160e:	4b21      	ldr	r3, [pc, #132]	; (8001694 <HAL_RCC_ClockConfig+0x1b4>)
 8001610:	683a      	ldr	r2, [r7, #0]
 8001612:	b2d2      	uxtb	r2, r2
 8001614:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001616:	4b1f      	ldr	r3, [pc, #124]	; (8001694 <HAL_RCC_ClockConfig+0x1b4>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 030f 	and.w	r3, r3, #15
 800161e:	683a      	ldr	r2, [r7, #0]
 8001620:	429a      	cmp	r2, r3
 8001622:	d001      	beq.n	8001628 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e030      	b.n	800168a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0304 	and.w	r3, r3, #4
 8001630:	2b00      	cmp	r3, #0
 8001632:	d008      	beq.n	8001646 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001634:	4b18      	ldr	r3, [pc, #96]	; (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	68db      	ldr	r3, [r3, #12]
 8001640:	4915      	ldr	r1, [pc, #84]	; (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 8001642:	4313      	orrs	r3, r2
 8001644:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	2b00      	cmp	r3, #0
 8001650:	d009      	beq.n	8001666 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001652:	4b11      	ldr	r3, [pc, #68]	; (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 8001654:	689b      	ldr	r3, [r3, #8]
 8001656:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	691b      	ldr	r3, [r3, #16]
 800165e:	00db      	lsls	r3, r3, #3
 8001660:	490d      	ldr	r1, [pc, #52]	; (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 8001662:	4313      	orrs	r3, r2
 8001664:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001666:	f000 f81d 	bl	80016a4 <HAL_RCC_GetSysClockFreq>
 800166a:	4601      	mov	r1, r0
 800166c:	4b0a      	ldr	r3, [pc, #40]	; (8001698 <HAL_RCC_ClockConfig+0x1b8>)
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	091b      	lsrs	r3, r3, #4
 8001672:	f003 030f 	and.w	r3, r3, #15
 8001676:	4a09      	ldr	r2, [pc, #36]	; (800169c <HAL_RCC_ClockConfig+0x1bc>)
 8001678:	5cd3      	ldrb	r3, [r2, r3]
 800167a:	fa21 f303 	lsr.w	r3, r1, r3
 800167e:	4a08      	ldr	r2, [pc, #32]	; (80016a0 <HAL_RCC_ClockConfig+0x1c0>)
 8001680:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001682:	2000      	movs	r0, #0
 8001684:	f7fe ff48 	bl	8000518 <HAL_InitTick>

  return HAL_OK;
 8001688:	2300      	movs	r3, #0
}
 800168a:	4618      	mov	r0, r3
 800168c:	3710      	adds	r7, #16
 800168e:	46bd      	mov	sp, r7
 8001690:	bd80      	pop	{r7, pc}
 8001692:	bf00      	nop
 8001694:	40023c00 	.word	0x40023c00
 8001698:	40023800 	.word	0x40023800
 800169c:	08001c98 	.word	0x08001c98
 80016a0:	20000008 	.word	0x20000008

080016a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80016aa:	2300      	movs	r3, #0
 80016ac:	607b      	str	r3, [r7, #4]
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	2300      	movs	r3, #0
 80016b4:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80016ba:	4b50      	ldr	r3, [pc, #320]	; (80017fc <HAL_RCC_GetSysClockFreq+0x158>)
 80016bc:	689b      	ldr	r3, [r3, #8]
 80016be:	f003 030c 	and.w	r3, r3, #12
 80016c2:	2b04      	cmp	r3, #4
 80016c4:	d007      	beq.n	80016d6 <HAL_RCC_GetSysClockFreq+0x32>
 80016c6:	2b08      	cmp	r3, #8
 80016c8:	d008      	beq.n	80016dc <HAL_RCC_GetSysClockFreq+0x38>
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	f040 808d 	bne.w	80017ea <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80016d0:	4b4b      	ldr	r3, [pc, #300]	; (8001800 <HAL_RCC_GetSysClockFreq+0x15c>)
 80016d2:	60bb      	str	r3, [r7, #8]
       break;
 80016d4:	e08c      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80016d6:	4b4b      	ldr	r3, [pc, #300]	; (8001804 <HAL_RCC_GetSysClockFreq+0x160>)
 80016d8:	60bb      	str	r3, [r7, #8]
      break;
 80016da:	e089      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80016dc:	4b47      	ldr	r3, [pc, #284]	; (80017fc <HAL_RCC_GetSysClockFreq+0x158>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016e4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80016e6:	4b45      	ldr	r3, [pc, #276]	; (80017fc <HAL_RCC_GetSysClockFreq+0x158>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d023      	beq.n	800173a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80016f2:	4b42      	ldr	r3, [pc, #264]	; (80017fc <HAL_RCC_GetSysClockFreq+0x158>)
 80016f4:	685b      	ldr	r3, [r3, #4]
 80016f6:	099b      	lsrs	r3, r3, #6
 80016f8:	f04f 0400 	mov.w	r4, #0
 80016fc:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001700:	f04f 0200 	mov.w	r2, #0
 8001704:	ea03 0501 	and.w	r5, r3, r1
 8001708:	ea04 0602 	and.w	r6, r4, r2
 800170c:	4a3d      	ldr	r2, [pc, #244]	; (8001804 <HAL_RCC_GetSysClockFreq+0x160>)
 800170e:	fb02 f106 	mul.w	r1, r2, r6
 8001712:	2200      	movs	r2, #0
 8001714:	fb02 f205 	mul.w	r2, r2, r5
 8001718:	440a      	add	r2, r1
 800171a:	493a      	ldr	r1, [pc, #232]	; (8001804 <HAL_RCC_GetSysClockFreq+0x160>)
 800171c:	fba5 0101 	umull	r0, r1, r5, r1
 8001720:	1853      	adds	r3, r2, r1
 8001722:	4619      	mov	r1, r3
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f04f 0400 	mov.w	r4, #0
 800172a:	461a      	mov	r2, r3
 800172c:	4623      	mov	r3, r4
 800172e:	f7fe fd51 	bl	80001d4 <__aeabi_uldivmod>
 8001732:	4603      	mov	r3, r0
 8001734:	460c      	mov	r4, r1
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	e049      	b.n	80017ce <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800173a:	4b30      	ldr	r3, [pc, #192]	; (80017fc <HAL_RCC_GetSysClockFreq+0x158>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	099b      	lsrs	r3, r3, #6
 8001740:	f04f 0400 	mov.w	r4, #0
 8001744:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001748:	f04f 0200 	mov.w	r2, #0
 800174c:	ea03 0501 	and.w	r5, r3, r1
 8001750:	ea04 0602 	and.w	r6, r4, r2
 8001754:	4629      	mov	r1, r5
 8001756:	4632      	mov	r2, r6
 8001758:	f04f 0300 	mov.w	r3, #0
 800175c:	f04f 0400 	mov.w	r4, #0
 8001760:	0154      	lsls	r4, r2, #5
 8001762:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001766:	014b      	lsls	r3, r1, #5
 8001768:	4619      	mov	r1, r3
 800176a:	4622      	mov	r2, r4
 800176c:	1b49      	subs	r1, r1, r5
 800176e:	eb62 0206 	sbc.w	r2, r2, r6
 8001772:	f04f 0300 	mov.w	r3, #0
 8001776:	f04f 0400 	mov.w	r4, #0
 800177a:	0194      	lsls	r4, r2, #6
 800177c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001780:	018b      	lsls	r3, r1, #6
 8001782:	1a5b      	subs	r3, r3, r1
 8001784:	eb64 0402 	sbc.w	r4, r4, r2
 8001788:	f04f 0100 	mov.w	r1, #0
 800178c:	f04f 0200 	mov.w	r2, #0
 8001790:	00e2      	lsls	r2, r4, #3
 8001792:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001796:	00d9      	lsls	r1, r3, #3
 8001798:	460b      	mov	r3, r1
 800179a:	4614      	mov	r4, r2
 800179c:	195b      	adds	r3, r3, r5
 800179e:	eb44 0406 	adc.w	r4, r4, r6
 80017a2:	f04f 0100 	mov.w	r1, #0
 80017a6:	f04f 0200 	mov.w	r2, #0
 80017aa:	02a2      	lsls	r2, r4, #10
 80017ac:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80017b0:	0299      	lsls	r1, r3, #10
 80017b2:	460b      	mov	r3, r1
 80017b4:	4614      	mov	r4, r2
 80017b6:	4618      	mov	r0, r3
 80017b8:	4621      	mov	r1, r4
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	f04f 0400 	mov.w	r4, #0
 80017c0:	461a      	mov	r2, r3
 80017c2:	4623      	mov	r3, r4
 80017c4:	f7fe fd06 	bl	80001d4 <__aeabi_uldivmod>
 80017c8:	4603      	mov	r3, r0
 80017ca:	460c      	mov	r4, r1
 80017cc:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017ce:	4b0b      	ldr	r3, [pc, #44]	; (80017fc <HAL_RCC_GetSysClockFreq+0x158>)
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	0c1b      	lsrs	r3, r3, #16
 80017d4:	f003 0303 	and.w	r3, r3, #3
 80017d8:	3301      	adds	r3, #1
 80017da:	005b      	lsls	r3, r3, #1
 80017dc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80017de:	68fa      	ldr	r2, [r7, #12]
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80017e6:	60bb      	str	r3, [r7, #8]
      break;
 80017e8:	e002      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80017ea:	4b05      	ldr	r3, [pc, #20]	; (8001800 <HAL_RCC_GetSysClockFreq+0x15c>)
 80017ec:	60bb      	str	r3, [r7, #8]
      break;
 80017ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 80017f0:	68bb      	ldr	r3, [r7, #8]
}
 80017f2:	4618      	mov	r0, r3
 80017f4:	3714      	adds	r7, #20
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800
 8001800:	00f42400 	.word	0x00f42400
 8001804:	017d7840 	.word	0x017d7840

08001808 <I2C_Initilization>:
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */

I2C_Handle_t I2C_Initilization()
{
 8001808:	b590      	push	{r4, r7, lr}
 800180a:	b087      	sub	sp, #28
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	I2C_Handle_t I2C1_handle;
	I2C1_handle.pI2Cx = I2C1;
 8001810:	4b0d      	ldr	r3, [pc, #52]	; (8001848 <I2C_Initilization+0x40>)
 8001812:	60fb      	str	r3, [r7, #12]
	I2C1_handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8001814:	2301      	movs	r3, #1
 8001816:	757b      	strb	r3, [r7, #21]
	I2C1_handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <I2C_Initilization+0x44>)
 800181a:	613b      	str	r3, [r7, #16]
	I2C1_handle.I2C_Config.I2C_DeviceAddress = MCP9808_ADDR;
 800181c:	2318      	movs	r3, #24
 800181e:	753b      	strb	r3, [r7, #20]
	I2C1_handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8001820:	2300      	movs	r3, #0
 8001822:	82fb      	strh	r3, [r7, #22]
	I2C_Init(&I2C1_handle);
 8001824:	f107 030c 	add.w	r3, r7, #12
 8001828:	4618      	mov	r0, r3
 800182a:	f7ff f9e3 	bl	8000bf4 <I2C_Init>

	return I2C1_handle;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	461c      	mov	r4, r3
 8001832:	f107 030c 	add.w	r3, r7, #12
 8001836:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800183a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
//	uint8_t readBytes = 2;	 // get size of rxBuffer (todo)
//
////	HAL_StatusTypeDef I2C_transmitStatus = I2C_MasterTransmitData (&I2C1_handle, data, size);
//
//	I2C_MasterReceiveData (&I2C1_handle, rxBuffer, readBytes);
}
 800183e:	6878      	ldr	r0, [r7, #4]
 8001840:	371c      	adds	r7, #28
 8001842:	46bd      	mov	sp, r7
 8001844:	bd90      	pop	{r4, r7, pc}
 8001846:	bf00      	nop
 8001848:	40005400 	.word	0x40005400
 800184c:	000186a0 	.word	0x000186a0

08001850 <ReadTemperature>:

void ReadTemperature(I2C_Handle_t I2C1_handle) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b086      	sub	sp, #24
 8001854:	af00      	add	r7, sp, #0
 8001856:	1d3b      	adds	r3, r7, #4
 8001858:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	uint8_t txBuffer[1] = {MCP9808_REG_AMBIENT_TEMP_REG};
 800185c:	2305      	movs	r3, #5
 800185e:	753b      	strb	r3, [r7, #20]
	uint8_t rxBuffer[2] = {0};
 8001860:	2300      	movs	r3, #0
 8001862:	823b      	strh	r3, [r7, #16]

	uint8_t txSize = sizeof(txBuffer)/sizeof(txBuffer[0]);
 8001864:	2301      	movs	r3, #1
 8001866:	75fb      	strb	r3, [r7, #23]
	uint8_t readBytes = sizeof(rxBuffer)/sizeof(rxBuffer[0]);
 8001868:	2302      	movs	r3, #2
 800186a:	75bb      	strb	r3, [r7, #22]

	// specify the register address where temperature values will be read from
	I2C_MasterRequestWrite(&I2C1_handle, txBuffer, txSize);
 800186c:	7dfa      	ldrb	r2, [r7, #23]
 800186e:	f107 0114 	add.w	r1, r7, #20
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	4618      	mov	r0, r3
 8001876:	f7ff fab5 	bl	8000de4 <I2C_MasterRequestWrite>

	// request the data from the sensor
	I2C_MasterReceiveData (&I2C1_handle, rxBuffer, readBytes);
 800187a:	7dba      	ldrb	r2, [r7, #22]
 800187c:	f107 0110 	add.w	r1, r7, #16
 8001880:	1d3b      	adds	r3, r7, #4
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fb1d 	bl	8000ec2 <I2C_MasterReceiveData>

	// todo : process data


}
 8001888:	bf00      	nop
 800188a:	3718      	adds	r7, #24
 800188c:	46bd      	mov	sp, r7
 800188e:	bd80      	pop	{r7, pc}

08001890 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b084      	sub	sp, #16
 8001894:	af00      	add	r7, sp, #0
	HAL_Init();
 8001896:	f7fe fe1d 	bl	80004d4 <HAL_Init>

  /* Configure the system clock */
	SystemClock_Config();
 800189a:	f000 f815 	bl	80018c8 <SystemClock_Config>

  /* Initialize all configured peripherals */
	MX_GPIO_Init();
 800189e:	f000 f873 	bl	8001988 <MX_GPIO_Init>

	I2C_Handle_t I2C_Init = I2C_Initilization();
 80018a2:	463b      	mov	r3, r7
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ffaf 	bl	8001808 <I2C_Initilization>

	for (int i = 0; i < 2; i++) {
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	e007      	b.n	80018c0 <main+0x30>
		ReadTemperature(I2C_Init);
 80018b0:	463b      	mov	r3, r7
 80018b2:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80018b6:	f7ff ffcb 	bl	8001850 <ReadTemperature>
	for (int i = 0; i < 2; i++) {
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	3301      	adds	r3, #1
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	ddf4      	ble.n	80018b0 <main+0x20>
	}

	while (1);
 80018c6:	e7fe      	b.n	80018c6 <main+0x36>

080018c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b094      	sub	sp, #80	; 0x50
 80018cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ce:	f107 0320 	add.w	r3, r7, #32
 80018d2:	2230      	movs	r2, #48	; 0x30
 80018d4:	2100      	movs	r1, #0
 80018d6:	4618      	mov	r0, r3
 80018d8:	f000 f9ca 	bl	8001c70 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018dc:	f107 030c 	add.w	r3, r7, #12
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ec:	2300      	movs	r3, #0
 80018ee:	60bb      	str	r3, [r7, #8]
 80018f0:	4b23      	ldr	r3, [pc, #140]	; (8001980 <SystemClock_Config+0xb8>)
 80018f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f4:	4a22      	ldr	r2, [pc, #136]	; (8001980 <SystemClock_Config+0xb8>)
 80018f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018fa:	6413      	str	r3, [r2, #64]	; 0x40
 80018fc:	4b20      	ldr	r3, [pc, #128]	; (8001980 <SystemClock_Config+0xb8>)
 80018fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001904:	60bb      	str	r3, [r7, #8]
 8001906:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001908:	2300      	movs	r3, #0
 800190a:	607b      	str	r3, [r7, #4]
 800190c:	4b1d      	ldr	r3, [pc, #116]	; (8001984 <SystemClock_Config+0xbc>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001914:	4a1b      	ldr	r2, [pc, #108]	; (8001984 <SystemClock_Config+0xbc>)
 8001916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800191a:	6013      	str	r3, [r2, #0]
 800191c:	4b19      	ldr	r3, [pc, #100]	; (8001984 <SystemClock_Config+0xbc>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001928:	2302      	movs	r3, #2
 800192a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800192c:	2301      	movs	r3, #1
 800192e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001930:	2310      	movs	r3, #16
 8001932:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001934:	2300      	movs	r3, #0
 8001936:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001938:	f107 0320 	add.w	r3, r7, #32
 800193c:	4618      	mov	r0, r3
 800193e:	f7ff fb8d 	bl	800105c <HAL_RCC_OscConfig>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001948:	f000 f8a2 	bl	8001a90 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800194c:	230f      	movs	r3, #15
 800194e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001950:	2300      	movs	r3, #0
 8001952:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001958:	2300      	movs	r3, #0
 800195a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800195c:	2300      	movs	r3, #0
 800195e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001960:	f107 030c 	add.w	r3, r7, #12
 8001964:	2100      	movs	r1, #0
 8001966:	4618      	mov	r0, r3
 8001968:	f7ff fdba 	bl	80014e0 <HAL_RCC_ClockConfig>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8001972:	f000 f88d 	bl	8001a90 <Error_Handler>
  }
}
 8001976:	bf00      	nop
 8001978:	3750      	adds	r7, #80	; 0x50
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	40023800 	.word	0x40023800
 8001984:	40007000 	.word	0x40007000

08001988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b088      	sub	sp, #32
 800198c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198e:	f107 030c 	add.w	r3, r7, #12
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	60da      	str	r2, [r3, #12]
 800199c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800199e:	2300      	movs	r3, #0
 80019a0:	60bb      	str	r3, [r7, #8]
 80019a2:	4b36      	ldr	r3, [pc, #216]	; (8001a7c <MX_GPIO_Init+0xf4>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	4a35      	ldr	r2, [pc, #212]	; (8001a7c <MX_GPIO_Init+0xf4>)
 80019a8:	f043 0304 	orr.w	r3, r3, #4
 80019ac:	6313      	str	r3, [r2, #48]	; 0x30
 80019ae:	4b33      	ldr	r3, [pc, #204]	; (8001a7c <MX_GPIO_Init+0xf4>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	f003 0304 	and.w	r3, r3, #4
 80019b6:	60bb      	str	r3, [r7, #8]
 80019b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ba:	2300      	movs	r3, #0
 80019bc:	607b      	str	r3, [r7, #4]
 80019be:	4b2f      	ldr	r3, [pc, #188]	; (8001a7c <MX_GPIO_Init+0xf4>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	4a2e      	ldr	r2, [pc, #184]	; (8001a7c <MX_GPIO_Init+0xf4>)
 80019c4:	f043 0301 	orr.w	r3, r3, #1
 80019c8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ca:	4b2c      	ldr	r3, [pc, #176]	; (8001a7c <MX_GPIO_Init+0xf4>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	f003 0301 	and.w	r3, r3, #1
 80019d2:	607b      	str	r3, [r7, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d6:	2300      	movs	r3, #0
 80019d8:	603b      	str	r3, [r7, #0]
 80019da:	4b28      	ldr	r3, [pc, #160]	; (8001a7c <MX_GPIO_Init+0xf4>)
 80019dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019de:	4a27      	ldr	r2, [pc, #156]	; (8001a7c <MX_GPIO_Init+0xf4>)
 80019e0:	f043 0302 	orr.w	r3, r3, #2
 80019e4:	6313      	str	r3, [r2, #48]	; 0x30
 80019e6:	4b25      	ldr	r3, [pc, #148]	; (8001a7c <MX_GPIO_Init+0xf4>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	f003 0302 	and.w	r3, r3, #2
 80019ee:	603b      	str	r3, [r7, #0]
 80019f0:	683b      	ldr	r3, [r7, #0]

  /* GPIO I2C Clock Enable */
//  __HAL_RCC_I2C1_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 80019f2:	2200      	movs	r2, #0
 80019f4:	2140      	movs	r1, #64	; 0x40
 80019f6:	4822      	ldr	r0, [pc, #136]	; (8001a80 <MX_GPIO_Init+0xf8>)
 80019f8:	f7ff f872 	bl	8000ae0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80019fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a02:	4b20      	ldr	r3, [pc, #128]	; (8001a84 <MX_GPIO_Init+0xfc>)
 8001a04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a0a:	f107 030c 	add.w	r3, r7, #12
 8001a0e:	4619      	mov	r1, r3
 8001a10:	481d      	ldr	r0, [pc, #116]	; (8001a88 <MX_GPIO_Init+0x100>)
 8001a12:	f7fe fee3 	bl	80007dc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a16:	2340      	movs	r3, #64	; 0x40
 8001a18:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a22:	2300      	movs	r3, #0
 8001a24:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a26:	f107 030c 	add.w	r3, r7, #12
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4814      	ldr	r0, [pc, #80]	; (8001a80 <MX_GPIO_Init+0xf8>)
 8001a2e:	f7fe fed5 	bl	80007dc <HAL_GPIO_Init>

  /* Configure I2C */
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a32:	2312      	movs	r3, #18
 8001a34:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a3e:	2304      	movs	r3, #4
 8001a40:	61fb      	str	r3, [r7, #28]

  // scl
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001a42:	2340      	movs	r3, #64	; 0x40
 8001a44:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a46:	f107 030c 	add.w	r3, r7, #12
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	480f      	ldr	r0, [pc, #60]	; (8001a8c <MX_GPIO_Init+0x104>)
 8001a4e:	f7fe fec5 	bl	80007dc <HAL_GPIO_Init>

  // sdata
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a52:	2380      	movs	r3, #128	; 0x80
 8001a54:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a56:	f107 030c 	add.w	r3, r7, #12
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	480b      	ldr	r0, [pc, #44]	; (8001a8c <MX_GPIO_Init+0x104>)
 8001a5e:	f7fe febd 	bl	80007dc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2100      	movs	r1, #0
 8001a66:	2028      	movs	r0, #40	; 0x28
 8001a68:	f7fe fe81 	bl	800076e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001a6c:	2028      	movs	r0, #40	; 0x28
 8001a6e:	f7fe fe9a 	bl	80007a6 <HAL_NVIC_EnableIRQ>

}
 8001a72:	bf00      	nop
 8001a74:	3720      	adds	r7, #32
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40020000 	.word	0x40020000
 8001a84:	10110000 	.word	0x10110000
 8001a88:	40020800 	.word	0x40020800
 8001a8c:	40020400 	.word	0x40020400

08001a90 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001a94:	bf00      	nop
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
	...

08001aa0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	607b      	str	r3, [r7, #4]
 8001aaa:	4b10      	ldr	r3, [pc, #64]	; (8001aec <HAL_MspInit+0x4c>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	4a0f      	ldr	r2, [pc, #60]	; (8001aec <HAL_MspInit+0x4c>)
 8001ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	; (8001aec <HAL_MspInit+0x4c>)
 8001ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001abe:	607b      	str	r3, [r7, #4]
 8001ac0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	603b      	str	r3, [r7, #0]
 8001ac6:	4b09      	ldr	r3, [pc, #36]	; (8001aec <HAL_MspInit+0x4c>)
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	4a08      	ldr	r2, [pc, #32]	; (8001aec <HAL_MspInit+0x4c>)
 8001acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ad0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_MspInit+0x4c>)
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ada:	603b      	str	r3, [r7, #0]
 8001adc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800

08001af0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001afe:	b480      	push	{r7}
 8001b00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b02:	e7fe      	b.n	8001b02 <HardFault_Handler+0x4>

08001b04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b08:	e7fe      	b.n	8001b08 <MemManage_Handler+0x4>

08001b0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b0a:	b480      	push	{r7}
 8001b0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b0e:	e7fe      	b.n	8001b0e <BusFault_Handler+0x4>

08001b10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b14:	e7fe      	b.n	8001b14 <UsageFault_Handler+0x4>

08001b16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b16:	b480      	push	{r7}
 8001b18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b1a:	bf00      	nop
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b22:	4770      	bx	lr

08001b24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b32:	b480      	push	{r7}
 8001b34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b36:	bf00      	nop
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3e:	4770      	bx	lr

08001b40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b40:	b580      	push	{r7, lr}
 8001b42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b44:	f7fe fd18 	bl	8000578 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b48:	bf00      	nop
 8001b4a:	bd80      	pop	{r7, pc}

08001b4c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001b50:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001b54:	f7fe fff8 	bl	8000b48 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8001b58:	2120      	movs	r1, #32
 8001b5a:	4802      	ldr	r0, [pc, #8]	; (8001b64 <EXTI15_10_IRQHandler+0x18>)
 8001b5c:	f7fe ffd9 	bl	8000b12 <HAL_GPIO_TogglePin>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40020000 	.word	0x40020000

08001b68 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b6c:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <SystemInit+0x60>)
 8001b6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b72:	4a15      	ldr	r2, [pc, #84]	; (8001bc8 <SystemInit+0x60>)
 8001b74:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b78:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001b7c:	4b13      	ldr	r3, [pc, #76]	; (8001bcc <SystemInit+0x64>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a12      	ldr	r2, [pc, #72]	; (8001bcc <SystemInit+0x64>)
 8001b82:	f043 0301 	orr.w	r3, r3, #1
 8001b86:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001b88:	4b10      	ldr	r3, [pc, #64]	; (8001bcc <SystemInit+0x64>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001b8e:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <SystemInit+0x64>)
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	4a0e      	ldr	r2, [pc, #56]	; (8001bcc <SystemInit+0x64>)
 8001b94:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001b98:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b9c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <SystemInit+0x64>)
 8001ba0:	4a0b      	ldr	r2, [pc, #44]	; (8001bd0 <SystemInit+0x68>)
 8001ba2:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001ba4:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <SystemInit+0x64>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a08      	ldr	r2, [pc, #32]	; (8001bcc <SystemInit+0x64>)
 8001baa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bae:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <SystemInit+0x64>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001bb6:	4b04      	ldr	r3, [pc, #16]	; (8001bc8 <SystemInit+0x60>)
 8001bb8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bbc:	609a      	str	r2, [r3, #8]
#endif
}
 8001bbe:	bf00      	nop
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	e000ed00 	.word	0xe000ed00
 8001bcc:	40023800 	.word	0x40023800
 8001bd0:	24003010 	.word	0x24003010

08001bd4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bd4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c0c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001bd8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001bda:	e003      	b.n	8001be4 <LoopCopyDataInit>

08001bdc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001bdc:	4b0c      	ldr	r3, [pc, #48]	; (8001c10 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001bde:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001be0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001be2:	3104      	adds	r1, #4

08001be4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001be4:	480b      	ldr	r0, [pc, #44]	; (8001c14 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001be6:	4b0c      	ldr	r3, [pc, #48]	; (8001c18 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001be8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001bea:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001bec:	d3f6      	bcc.n	8001bdc <CopyDataInit>
  ldr  r2, =_sbss
 8001bee:	4a0b      	ldr	r2, [pc, #44]	; (8001c1c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001bf0:	e002      	b.n	8001bf8 <LoopFillZerobss>

08001bf2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001bf2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001bf4:	f842 3b04 	str.w	r3, [r2], #4

08001bf8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001bf8:	4b09      	ldr	r3, [pc, #36]	; (8001c20 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001bfa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001bfc:	d3f9      	bcc.n	8001bf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001bfe:	f7ff ffb3 	bl	8001b68 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c02:	f000 f811 	bl	8001c28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c06:	f7ff fe43 	bl	8001890 <main>
  bx  lr    
 8001c0a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001c0c:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8001c10:	08001cb8 	.word	0x08001cb8
  ldr  r0, =_sdata
 8001c14:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001c18:	2000000c 	.word	0x2000000c
  ldr  r2, =_sbss
 8001c1c:	2000000c 	.word	0x2000000c
  ldr  r3, = _ebss
 8001c20:	2000002c 	.word	0x2000002c

08001c24 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c24:	e7fe      	b.n	8001c24 <ADC_IRQHandler>
	...

08001c28 <__libc_init_array>:
 8001c28:	b570      	push	{r4, r5, r6, lr}
 8001c2a:	4e0d      	ldr	r6, [pc, #52]	; (8001c60 <__libc_init_array+0x38>)
 8001c2c:	4c0d      	ldr	r4, [pc, #52]	; (8001c64 <__libc_init_array+0x3c>)
 8001c2e:	1ba4      	subs	r4, r4, r6
 8001c30:	10a4      	asrs	r4, r4, #2
 8001c32:	2500      	movs	r5, #0
 8001c34:	42a5      	cmp	r5, r4
 8001c36:	d109      	bne.n	8001c4c <__libc_init_array+0x24>
 8001c38:	4e0b      	ldr	r6, [pc, #44]	; (8001c68 <__libc_init_array+0x40>)
 8001c3a:	4c0c      	ldr	r4, [pc, #48]	; (8001c6c <__libc_init_array+0x44>)
 8001c3c:	f000 f820 	bl	8001c80 <_init>
 8001c40:	1ba4      	subs	r4, r4, r6
 8001c42:	10a4      	asrs	r4, r4, #2
 8001c44:	2500      	movs	r5, #0
 8001c46:	42a5      	cmp	r5, r4
 8001c48:	d105      	bne.n	8001c56 <__libc_init_array+0x2e>
 8001c4a:	bd70      	pop	{r4, r5, r6, pc}
 8001c4c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c50:	4798      	blx	r3
 8001c52:	3501      	adds	r5, #1
 8001c54:	e7ee      	b.n	8001c34 <__libc_init_array+0xc>
 8001c56:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001c5a:	4798      	blx	r3
 8001c5c:	3501      	adds	r5, #1
 8001c5e:	e7f2      	b.n	8001c46 <__libc_init_array+0x1e>
 8001c60:	08001cb0 	.word	0x08001cb0
 8001c64:	08001cb0 	.word	0x08001cb0
 8001c68:	08001cb0 	.word	0x08001cb0
 8001c6c:	08001cb4 	.word	0x08001cb4

08001c70 <memset>:
 8001c70:	4402      	add	r2, r0
 8001c72:	4603      	mov	r3, r0
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d100      	bne.n	8001c7a <memset+0xa>
 8001c78:	4770      	bx	lr
 8001c7a:	f803 1b01 	strb.w	r1, [r3], #1
 8001c7e:	e7f9      	b.n	8001c74 <memset+0x4>

08001c80 <_init>:
 8001c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c82:	bf00      	nop
 8001c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c86:	bc08      	pop	{r3}
 8001c88:	469e      	mov	lr, r3
 8001c8a:	4770      	bx	lr

08001c8c <_fini>:
 8001c8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c8e:	bf00      	nop
 8001c90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001c92:	bc08      	pop	{r3}
 8001c94:	469e      	mov	lr, r3
 8001c96:	4770      	bx	lr
