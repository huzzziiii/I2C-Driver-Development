
hal_i2c_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000036d0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f0  08003870  08003870  00013870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a60  08003a60  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  08003a60  08003a60  00013a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a68  08003a68  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a68  08003a68  00013a68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a6c  08003a6c  00013a6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  08003a70  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2000007c  08003aec  0002007c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000017c  08003aec  0002017c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005301  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001442  00000000  00000000  000253ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000518  00000000  00000000  000267f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000460  00000000  00000000  00026d08  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00015209  00000000  00000000  00027168  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000056b5  00000000  00000000  0003c371  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00081b07  00000000  00000000  00041a26  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c352d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d18  00000000  00000000  000c35a8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000007c 	.word	0x2000007c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003858 	.word	0x08003858

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000080 	.word	0x20000080
 80001dc:	08003858 	.word	0x08003858

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b972 	b.w	800058c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	4688      	mov	r8, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14b      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4615      	mov	r5, r2
 80002d2:	d967      	bls.n	80003a4 <__udivmoddi4+0xe4>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0720 	rsb	r7, r2, #32
 80002de:	fa01 f302 	lsl.w	r3, r1, r2
 80002e2:	fa20 f707 	lsr.w	r7, r0, r7
 80002e6:	4095      	lsls	r5, r2
 80002e8:	ea47 0803 	orr.w	r8, r7, r3
 80002ec:	4094      	lsls	r4, r2
 80002ee:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f2:	0c23      	lsrs	r3, r4, #16
 80002f4:	fbb8 f7fe 	udiv	r7, r8, lr
 80002f8:	fa1f fc85 	uxth.w	ip, r5
 80002fc:	fb0e 8817 	mls	r8, lr, r7, r8
 8000300:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000304:	fb07 f10c 	mul.w	r1, r7, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0x60>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000312:	f080 811b 	bcs.w	800054c <__udivmoddi4+0x28c>
 8000316:	4299      	cmp	r1, r3
 8000318:	f240 8118 	bls.w	800054c <__udivmoddi4+0x28c>
 800031c:	3f02      	subs	r7, #2
 800031e:	442b      	add	r3, r5
 8000320:	1a5b      	subs	r3, r3, r1
 8000322:	b2a4      	uxth	r4, r4
 8000324:	fbb3 f0fe 	udiv	r0, r3, lr
 8000328:	fb0e 3310 	mls	r3, lr, r0, r3
 800032c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000330:	fb00 fc0c 	mul.w	ip, r0, ip
 8000334:	45a4      	cmp	ip, r4
 8000336:	d909      	bls.n	800034c <__udivmoddi4+0x8c>
 8000338:	192c      	adds	r4, r5, r4
 800033a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800033e:	f080 8107 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000342:	45a4      	cmp	ip, r4
 8000344:	f240 8104 	bls.w	8000550 <__udivmoddi4+0x290>
 8000348:	3802      	subs	r0, #2
 800034a:	442c      	add	r4, r5
 800034c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000350:	eba4 040c 	sub.w	r4, r4, ip
 8000354:	2700      	movs	r7, #0
 8000356:	b11e      	cbz	r6, 8000360 <__udivmoddi4+0xa0>
 8000358:	40d4      	lsrs	r4, r2
 800035a:	2300      	movs	r3, #0
 800035c:	e9c6 4300 	strd	r4, r3, [r6]
 8000360:	4639      	mov	r1, r7
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d909      	bls.n	800037e <__udivmoddi4+0xbe>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80eb 	beq.w	8000546 <__udivmoddi4+0x286>
 8000370:	2700      	movs	r7, #0
 8000372:	e9c6 0100 	strd	r0, r1, [r6]
 8000376:	4638      	mov	r0, r7
 8000378:	4639      	mov	r1, r7
 800037a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037e:	fab3 f783 	clz	r7, r3
 8000382:	2f00      	cmp	r7, #0
 8000384:	d147      	bne.n	8000416 <__udivmoddi4+0x156>
 8000386:	428b      	cmp	r3, r1
 8000388:	d302      	bcc.n	8000390 <__udivmoddi4+0xd0>
 800038a:	4282      	cmp	r2, r0
 800038c:	f200 80fa 	bhi.w	8000584 <__udivmoddi4+0x2c4>
 8000390:	1a84      	subs	r4, r0, r2
 8000392:	eb61 0303 	sbc.w	r3, r1, r3
 8000396:	2001      	movs	r0, #1
 8000398:	4698      	mov	r8, r3
 800039a:	2e00      	cmp	r6, #0
 800039c:	d0e0      	beq.n	8000360 <__udivmoddi4+0xa0>
 800039e:	e9c6 4800 	strd	r4, r8, [r6]
 80003a2:	e7dd      	b.n	8000360 <__udivmoddi4+0xa0>
 80003a4:	b902      	cbnz	r2, 80003a8 <__udivmoddi4+0xe8>
 80003a6:	deff      	udf	#255	; 0xff
 80003a8:	fab2 f282 	clz	r2, r2
 80003ac:	2a00      	cmp	r2, #0
 80003ae:	f040 808f 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b2:	1b49      	subs	r1, r1, r5
 80003b4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003b8:	fa1f f885 	uxth.w	r8, r5
 80003bc:	2701      	movs	r7, #1
 80003be:	fbb1 fcfe 	udiv	ip, r1, lr
 80003c2:	0c23      	lsrs	r3, r4, #16
 80003c4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003c8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003cc:	fb08 f10c 	mul.w	r1, r8, ip
 80003d0:	4299      	cmp	r1, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d4:	18eb      	adds	r3, r5, r3
 80003d6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4299      	cmp	r1, r3
 80003de:	f200 80cd 	bhi.w	800057c <__udivmoddi4+0x2bc>
 80003e2:	4684      	mov	ip, r0
 80003e4:	1a59      	subs	r1, r3, r1
 80003e6:	b2a3      	uxth	r3, r4
 80003e8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003ec:	fb0e 1410 	mls	r4, lr, r0, r1
 80003f0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80003f4:	fb08 f800 	mul.w	r8, r8, r0
 80003f8:	45a0      	cmp	r8, r4
 80003fa:	d907      	bls.n	800040c <__udivmoddi4+0x14c>
 80003fc:	192c      	adds	r4, r5, r4
 80003fe:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x14a>
 8000404:	45a0      	cmp	r8, r4
 8000406:	f200 80b6 	bhi.w	8000576 <__udivmoddi4+0x2b6>
 800040a:	4618      	mov	r0, r3
 800040c:	eba4 0408 	sub.w	r4, r4, r8
 8000410:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000414:	e79f      	b.n	8000356 <__udivmoddi4+0x96>
 8000416:	f1c7 0c20 	rsb	ip, r7, #32
 800041a:	40bb      	lsls	r3, r7
 800041c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000420:	ea4e 0e03 	orr.w	lr, lr, r3
 8000424:	fa01 f407 	lsl.w	r4, r1, r7
 8000428:	fa20 f50c 	lsr.w	r5, r0, ip
 800042c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000430:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000434:	4325      	orrs	r5, r4
 8000436:	fbb3 f9f8 	udiv	r9, r3, r8
 800043a:	0c2c      	lsrs	r4, r5, #16
 800043c:	fb08 3319 	mls	r3, r8, r9, r3
 8000440:	fa1f fa8e 	uxth.w	sl, lr
 8000444:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000448:	fb09 f40a 	mul.w	r4, r9, sl
 800044c:	429c      	cmp	r4, r3
 800044e:	fa02 f207 	lsl.w	r2, r2, r7
 8000452:	fa00 f107 	lsl.w	r1, r0, r7
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1e 0303 	adds.w	r3, lr, r3
 800045c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000460:	f080 8087 	bcs.w	8000572 <__udivmoddi4+0x2b2>
 8000464:	429c      	cmp	r4, r3
 8000466:	f240 8084 	bls.w	8000572 <__udivmoddi4+0x2b2>
 800046a:	f1a9 0902 	sub.w	r9, r9, #2
 800046e:	4473      	add	r3, lr
 8000470:	1b1b      	subs	r3, r3, r4
 8000472:	b2ad      	uxth	r5, r5
 8000474:	fbb3 f0f8 	udiv	r0, r3, r8
 8000478:	fb08 3310 	mls	r3, r8, r0, r3
 800047c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000480:	fb00 fa0a 	mul.w	sl, r0, sl
 8000484:	45a2      	cmp	sl, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1e 0404 	adds.w	r4, lr, r4
 800048c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000490:	d26b      	bcs.n	800056a <__udivmoddi4+0x2aa>
 8000492:	45a2      	cmp	sl, r4
 8000494:	d969      	bls.n	800056a <__udivmoddi4+0x2aa>
 8000496:	3802      	subs	r0, #2
 8000498:	4474      	add	r4, lr
 800049a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800049e:	fba0 8902 	umull	r8, r9, r0, r2
 80004a2:	eba4 040a 	sub.w	r4, r4, sl
 80004a6:	454c      	cmp	r4, r9
 80004a8:	46c2      	mov	sl, r8
 80004aa:	464b      	mov	r3, r9
 80004ac:	d354      	bcc.n	8000558 <__udivmoddi4+0x298>
 80004ae:	d051      	beq.n	8000554 <__udivmoddi4+0x294>
 80004b0:	2e00      	cmp	r6, #0
 80004b2:	d069      	beq.n	8000588 <__udivmoddi4+0x2c8>
 80004b4:	ebb1 050a 	subs.w	r5, r1, sl
 80004b8:	eb64 0403 	sbc.w	r4, r4, r3
 80004bc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004c0:	40fd      	lsrs	r5, r7
 80004c2:	40fc      	lsrs	r4, r7
 80004c4:	ea4c 0505 	orr.w	r5, ip, r5
 80004c8:	e9c6 5400 	strd	r5, r4, [r6]
 80004cc:	2700      	movs	r7, #0
 80004ce:	e747      	b.n	8000360 <__udivmoddi4+0xa0>
 80004d0:	f1c2 0320 	rsb	r3, r2, #32
 80004d4:	fa20 f703 	lsr.w	r7, r0, r3
 80004d8:	4095      	lsls	r5, r2
 80004da:	fa01 f002 	lsl.w	r0, r1, r2
 80004de:	fa21 f303 	lsr.w	r3, r1, r3
 80004e2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80004e6:	4338      	orrs	r0, r7
 80004e8:	0c01      	lsrs	r1, r0, #16
 80004ea:	fbb3 f7fe 	udiv	r7, r3, lr
 80004ee:	fa1f f885 	uxth.w	r8, r5
 80004f2:	fb0e 3317 	mls	r3, lr, r7, r3
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb07 f308 	mul.w	r3, r7, r8
 80004fe:	428b      	cmp	r3, r1
 8000500:	fa04 f402 	lsl.w	r4, r4, r2
 8000504:	d907      	bls.n	8000516 <__udivmoddi4+0x256>
 8000506:	1869      	adds	r1, r5, r1
 8000508:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 800050c:	d22f      	bcs.n	800056e <__udivmoddi4+0x2ae>
 800050e:	428b      	cmp	r3, r1
 8000510:	d92d      	bls.n	800056e <__udivmoddi4+0x2ae>
 8000512:	3f02      	subs	r7, #2
 8000514:	4429      	add	r1, r5
 8000516:	1acb      	subs	r3, r1, r3
 8000518:	b281      	uxth	r1, r0
 800051a:	fbb3 f0fe 	udiv	r0, r3, lr
 800051e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000522:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000526:	fb00 f308 	mul.w	r3, r0, r8
 800052a:	428b      	cmp	r3, r1
 800052c:	d907      	bls.n	800053e <__udivmoddi4+0x27e>
 800052e:	1869      	adds	r1, r5, r1
 8000530:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000534:	d217      	bcs.n	8000566 <__udivmoddi4+0x2a6>
 8000536:	428b      	cmp	r3, r1
 8000538:	d915      	bls.n	8000566 <__udivmoddi4+0x2a6>
 800053a:	3802      	subs	r0, #2
 800053c:	4429      	add	r1, r5
 800053e:	1ac9      	subs	r1, r1, r3
 8000540:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000544:	e73b      	b.n	80003be <__udivmoddi4+0xfe>
 8000546:	4637      	mov	r7, r6
 8000548:	4630      	mov	r0, r6
 800054a:	e709      	b.n	8000360 <__udivmoddi4+0xa0>
 800054c:	4607      	mov	r7, r0
 800054e:	e6e7      	b.n	8000320 <__udivmoddi4+0x60>
 8000550:	4618      	mov	r0, r3
 8000552:	e6fb      	b.n	800034c <__udivmoddi4+0x8c>
 8000554:	4541      	cmp	r1, r8
 8000556:	d2ab      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 8000558:	ebb8 0a02 	subs.w	sl, r8, r2
 800055c:	eb69 020e 	sbc.w	r2, r9, lr
 8000560:	3801      	subs	r0, #1
 8000562:	4613      	mov	r3, r2
 8000564:	e7a4      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000566:	4660      	mov	r0, ip
 8000568:	e7e9      	b.n	800053e <__udivmoddi4+0x27e>
 800056a:	4618      	mov	r0, r3
 800056c:	e795      	b.n	800049a <__udivmoddi4+0x1da>
 800056e:	4667      	mov	r7, ip
 8000570:	e7d1      	b.n	8000516 <__udivmoddi4+0x256>
 8000572:	4681      	mov	r9, r0
 8000574:	e77c      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000576:	3802      	subs	r0, #2
 8000578:	442c      	add	r4, r5
 800057a:	e747      	b.n	800040c <__udivmoddi4+0x14c>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	442b      	add	r3, r5
 8000582:	e72f      	b.n	80003e4 <__udivmoddi4+0x124>
 8000584:	4638      	mov	r0, r7
 8000586:	e708      	b.n	800039a <__udivmoddi4+0xda>
 8000588:	4637      	mov	r7, r6
 800058a:	e6e9      	b.n	8000360 <__udivmoddi4+0xa0>

0800058c <__aeabi_idiv0>:
 800058c:	4770      	bx	lr
 800058e:	bf00      	nop

08000590 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000594:	4b0e      	ldr	r3, [pc, #56]	; (80005d0 <HAL_Init+0x40>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a0d      	ldr	r2, [pc, #52]	; (80005d0 <HAL_Init+0x40>)
 800059a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800059e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80005a0:	4b0b      	ldr	r3, [pc, #44]	; (80005d0 <HAL_Init+0x40>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	4a0a      	ldr	r2, [pc, #40]	; (80005d0 <HAL_Init+0x40>)
 80005a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80005aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80005ac:	4b08      	ldr	r3, [pc, #32]	; (80005d0 <HAL_Init+0x40>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4a07      	ldr	r2, [pc, #28]	; (80005d0 <HAL_Init+0x40>)
 80005b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80005b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80005b8:	2003      	movs	r0, #3
 80005ba:	f000 f92b 	bl	8000814 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80005be:	2000      	movs	r0, #0
 80005c0:	f000 f808 	bl	80005d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80005c4:	f001 fe36 	bl	8002234 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80005c8:	2300      	movs	r3, #0
}
 80005ca:	4618      	mov	r0, r3
 80005cc:	bd80      	pop	{r7, pc}
 80005ce:	bf00      	nop
 80005d0:	40023c00 	.word	0x40023c00

080005d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b082      	sub	sp, #8
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80005dc:	4b12      	ldr	r3, [pc, #72]	; (8000628 <HAL_InitTick+0x54>)
 80005de:	681a      	ldr	r2, [r3, #0]
 80005e0:	4b12      	ldr	r3, [pc, #72]	; (800062c <HAL_InitTick+0x58>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	4619      	mov	r1, r3
 80005e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80005ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80005f2:	4618      	mov	r0, r3
 80005f4:	f000 f943 	bl	800087e <HAL_SYSTICK_Config>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80005fe:	2301      	movs	r3, #1
 8000600:	e00e      	b.n	8000620 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000602:	687b      	ldr	r3, [r7, #4]
 8000604:	2b0f      	cmp	r3, #15
 8000606:	d80a      	bhi.n	800061e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000608:	2200      	movs	r2, #0
 800060a:	6879      	ldr	r1, [r7, #4]
 800060c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000610:	f000 f90b 	bl	800082a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000614:	4a06      	ldr	r2, [pc, #24]	; (8000630 <HAL_InitTick+0x5c>)
 8000616:	687b      	ldr	r3, [r7, #4]
 8000618:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800061a:	2300      	movs	r3, #0
 800061c:	e000      	b.n	8000620 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800061e:	2301      	movs	r3, #1
}
 8000620:	4618      	mov	r0, r3
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	2000000c 	.word	0x2000000c
 800062c:	20000004 	.word	0x20000004
 8000630:	20000000 	.word	0x20000000

08000634 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000638:	4b06      	ldr	r3, [pc, #24]	; (8000654 <HAL_IncTick+0x20>)
 800063a:	781b      	ldrb	r3, [r3, #0]
 800063c:	461a      	mov	r2, r3
 800063e:	4b06      	ldr	r3, [pc, #24]	; (8000658 <HAL_IncTick+0x24>)
 8000640:	681b      	ldr	r3, [r3, #0]
 8000642:	4413      	add	r3, r2
 8000644:	4a04      	ldr	r2, [pc, #16]	; (8000658 <HAL_IncTick+0x24>)
 8000646:	6013      	str	r3, [r2, #0]
}
 8000648:	bf00      	nop
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	20000004 	.word	0x20000004
 8000658:	20000158 	.word	0x20000158

0800065c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return uwTick;
 8000660:	4b03      	ldr	r3, [pc, #12]	; (8000670 <HAL_GetTick+0x14>)
 8000662:	681b      	ldr	r3, [r3, #0]
}
 8000664:	4618      	mov	r0, r3
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr
 800066e:	bf00      	nop
 8000670:	20000158 	.word	0x20000158

08000674 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000674:	b480      	push	{r7}
 8000676:	b085      	sub	sp, #20
 8000678:	af00      	add	r7, sp, #0
 800067a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	f003 0307 	and.w	r3, r3, #7
 8000682:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000684:	4b0c      	ldr	r3, [pc, #48]	; (80006b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000686:	68db      	ldr	r3, [r3, #12]
 8000688:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800068a:	68ba      	ldr	r2, [r7, #8]
 800068c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000690:	4013      	ands	r3, r2
 8000692:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000694:	68fb      	ldr	r3, [r7, #12]
 8000696:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800069c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80006a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80006a6:	4a04      	ldr	r2, [pc, #16]	; (80006b8 <__NVIC_SetPriorityGrouping+0x44>)
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	60d3      	str	r3, [r2, #12]
}
 80006ac:	bf00      	nop
 80006ae:	3714      	adds	r7, #20
 80006b0:	46bd      	mov	sp, r7
 80006b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b6:	4770      	bx	lr
 80006b8:	e000ed00 	.word	0xe000ed00

080006bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80006c0:	4b04      	ldr	r3, [pc, #16]	; (80006d4 <__NVIC_GetPriorityGrouping+0x18>)
 80006c2:	68db      	ldr	r3, [r3, #12]
 80006c4:	0a1b      	lsrs	r3, r3, #8
 80006c6:	f003 0307 	and.w	r3, r3, #7
}
 80006ca:	4618      	mov	r0, r3
 80006cc:	46bd      	mov	sp, r7
 80006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d2:	4770      	bx	lr
 80006d4:	e000ed00 	.word	0xe000ed00

080006d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4603      	mov	r3, r0
 80006e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80006e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	db0b      	blt.n	8000702 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	f003 021f 	and.w	r2, r3, #31
 80006f0:	4907      	ldr	r1, [pc, #28]	; (8000710 <__NVIC_EnableIRQ+0x38>)
 80006f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80006f6:	095b      	lsrs	r3, r3, #5
 80006f8:	2001      	movs	r0, #1
 80006fa:	fa00 f202 	lsl.w	r2, r0, r2
 80006fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000702:	bf00      	nop
 8000704:	370c      	adds	r7, #12
 8000706:	46bd      	mov	sp, r7
 8000708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800070c:	4770      	bx	lr
 800070e:	bf00      	nop
 8000710:	e000e100 	.word	0xe000e100

08000714 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000714:	b480      	push	{r7}
 8000716:	b083      	sub	sp, #12
 8000718:	af00      	add	r7, sp, #0
 800071a:	4603      	mov	r3, r0
 800071c:	6039      	str	r1, [r7, #0]
 800071e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000724:	2b00      	cmp	r3, #0
 8000726:	db0a      	blt.n	800073e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	b2da      	uxtb	r2, r3
 800072c:	490c      	ldr	r1, [pc, #48]	; (8000760 <__NVIC_SetPriority+0x4c>)
 800072e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000732:	0112      	lsls	r2, r2, #4
 8000734:	b2d2      	uxtb	r2, r2
 8000736:	440b      	add	r3, r1
 8000738:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800073c:	e00a      	b.n	8000754 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800073e:	683b      	ldr	r3, [r7, #0]
 8000740:	b2da      	uxtb	r2, r3
 8000742:	4908      	ldr	r1, [pc, #32]	; (8000764 <__NVIC_SetPriority+0x50>)
 8000744:	79fb      	ldrb	r3, [r7, #7]
 8000746:	f003 030f 	and.w	r3, r3, #15
 800074a:	3b04      	subs	r3, #4
 800074c:	0112      	lsls	r2, r2, #4
 800074e:	b2d2      	uxtb	r2, r2
 8000750:	440b      	add	r3, r1
 8000752:	761a      	strb	r2, [r3, #24]
}
 8000754:	bf00      	nop
 8000756:	370c      	adds	r7, #12
 8000758:	46bd      	mov	sp, r7
 800075a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075e:	4770      	bx	lr
 8000760:	e000e100 	.word	0xe000e100
 8000764:	e000ed00 	.word	0xe000ed00

08000768 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000768:	b480      	push	{r7}
 800076a:	b089      	sub	sp, #36	; 0x24
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	f003 0307 	and.w	r3, r3, #7
 800077a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800077c:	69fb      	ldr	r3, [r7, #28]
 800077e:	f1c3 0307 	rsb	r3, r3, #7
 8000782:	2b04      	cmp	r3, #4
 8000784:	bf28      	it	cs
 8000786:	2304      	movcs	r3, #4
 8000788:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800078a:	69fb      	ldr	r3, [r7, #28]
 800078c:	3304      	adds	r3, #4
 800078e:	2b06      	cmp	r3, #6
 8000790:	d902      	bls.n	8000798 <NVIC_EncodePriority+0x30>
 8000792:	69fb      	ldr	r3, [r7, #28]
 8000794:	3b03      	subs	r3, #3
 8000796:	e000      	b.n	800079a <NVIC_EncodePriority+0x32>
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800079c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80007a0:	69bb      	ldr	r3, [r7, #24]
 80007a2:	fa02 f303 	lsl.w	r3, r2, r3
 80007a6:	43da      	mvns	r2, r3
 80007a8:	68bb      	ldr	r3, [r7, #8]
 80007aa:	401a      	ands	r2, r3
 80007ac:	697b      	ldr	r3, [r7, #20]
 80007ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80007b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80007b4:	697b      	ldr	r3, [r7, #20]
 80007b6:	fa01 f303 	lsl.w	r3, r1, r3
 80007ba:	43d9      	mvns	r1, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80007c0:	4313      	orrs	r3, r2
         );
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	3724      	adds	r7, #36	; 0x24
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
	...

080007d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	3b01      	subs	r3, #1
 80007dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80007e0:	d301      	bcc.n	80007e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80007e2:	2301      	movs	r3, #1
 80007e4:	e00f      	b.n	8000806 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80007e6:	4a0a      	ldr	r2, [pc, #40]	; (8000810 <SysTick_Config+0x40>)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	3b01      	subs	r3, #1
 80007ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80007ee:	210f      	movs	r1, #15
 80007f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80007f4:	f7ff ff8e 	bl	8000714 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80007f8:	4b05      	ldr	r3, [pc, #20]	; (8000810 <SysTick_Config+0x40>)
 80007fa:	2200      	movs	r2, #0
 80007fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80007fe:	4b04      	ldr	r3, [pc, #16]	; (8000810 <SysTick_Config+0x40>)
 8000800:	2207      	movs	r2, #7
 8000802:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000804:	2300      	movs	r3, #0
}
 8000806:	4618      	mov	r0, r3
 8000808:	3708      	adds	r7, #8
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}
 800080e:	bf00      	nop
 8000810:	e000e010 	.word	0xe000e010

08000814 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	b082      	sub	sp, #8
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800081c:	6878      	ldr	r0, [r7, #4]
 800081e:	f7ff ff29 	bl	8000674 <__NVIC_SetPriorityGrouping>
}
 8000822:	bf00      	nop
 8000824:	3708      	adds	r7, #8
 8000826:	46bd      	mov	sp, r7
 8000828:	bd80      	pop	{r7, pc}

0800082a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800082a:	b580      	push	{r7, lr}
 800082c:	b086      	sub	sp, #24
 800082e:	af00      	add	r7, sp, #0
 8000830:	4603      	mov	r3, r0
 8000832:	60b9      	str	r1, [r7, #8]
 8000834:	607a      	str	r2, [r7, #4]
 8000836:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000838:	2300      	movs	r3, #0
 800083a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800083c:	f7ff ff3e 	bl	80006bc <__NVIC_GetPriorityGrouping>
 8000840:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000842:	687a      	ldr	r2, [r7, #4]
 8000844:	68b9      	ldr	r1, [r7, #8]
 8000846:	6978      	ldr	r0, [r7, #20]
 8000848:	f7ff ff8e 	bl	8000768 <NVIC_EncodePriority>
 800084c:	4602      	mov	r2, r0
 800084e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000852:	4611      	mov	r1, r2
 8000854:	4618      	mov	r0, r3
 8000856:	f7ff ff5d 	bl	8000714 <__NVIC_SetPriority>
}
 800085a:	bf00      	nop
 800085c:	3718      	adds	r7, #24
 800085e:	46bd      	mov	sp, r7
 8000860:	bd80      	pop	{r7, pc}

08000862 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000862:	b580      	push	{r7, lr}
 8000864:	b082      	sub	sp, #8
 8000866:	af00      	add	r7, sp, #0
 8000868:	4603      	mov	r3, r0
 800086a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800086c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000870:	4618      	mov	r0, r3
 8000872:	f7ff ff31 	bl	80006d8 <__NVIC_EnableIRQ>
}
 8000876:	bf00      	nop
 8000878:	3708      	adds	r7, #8
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800087e:	b580      	push	{r7, lr}
 8000880:	b082      	sub	sp, #8
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f7ff ffa2 	bl	80007d0 <SysTick_Config>
 800088c:	4603      	mov	r3, r0
}
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
	...

08000898 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000898:	b480      	push	{r7}
 800089a:	b089      	sub	sp, #36	; 0x24
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
 80008a0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80008a2:	2300      	movs	r3, #0
 80008a4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80008a6:	2300      	movs	r3, #0
 80008a8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80008aa:	2300      	movs	r3, #0
 80008ac:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80008ae:	2300      	movs	r3, #0
 80008b0:	61fb      	str	r3, [r7, #28]
 80008b2:	e159      	b.n	8000b68 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80008b4:	2201      	movs	r2, #1
 80008b6:	69fb      	ldr	r3, [r7, #28]
 80008b8:	fa02 f303 	lsl.w	r3, r2, r3
 80008bc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	697a      	ldr	r2, [r7, #20]
 80008c4:	4013      	ands	r3, r2
 80008c6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80008c8:	693a      	ldr	r2, [r7, #16]
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	429a      	cmp	r2, r3
 80008ce:	f040 8148 	bne.w	8000b62 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008d2:	683b      	ldr	r3, [r7, #0]
 80008d4:	685b      	ldr	r3, [r3, #4]
 80008d6:	2b02      	cmp	r3, #2
 80008d8:	d003      	beq.n	80008e2 <HAL_GPIO_Init+0x4a>
 80008da:	683b      	ldr	r3, [r7, #0]
 80008dc:	685b      	ldr	r3, [r3, #4]
 80008de:	2b12      	cmp	r3, #18
 80008e0:	d123      	bne.n	800092a <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	08da      	lsrs	r2, r3, #3
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	3208      	adds	r2, #8
 80008ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80008ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80008f0:	69fb      	ldr	r3, [r7, #28]
 80008f2:	f003 0307 	and.w	r3, r3, #7
 80008f6:	009b      	lsls	r3, r3, #2
 80008f8:	220f      	movs	r2, #15
 80008fa:	fa02 f303 	lsl.w	r3, r2, r3
 80008fe:	43db      	mvns	r3, r3
 8000900:	69ba      	ldr	r2, [r7, #24]
 8000902:	4013      	ands	r3, r2
 8000904:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	691a      	ldr	r2, [r3, #16]
 800090a:	69fb      	ldr	r3, [r7, #28]
 800090c:	f003 0307 	and.w	r3, r3, #7
 8000910:	009b      	lsls	r3, r3, #2
 8000912:	fa02 f303 	lsl.w	r3, r2, r3
 8000916:	69ba      	ldr	r2, [r7, #24]
 8000918:	4313      	orrs	r3, r2
 800091a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800091c:	69fb      	ldr	r3, [r7, #28]
 800091e:	08da      	lsrs	r2, r3, #3
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	3208      	adds	r2, #8
 8000924:	69b9      	ldr	r1, [r7, #24]
 8000926:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
//        GPIOx->AFR[0] = 1 << 30 | 1 << 26;
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	681b      	ldr	r3, [r3, #0]
 800092e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000930:	69fb      	ldr	r3, [r7, #28]
 8000932:	005b      	lsls	r3, r3, #1
 8000934:	2203      	movs	r2, #3
 8000936:	fa02 f303 	lsl.w	r3, r2, r3
 800093a:	43db      	mvns	r3, r3
 800093c:	69ba      	ldr	r2, [r7, #24]
 800093e:	4013      	ands	r3, r2
 8000940:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000942:	683b      	ldr	r3, [r7, #0]
 8000944:	685b      	ldr	r3, [r3, #4]
 8000946:	f003 0203 	and.w	r2, r3, #3
 800094a:	69fb      	ldr	r3, [r7, #28]
 800094c:	005b      	lsls	r3, r3, #1
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	69ba      	ldr	r2, [r7, #24]
 8000954:	4313      	orrs	r3, r2
 8000956:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	69ba      	ldr	r2, [r7, #24]
 800095c:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800095e:	683b      	ldr	r3, [r7, #0]
 8000960:	685b      	ldr	r3, [r3, #4]
 8000962:	2b01      	cmp	r3, #1
 8000964:	d00b      	beq.n	800097e <HAL_GPIO_Init+0xe6>
 8000966:	683b      	ldr	r3, [r7, #0]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	2b02      	cmp	r3, #2
 800096c:	d007      	beq.n	800097e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800096e:	683b      	ldr	r3, [r7, #0]
 8000970:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000972:	2b11      	cmp	r3, #17
 8000974:	d003      	beq.n	800097e <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000976:	683b      	ldr	r3, [r7, #0]
 8000978:	685b      	ldr	r3, [r3, #4]
 800097a:	2b12      	cmp	r3, #18
 800097c:	d130      	bne.n	80009e0 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	689b      	ldr	r3, [r3, #8]
 8000982:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	005b      	lsls	r3, r3, #1
 8000988:	2203      	movs	r2, #3
 800098a:	fa02 f303 	lsl.w	r3, r2, r3
 800098e:	43db      	mvns	r3, r3
 8000990:	69ba      	ldr	r2, [r7, #24]
 8000992:	4013      	ands	r3, r2
 8000994:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000996:	683b      	ldr	r3, [r7, #0]
 8000998:	68da      	ldr	r2, [r3, #12]
 800099a:	69fb      	ldr	r3, [r7, #28]
 800099c:	005b      	lsls	r3, r3, #1
 800099e:	fa02 f303 	lsl.w	r3, r2, r3
 80009a2:	69ba      	ldr	r2, [r7, #24]
 80009a4:	4313      	orrs	r3, r2
 80009a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	69ba      	ldr	r2, [r7, #24]
 80009ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	685b      	ldr	r3, [r3, #4]
 80009b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009b4:	2201      	movs	r2, #1
 80009b6:	69fb      	ldr	r3, [r7, #28]
 80009b8:	fa02 f303 	lsl.w	r3, r2, r3
 80009bc:	43db      	mvns	r3, r3
 80009be:	69ba      	ldr	r2, [r7, #24]
 80009c0:	4013      	ands	r3, r2
 80009c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80009c4:	683b      	ldr	r3, [r7, #0]
 80009c6:	685b      	ldr	r3, [r3, #4]
 80009c8:	091b      	lsrs	r3, r3, #4
 80009ca:	f003 0201 	and.w	r2, r3, #1
 80009ce:	69fb      	ldr	r3, [r7, #28]
 80009d0:	fa02 f303 	lsl.w	r3, r2, r3
 80009d4:	69ba      	ldr	r2, [r7, #24]
 80009d6:	4313      	orrs	r3, r2
 80009d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80009da:	687b      	ldr	r3, [r7, #4]
 80009dc:	69ba      	ldr	r2, [r7, #24]
 80009de:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	68db      	ldr	r3, [r3, #12]
 80009e4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80009e6:	69fb      	ldr	r3, [r7, #28]
 80009e8:	005b      	lsls	r3, r3, #1
 80009ea:	2203      	movs	r2, #3
 80009ec:	fa02 f303 	lsl.w	r3, r2, r3
 80009f0:	43db      	mvns	r3, r3
 80009f2:	69ba      	ldr	r2, [r7, #24]
 80009f4:	4013      	ands	r3, r2
 80009f6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	689a      	ldr	r2, [r3, #8]
 80009fc:	69fb      	ldr	r3, [r7, #28]
 80009fe:	005b      	lsls	r3, r3, #1
 8000a00:	fa02 f303 	lsl.w	r3, r2, r3
 8000a04:	69ba      	ldr	r2, [r7, #24]
 8000a06:	4313      	orrs	r3, r2
 8000a08:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	69ba      	ldr	r2, [r7, #24]
 8000a0e:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000a10:	683b      	ldr	r3, [r7, #0]
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	f000 80a2 	beq.w	8000b62 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a1e:	2300      	movs	r3, #0
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	4b56      	ldr	r3, [pc, #344]	; (8000b7c <HAL_GPIO_Init+0x2e4>)
 8000a24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a26:	4a55      	ldr	r2, [pc, #340]	; (8000b7c <HAL_GPIO_Init+0x2e4>)
 8000a28:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a2c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a2e:	4b53      	ldr	r3, [pc, #332]	; (8000b7c <HAL_GPIO_Init+0x2e4>)
 8000a30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000a3a:	4a51      	ldr	r2, [pc, #324]	; (8000b80 <HAL_GPIO_Init+0x2e8>)
 8000a3c:	69fb      	ldr	r3, [r7, #28]
 8000a3e:	089b      	lsrs	r3, r3, #2
 8000a40:	3302      	adds	r3, #2
 8000a42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000a48:	69fb      	ldr	r3, [r7, #28]
 8000a4a:	f003 0303 	and.w	r3, r3, #3
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	220f      	movs	r2, #15
 8000a52:	fa02 f303 	lsl.w	r3, r2, r3
 8000a56:	43db      	mvns	r3, r3
 8000a58:	69ba      	ldr	r2, [r7, #24]
 8000a5a:	4013      	ands	r3, r2
 8000a5c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000a5e:	687b      	ldr	r3, [r7, #4]
 8000a60:	4a48      	ldr	r2, [pc, #288]	; (8000b84 <HAL_GPIO_Init+0x2ec>)
 8000a62:	4293      	cmp	r3, r2
 8000a64:	d019      	beq.n	8000a9a <HAL_GPIO_Init+0x202>
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	4a47      	ldr	r2, [pc, #284]	; (8000b88 <HAL_GPIO_Init+0x2f0>)
 8000a6a:	4293      	cmp	r3, r2
 8000a6c:	d013      	beq.n	8000a96 <HAL_GPIO_Init+0x1fe>
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	4a46      	ldr	r2, [pc, #280]	; (8000b8c <HAL_GPIO_Init+0x2f4>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d00d      	beq.n	8000a92 <HAL_GPIO_Init+0x1fa>
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	4a45      	ldr	r2, [pc, #276]	; (8000b90 <HAL_GPIO_Init+0x2f8>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d007      	beq.n	8000a8e <HAL_GPIO_Init+0x1f6>
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	4a44      	ldr	r2, [pc, #272]	; (8000b94 <HAL_GPIO_Init+0x2fc>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d101      	bne.n	8000a8a <HAL_GPIO_Init+0x1f2>
 8000a86:	2304      	movs	r3, #4
 8000a88:	e008      	b.n	8000a9c <HAL_GPIO_Init+0x204>
 8000a8a:	2307      	movs	r3, #7
 8000a8c:	e006      	b.n	8000a9c <HAL_GPIO_Init+0x204>
 8000a8e:	2303      	movs	r3, #3
 8000a90:	e004      	b.n	8000a9c <HAL_GPIO_Init+0x204>
 8000a92:	2302      	movs	r3, #2
 8000a94:	e002      	b.n	8000a9c <HAL_GPIO_Init+0x204>
 8000a96:	2301      	movs	r3, #1
 8000a98:	e000      	b.n	8000a9c <HAL_GPIO_Init+0x204>
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	69fa      	ldr	r2, [r7, #28]
 8000a9e:	f002 0203 	and.w	r2, r2, #3
 8000aa2:	0092      	lsls	r2, r2, #2
 8000aa4:	4093      	lsls	r3, r2
 8000aa6:	69ba      	ldr	r2, [r7, #24]
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000aac:	4934      	ldr	r1, [pc, #208]	; (8000b80 <HAL_GPIO_Init+0x2e8>)
 8000aae:	69fb      	ldr	r3, [r7, #28]
 8000ab0:	089b      	lsrs	r3, r3, #2
 8000ab2:	3302      	adds	r3, #2
 8000ab4:	69ba      	ldr	r2, [r7, #24]
 8000ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000aba:	4b37      	ldr	r3, [pc, #220]	; (8000b98 <HAL_GPIO_Init+0x300>)
 8000abc:	681b      	ldr	r3, [r3, #0]
 8000abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ac0:	693b      	ldr	r3, [r7, #16]
 8000ac2:	43db      	mvns	r3, r3
 8000ac4:	69ba      	ldr	r2, [r7, #24]
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	d003      	beq.n	8000ade <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8000ad6:	69ba      	ldr	r2, [r7, #24]
 8000ad8:	693b      	ldr	r3, [r7, #16]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ade:	4a2e      	ldr	r2, [pc, #184]	; (8000b98 <HAL_GPIO_Init+0x300>)
 8000ae0:	69bb      	ldr	r3, [r7, #24]
 8000ae2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000ae4:	4b2c      	ldr	r3, [pc, #176]	; (8000b98 <HAL_GPIO_Init+0x300>)
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000aea:	693b      	ldr	r3, [r7, #16]
 8000aec:	43db      	mvns	r3, r3
 8000aee:	69ba      	ldr	r2, [r7, #24]
 8000af0:	4013      	ands	r3, r2
 8000af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000af4:	683b      	ldr	r3, [r7, #0]
 8000af6:	685b      	ldr	r3, [r3, #4]
 8000af8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d003      	beq.n	8000b08 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8000b00:	69ba      	ldr	r2, [r7, #24]
 8000b02:	693b      	ldr	r3, [r7, #16]
 8000b04:	4313      	orrs	r3, r2
 8000b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000b08:	4a23      	ldr	r2, [pc, #140]	; (8000b98 <HAL_GPIO_Init+0x300>)
 8000b0a:	69bb      	ldr	r3, [r7, #24]
 8000b0c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b0e:	4b22      	ldr	r3, [pc, #136]	; (8000b98 <HAL_GPIO_Init+0x300>)
 8000b10:	689b      	ldr	r3, [r3, #8]
 8000b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	43db      	mvns	r3, r3
 8000b18:	69ba      	ldr	r2, [r7, #24]
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000b1e:	683b      	ldr	r3, [r7, #0]
 8000b20:	685b      	ldr	r3, [r3, #4]
 8000b22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d003      	beq.n	8000b32 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8000b2a:	69ba      	ldr	r2, [r7, #24]
 8000b2c:	693b      	ldr	r3, [r7, #16]
 8000b2e:	4313      	orrs	r3, r2
 8000b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000b32:	4a19      	ldr	r2, [pc, #100]	; (8000b98 <HAL_GPIO_Init+0x300>)
 8000b34:	69bb      	ldr	r3, [r7, #24]
 8000b36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000b38:	4b17      	ldr	r3, [pc, #92]	; (8000b98 <HAL_GPIO_Init+0x300>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000b3e:	693b      	ldr	r3, [r7, #16]
 8000b40:	43db      	mvns	r3, r3
 8000b42:	69ba      	ldr	r2, [r7, #24]
 8000b44:	4013      	ands	r3, r2
 8000b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000b48:	683b      	ldr	r3, [r7, #0]
 8000b4a:	685b      	ldr	r3, [r3, #4]
 8000b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d003      	beq.n	8000b5c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8000b54:	69ba      	ldr	r2, [r7, #24]
 8000b56:	693b      	ldr	r3, [r7, #16]
 8000b58:	4313      	orrs	r3, r2
 8000b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000b5c:	4a0e      	ldr	r2, [pc, #56]	; (8000b98 <HAL_GPIO_Init+0x300>)
 8000b5e:	69bb      	ldr	r3, [r7, #24]
 8000b60:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000b62:	69fb      	ldr	r3, [r7, #28]
 8000b64:	3301      	adds	r3, #1
 8000b66:	61fb      	str	r3, [r7, #28]
 8000b68:	69fb      	ldr	r3, [r7, #28]
 8000b6a:	2b0f      	cmp	r3, #15
 8000b6c:	f67f aea2 	bls.w	80008b4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000b70:	bf00      	nop
 8000b72:	3724      	adds	r7, #36	; 0x24
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40013800 	.word	0x40013800
 8000b84:	40020000 	.word	0x40020000
 8000b88:	40020400 	.word	0x40020400
 8000b8c:	40020800 	.word	0x40020800
 8000b90:	40020c00 	.word	0x40020c00
 8000b94:	40021000 	.word	0x40021000
 8000b98:	40013c00 	.word	0x40013c00

08000b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	b083      	sub	sp, #12
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
 8000ba4:	460b      	mov	r3, r1
 8000ba6:	807b      	strh	r3, [r7, #2]
 8000ba8:	4613      	mov	r3, r2
 8000baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000bac:	787b      	ldrb	r3, [r7, #1]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d003      	beq.n	8000bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000bb2:	887a      	ldrh	r2, [r7, #2]
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000bb8:	e003      	b.n	8000bc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000bba:	887b      	ldrh	r3, [r7, #2]
 8000bbc:	041a      	lsls	r2, r3, #16
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	619a      	str	r2, [r3, #24]
}
 8000bc2:	bf00      	nop
 8000bc4:	370c      	adds	r7, #12
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	b083      	sub	sp, #12
 8000bd2:	af00      	add	r7, sp, #0
 8000bd4:	6078      	str	r0, [r7, #4]
 8000bd6:	460b      	mov	r3, r1
 8000bd8:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	695a      	ldr	r2, [r3, #20]
 8000bde:	887b      	ldrh	r3, [r7, #2]
 8000be0:	401a      	ands	r2, r3
 8000be2:	887b      	ldrh	r3, [r7, #2]
 8000be4:	429a      	cmp	r2, r3
 8000be6:	d104      	bne.n	8000bf2 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000be8:	887b      	ldrh	r3, [r7, #2]
 8000bea:	041a      	lsls	r2, r3, #16
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000bf0:	e002      	b.n	8000bf8 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000bf2:	887a      	ldrh	r2, [r7, #2]
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	619a      	str	r2, [r3, #24]
}
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr

08000c04 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000c0e:	4b08      	ldr	r3, [pc, #32]	; (8000c30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c10:	695a      	ldr	r2, [r3, #20]
 8000c12:	88fb      	ldrh	r3, [r7, #6]
 8000c14:	4013      	ands	r3, r2
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d006      	beq.n	8000c28 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000c1a:	4a05      	ldr	r2, [pc, #20]	; (8000c30 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000c1c:	88fb      	ldrh	r3, [r7, #6]
 8000c1e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000c20:	2120      	movs	r1, #32
 8000c22:	4804      	ldr	r0, [pc, #16]	; (8000c34 <HAL_GPIO_EXTI_IRQHandler+0x30>)
 8000c24:	f7ff ffd3 	bl	8000bce <HAL_GPIO_TogglePin>
    // HAL_GPIO_EXTI_Callback(GPIO_Pin);
  }
}
 8000c28:	bf00      	nop
 8000c2a:	3708      	adds	r7, #8
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	bd80      	pop	{r7, pc}
 8000c30:	40013c00 	.word	0x40013c00
 8000c34:	40020000 	.word	0x40020000

08000c38 <I2C_PeripheralClkControl>:
//static HAL_StatusTypeDef WaitTillTimeout (uint8_t timeout);
static void I2C_SetCtrlBits();
static void I2C_StopTransmission();
volatile static I2C_Handle_t *I2C_handle_p;

void I2C_PeripheralClkControl(I2C_TypeDef *pI2Cx) {
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
	if (pI2Cx == I2C1) {
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <I2C_PeripheralClkControl+0x54>)
 8000c44:	4293      	cmp	r3, r2
 8000c46:	d106      	bne.n	8000c56 <I2C_PeripheralClkControl+0x1e>
		RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000c48:	4b11      	ldr	r3, [pc, #68]	; (8000c90 <I2C_PeripheralClkControl+0x58>)
 8000c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4c:	4a10      	ldr	r2, [pc, #64]	; (8000c90 <I2C_PeripheralClkControl+0x58>)
 8000c4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000c52:	6413      	str	r3, [r2, #64]	; 0x40
	}

	else if (pI2Cx == I2C3) {
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
	}
}
 8000c54:	e014      	b.n	8000c80 <I2C_PeripheralClkControl+0x48>
	else if (pI2Cx == I2C2) {
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	4a0e      	ldr	r2, [pc, #56]	; (8000c94 <I2C_PeripheralClkControl+0x5c>)
 8000c5a:	4293      	cmp	r3, r2
 8000c5c:	d106      	bne.n	8000c6c <I2C_PeripheralClkControl+0x34>
		RCC->APB1ENR |= RCC_APB1ENR_I2C2EN;
 8000c5e:	4b0c      	ldr	r3, [pc, #48]	; (8000c90 <I2C_PeripheralClkControl+0x58>)
 8000c60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c62:	4a0b      	ldr	r2, [pc, #44]	; (8000c90 <I2C_PeripheralClkControl+0x58>)
 8000c64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c68:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c6a:	e009      	b.n	8000c80 <I2C_PeripheralClkControl+0x48>
	else if (pI2Cx == I2C3) {
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	4a0a      	ldr	r2, [pc, #40]	; (8000c98 <I2C_PeripheralClkControl+0x60>)
 8000c70:	4293      	cmp	r3, r2
 8000c72:	d105      	bne.n	8000c80 <I2C_PeripheralClkControl+0x48>
		RCC->APB1ENR |= RCC_APB1ENR_I2C3EN;
 8000c74:	4b06      	ldr	r3, [pc, #24]	; (8000c90 <I2C_PeripheralClkControl+0x58>)
 8000c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c78:	4a05      	ldr	r2, [pc, #20]	; (8000c90 <I2C_PeripheralClkControl+0x58>)
 8000c7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000c7e:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr
 8000c8c:	40005400 	.word	0x40005400
 8000c90:	40023800 	.word	0x40023800
 8000c94:	40005800 	.word	0x40005800
 8000c98:	40005c00 	.word	0x40005c00

08000c9c <I2C_Init>:

void I2C_Init(I2C_Handle_t *I2C_handle) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b084      	sub	sp, #16
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]

	// enable I2C clock in RCC register
	I2C_PeripheralClkControl(I2C_handle->pI2Cx);
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ffc5 	bl	8000c38 <I2C_PeripheralClkControl>

	// control ACK bit
	I2C_handle->pI2Cx->CR1 |= I2C_handle->I2C_Config.I2C_AckControl << 10;
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	681a      	ldr	r2, [r3, #0]
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	7a5b      	ldrb	r3, [r3, #9]
 8000cb8:	029b      	lsls	r3, r3, #10
 8000cba:	4619      	mov	r1, r3
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	430a      	orrs	r2, r1
 8000cc2:	601a      	str	r2, [r3, #0]

	// device address
	I2C_handle->pI2Cx->OAR1 |= I2C_handle->I2C_Config.I2C_DeviceAddress << 1;
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	689a      	ldr	r2, [r3, #8]
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	7a1b      	ldrb	r3, [r3, #8]
 8000cce:	005b      	lsls	r3, r3, #1
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	609a      	str	r2, [r3, #8]
	I2C_handle->pI2Cx->OAR1 |= 1 << 14; 		// setting 14th bit to 1 as per datasheet
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	689a      	ldr	r2, [r3, #8]
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ce8:	609a      	str	r2, [r3, #8]

	// peripheral clock frequency
	uint32_t peripheralClkFreq = (SystemCoreClock / 1000000) & 0x3f;
 8000cea:	4b23      	ldr	r3, [pc, #140]	; (8000d78 <I2C_Init+0xdc>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4a23      	ldr	r2, [pc, #140]	; (8000d7c <I2C_Init+0xe0>)
 8000cf0:	fba2 2303 	umull	r2, r3, r2, r3
 8000cf4:	0c9b      	lsrs	r3, r3, #18
 8000cf6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000cfa:	60fb      	str	r3, [r7, #12]
	I2C_handle->pI2Cx->CR2 |= peripheralClkFreq;
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	681b      	ldr	r3, [r3, #0]
 8000d00:	6859      	ldr	r1, [r3, #4]
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	68fa      	ldr	r2, [r7, #12]
 8000d08:	430a      	orrs	r2, r1
 8000d0a:	605a      	str	r2, [r3, #4]

	//setting CCR register
	if (I2C_handle->I2C_Config.I2C_SCLSpeed == I2C_SCL_SPEED_SM) {
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	685b      	ldr	r3, [r3, #4]
 8000d10:	4a1b      	ldr	r2, [pc, #108]	; (8000d80 <I2C_Init+0xe4>)
 8000d12:	4293      	cmp	r3, r2
 8000d14:	d10f      	bne.n	8000d36 <I2C_Init+0x9a>
		uint16_t ccr = SystemCoreClock / (2 * I2C_handle->I2C_Config.I2C_SCLSpeed);
 8000d16:	4b18      	ldr	r3, [pc, #96]	; (8000d78 <I2C_Init+0xdc>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	685b      	ldr	r3, [r3, #4]
 8000d1e:	005b      	lsls	r3, r3, #1
 8000d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d24:	817b      	strh	r3, [r7, #10]
			//uint16_t ccr = t_high / t_pclk;
		I2C_handle->pI2Cx->CCR |= ccr;
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	69d9      	ldr	r1, [r3, #28]
 8000d2c:	897a      	ldrh	r2, [r7, #10]
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	430a      	orrs	r2, r1
 8000d34:	61da      	str	r2, [r3, #28]
	}

	// TRise configuration
	if(I2C_handle->I2C_Config.I2C_SCLSpeed <= I2C_SCL_SPEED_SM) {
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	685b      	ldr	r3, [r3, #4]
 8000d3a:	4a11      	ldr	r2, [pc, #68]	; (8000d80 <I2C_Init+0xe4>)
 8000d3c:	4293      	cmp	r3, r2
 8000d3e:	d80f      	bhi.n	8000d60 <I2C_Init+0xc4>
		I2C_handle->pI2Cx->TRISE |= ( (SystemCoreClock / 1000000 + 1) & 0x3f); // max rise time in SmMode = 1000ns - 0011 1111
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	6a19      	ldr	r1, [r3, #32]
 8000d46:	4b0c      	ldr	r3, [pc, #48]	; (8000d78 <I2C_Init+0xdc>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	4a0c      	ldr	r2, [pc, #48]	; (8000d7c <I2C_Init+0xe0>)
 8000d4c:	fba2 2303 	umull	r2, r3, r2, r3
 8000d50:	0c9b      	lsrs	r3, r3, #18
 8000d52:	3301      	adds	r3, #1
 8000d54:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	430a      	orrs	r2, r1
 8000d5e:	621a      	str	r2, [r3, #32]
	}

	// control peripheral clk and PE
	I2C_handle->pI2Cx->CR1 |= ENABLE;
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	681a      	ldr	r2, [r3, #0]
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	681b      	ldr	r3, [r3, #0]
 8000d6a:	f042 0201 	orr.w	r2, r2, #1
 8000d6e:	601a      	str	r2, [r3, #0]
}
 8000d70:	bf00      	nop
 8000d72:	3710      	adds	r7, #16
 8000d74:	46bd      	mov	sp, r7
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	2000000c 	.word	0x2000000c
 8000d7c:	431bde83 	.word	0x431bde83
 8000d80:	000186a0 	.word	0x000186a0

08000d84 <GetFlagStatus>:

uint8_t GetFlagStatus(I2C_TypeDef *pI2Cx, uint16_t flag) {
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
 8000d8c:	460b      	mov	r3, r1
 8000d8e:	807b      	strh	r3, [r7, #2]
	if (pI2Cx->SR1 & flag)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	695a      	ldr	r2, [r3, #20]
 8000d94:	887b      	ldrh	r3, [r7, #2]
 8000d96:	4013      	ands	r3, r2
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d001      	beq.n	8000da0 <GetFlagStatus+0x1c>
		return FLAG_SET;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	e000      	b.n	8000da2 <GetFlagStatus+0x1e>
	return FLAG_NOT_SET;
 8000da0:	2300      	movs	r3, #0
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr

08000dae <GenerateStartCondition>:

void GenerateStartCondition(volatile I2C_Handle_t *I2C_handle) {
 8000dae:	b480      	push	{r7}
 8000db0:	b083      	sub	sp, #12
 8000db2:	af00      	add	r7, sp, #0
 8000db4:	6078      	str	r0, [r7, #4]
	I2C_handle->pI2Cx->CR1 |= I2C_CR1_START;
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681a      	ldr	r2, [r3, #0]
 8000dbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8000dc0:	601a      	str	r2, [r3, #0]
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <GenerateStopCondition>:

static void GenerateStopCondition(volatile I2C_Handle_t *I2C_handle) {
 8000dce:	b480      	push	{r7}
 8000dd0:	b083      	sub	sp, #12
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
//	printf ("STOP condition...\n");
	I2C_handle->pI2Cx->CR1 |= I2C_CR1_STOP;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	681a      	ldr	r2, [r3, #0]
 8000ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000de0:	601a      	str	r2, [r3, #0]
}
 8000de2:	bf00      	nop
 8000de4:	370c      	adds	r7, #12
 8000de6:	46bd      	mov	sp, r7
 8000de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dec:	4770      	bx	lr

08000dee <I2C_WriteSlaveAddress>:

static void I2C_WriteSlaveAddress(volatile I2C_Handle_t *I2C_handle, uint8_t operation) {
 8000dee:	b480      	push	{r7}
 8000df0:	b085      	sub	sp, #20
 8000df2:	af00      	add	r7, sp, #0
 8000df4:	6078      	str	r0, [r7, #4]
 8000df6:	460b      	mov	r3, r1
 8000df8:	70fb      	strb	r3, [r7, #3]
//	printf ("Writing slave address: %d\n", I2C_handle->I2C_Config.I2C_DeviceAddress);

	uint8_t slaveAddress = I2C_handle->I2C_Config.I2C_DeviceAddress;
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	7a1b      	ldrb	r3, [r3, #8]
 8000dfe:	73fb      	strb	r3, [r7, #15]
	slaveAddress <<= 1;
 8000e00:	7bfb      	ldrb	r3, [r7, #15]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	73fb      	strb	r3, [r7, #15]
	slaveAddress = operation == WRITE ? (slaveAddress & ~1) : (slaveAddress | 1);
 8000e06:	78fb      	ldrb	r3, [r7, #3]
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d104      	bne.n	8000e16 <I2C_WriteSlaveAddress+0x28>
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
 8000e0e:	f023 0301 	bic.w	r3, r3, #1
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	e003      	b.n	8000e1e <I2C_WriteSlaveAddress+0x30>
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
 8000e18:	f043 0301 	orr.w	r3, r3, #1
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	73fb      	strb	r3, [r7, #15]

	I2C_handle->pI2Cx->DR = slaveAddress;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	7bfa      	ldrb	r2, [r7, #15]
 8000e26:	611a      	str	r2, [r3, #16]
}
 8000e28:	bf00      	nop
 8000e2a:	3714      	adds	r7, #20
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr

08000e34 <I2C_ClearADDRFlag>:

// read SR1 and SR2 registers to clear ADDR flag
static void I2C_ClearADDRFlag(I2C_TypeDef *pI2Cx) {
 8000e34:	b480      	push	{r7}
 8000e36:	b085      	sub	sp, #20
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
	uint32_t dummyRead;
	dummyRead = pI2Cx->SR1;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	695b      	ldr	r3, [r3, #20]
 8000e40:	60fb      	str	r3, [r7, #12]
    dummyRead = pI2Cx->SR2;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	699b      	ldr	r3, [r3, #24]
 8000e46:	60fb      	str	r3, [r7, #12]
}
 8000e48:	bf00      	nop
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr

08000e54 <I2C_ControlAcking>:
static void I2C_ControlAcking(I2C_TypeDef *pI2Cx, uint8_t enable)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	460b      	mov	r3, r1
 8000e5e:	70fb      	strb	r3, [r7, #3]
//	pI2Cx->CR1 = enable ? (pI2Cx->CR1 | (1 << I2C_CR1_ACK)) : (pI2Cx->CR1 & ~(1 << I2C_CR1_ACK));
	if (enable)
 8000e60:	78fb      	ldrb	r3, [r7, #3]
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d006      	beq.n	8000e74 <I2C_ControlAcking+0x20>
	{
		pI2Cx->CR1 |= I2C_CR1_ACK;
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pI2Cx->CR1 &= ~(I2C_CR1_ACK);
	}
}
 8000e72:	e005      	b.n	8000e80 <I2C_ControlAcking+0x2c>
		pI2Cx->CR1 &= ~(I2C_CR1_ACK);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	601a      	str	r2, [r3, #0]
}
 8000e80:	bf00      	nop
 8000e82:	370c      	adds	r7, #12
 8000e84:	46bd      	mov	sp, r7
 8000e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8a:	4770      	bx	lr

08000e8c <setRef>:

void setRef(I2C_Handle_t *I2C_handle) 		// todo
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
	I2C_handle_p = I2C_handle;
 8000e94:	4a04      	ldr	r2, [pc, #16]	; (8000ea8 <setRef+0x1c>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6013      	str	r3, [r2, #0]
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
 8000ea6:	bf00      	nop
 8000ea8:	20000098 	.word	0x20000098

08000eac <HAL_MasterTransmitInterrupt>:

I2C_State HAL_MasterTransmitInterrupt()
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0

	I2C_State i2cState = I2C_handle_p->I2C_State;
 8000eb2:	4b0e      	ldr	r3, [pc, #56]	; (8000eec <HAL_MasterTransmitInterrupt+0x40>)
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	7b1b      	ldrb	r3, [r3, #12]
 8000eb8:	71fb      	strb	r3, [r7, #7]

	if (i2cState != I2C_TX_BUSY && i2cState != I2C_RX_BUSY)
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	2b02      	cmp	r3, #2
 8000ebe:	d010      	beq.n	8000ee2 <HAL_MasterTransmitInterrupt+0x36>
 8000ec0:	79fb      	ldrb	r3, [r7, #7]
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d00d      	beq.n	8000ee2 <HAL_MasterTransmitInterrupt+0x36>
	{
		printf ("TXing...\n");
 8000ec6:	480a      	ldr	r0, [pc, #40]	; (8000ef0 <HAL_MasterTransmitInterrupt+0x44>)
 8000ec8:	f001 ff16 	bl	8002cf8 <puts>
//		I2C_handle_p = I2C_handle;

		I2C_handle_p->I2C_State = I2C_TX_BUSY;		// set i2c transaction state
 8000ecc:	4b07      	ldr	r3, [pc, #28]	; (8000eec <HAL_MasterTransmitInterrupt+0x40>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	2202      	movs	r2, #2
 8000ed2:	731a      	strb	r2, [r3, #12]

		GenerateStartCondition(I2C_handle_p);
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <HAL_MasterTransmitInterrupt+0x40>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff68 	bl	8000dae <GenerateStartCondition>

		I2C_SetCtrlBits();							// enable control bits
 8000ede:	f000 fb51 	bl	8001584 <I2C_SetCtrlBits>
	}
	return i2cState;
 8000ee2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000098 	.word	0x20000098
 8000ef0:	08003870 	.word	0x08003870

08000ef4 <HAL_MasterReceiveInterrupt>:

I2C_State HAL_MasterReceiveInterrupt()
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b082      	sub	sp, #8
 8000ef8:	af00      	add	r7, sp, #0

	I2C_State i2cState = I2C_handle_p->I2C_State;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <HAL_MasterReceiveInterrupt+0x40>)
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	7b1b      	ldrb	r3, [r3, #12]
 8000f00:	71fb      	strb	r3, [r7, #7]

	if (i2cState != I2C_RX_BUSY && i2cState != I2C_TX_BUSY)
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d010      	beq.n	8000f2a <HAL_MasterReceiveInterrupt+0x36>
 8000f08:	79fb      	ldrb	r3, [r7, #7]
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d00d      	beq.n	8000f2a <HAL_MasterReceiveInterrupt+0x36>
	{
		printf ("RXing...\n");
 8000f0e:	480a      	ldr	r0, [pc, #40]	; (8000f38 <HAL_MasterReceiveInterrupt+0x44>)
 8000f10:	f001 fef2 	bl	8002cf8 <puts>
		I2C_handle_p->I2C_State = I2C_RX_BUSY;
 8000f14:	4b07      	ldr	r3, [pc, #28]	; (8000f34 <HAL_MasterReceiveInterrupt+0x40>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	2201      	movs	r2, #1
 8000f1a:	731a      	strb	r2, [r3, #12]

		GenerateStartCondition(I2C_handle_p);
 8000f1c:	4b05      	ldr	r3, [pc, #20]	; (8000f34 <HAL_MasterReceiveInterrupt+0x40>)
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	4618      	mov	r0, r3
 8000f22:	f7ff ff44 	bl	8000dae <GenerateStartCondition>

		I2C_SetCtrlBits();
 8000f26:	f000 fb2d 	bl	8001584 <I2C_SetCtrlBits>
	}

	return i2cState;
 8000f2a:	79fb      	ldrb	r3, [r7, #7]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	3708      	adds	r7, #8
 8000f30:	46bd      	mov	sp, r7
 8000f32:	bd80      	pop	{r7, pc}
 8000f34:	20000098 	.word	0x20000098
 8000f38:	0800387c 	.word	0x0800387c

08000f3c <I2C1_EV_IRQHandler>:
//	}
//
//}

void I2C1_EV_IRQHandler (void)
{
 8000f3c:	b590      	push	{r4, r7, lr}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
//	printf ("\nI2C IRQ handler!...\n");

	uint8_t eventInterrupt = (I2C_handle_p->pI2Cx->CR2 & I2C_CR2_ITEVTEN) >> I2C_CR2_ITEVTEN_Pos;
 8000f42:	4b7a      	ldr	r3, [pc, #488]	; (800112c <I2C1_EV_IRQHandler+0x1f0>)
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	685b      	ldr	r3, [r3, #4]
 8000f4a:	0a5b      	lsrs	r3, r3, #9
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	f003 0301 	and.w	r3, r3, #1
 8000f52:	71fb      	strb	r3, [r7, #7]
	uint8_t bufferInterrupt = (I2C_handle_p->pI2Cx->CR2 & I2C_CR2_ITBUFEN) >> I2C_CR2_ITBUFEN_Pos;
 8000f54:	4b75      	ldr	r3, [pc, #468]	; (800112c <I2C1_EV_IRQHandler+0x1f0>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	685b      	ldr	r3, [r3, #4]
 8000f5c:	0a9b      	lsrs	r3, r3, #10
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	71bb      	strb	r3, [r7, #6]
	uint8_t temp;

	if (eventInterrupt)
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	f000 80db 	beq.w	8001124 <I2C1_EV_IRQHandler+0x1e8>
	{
		//	validate the completion of START condition
		temp =  (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_SB) >> I2C_SR1_SB_Pos;
 8000f6e:	4b6f      	ldr	r3, [pc, #444]	; (800112c <I2C1_EV_IRQHandler+0x1f0>)
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	695b      	ldr	r3, [r3, #20]
 8000f76:	b2db      	uxtb	r3, r3
 8000f78:	f003 0301 	and.w	r3, r3, #1
 8000f7c:	717b      	strb	r3, [r7, #5]
		if (temp)
 8000f7e:	797b      	ldrb	r3, [r7, #5]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d018      	beq.n	8000fb6 <I2C1_EV_IRQHandler+0x7a>
		{
			if (I2C_handle_p->I2C_State == I2C_TX_BUSY)
 8000f84:	4b69      	ldr	r3, [pc, #420]	; (800112c <I2C1_EV_IRQHandler+0x1f0>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	7b1b      	ldrb	r3, [r3, #12]
 8000f8a:	b2db      	uxtb	r3, r3
 8000f8c:	2b02      	cmp	r3, #2
 8000f8e:	d106      	bne.n	8000f9e <I2C1_EV_IRQHandler+0x62>
			{
				//printf ("Writing slave address: %d\n", I2C_handle_p->I2C_Config.I2C_DeviceAddress);
				I2C_WriteSlaveAddress(I2C_handle_p, WRITE);		// write slave address along with write bit
 8000f90:	4b66      	ldr	r3, [pc, #408]	; (800112c <I2C1_EV_IRQHandler+0x1f0>)
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	2100      	movs	r1, #0
 8000f96:	4618      	mov	r0, r3
 8000f98:	f7ff ff29 	bl	8000dee <I2C_WriteSlaveAddress>
 8000f9c:	e00b      	b.n	8000fb6 <I2C1_EV_IRQHandler+0x7a>
			}
			else if (I2C_handle_p->I2C_State == I2C_RX_BUSY)
 8000f9e:	4b63      	ldr	r3, [pc, #396]	; (800112c <I2C1_EV_IRQHandler+0x1f0>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	7b1b      	ldrb	r3, [r3, #12]
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d105      	bne.n	8000fb6 <I2C1_EV_IRQHandler+0x7a>
			{
				I2C_WriteSlaveAddress(I2C_handle_p, READ);		// write slave address along with read bit
 8000faa:	4b60      	ldr	r3, [pc, #384]	; (800112c <I2C1_EV_IRQHandler+0x1f0>)
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	2101      	movs	r1, #1
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	f7ff ff1c 	bl	8000dee <I2C_WriteSlaveAddress>
			}
		}

		// ADDR
		temp = (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_ADDR) >> I2C_SR1_ADDR_Pos;
 8000fb6:	4b5d      	ldr	r3, [pc, #372]	; (800112c <I2C1_EV_IRQHandler+0x1f0>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	695b      	ldr	r3, [r3, #20]
 8000fbe:	085b      	lsrs	r3, r3, #1
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	717b      	strb	r3, [r7, #5]
		if (temp)
 8000fc8:	797b      	ldrb	r3, [r7, #5]
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d01f      	beq.n	800100e <I2C1_EV_IRQHandler+0xd2>
		{
			// RX
			if (I2C_handle_p->I2C_State == I2C_RX_BUSY)
 8000fce:	4b57      	ldr	r3, [pc, #348]	; (800112c <I2C1_EV_IRQHandler+0x1f0>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	7b1b      	ldrb	r3, [r3, #12]
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d113      	bne.n	8001002 <I2C1_EV_IRQHandler+0xc6>
			{
				if (I2C_handle_p->rxBufferLength == 2)
 8000fda:	4b54      	ldr	r3, [pc, #336]	; (800112c <I2C1_EV_IRQHandler+0x1f0>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	7edb      	ldrb	r3, [r3, #27]
 8000fe0:	b2db      	uxtb	r3, r3
 8000fe2:	2b02      	cmp	r3, #2
 8000fe4:	d10d      	bne.n	8001002 <I2C1_EV_IRQHandler+0xc6>
				{
					I2C_ControlAcking(I2C_handle_p->pI2Cx, RESET);
 8000fe6:	4b51      	ldr	r3, [pc, #324]	; (800112c <I2C1_EV_IRQHandler+0x1f0>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	2100      	movs	r1, #0
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff ff30 	bl	8000e54 <I2C_ControlAcking>
					I2C_handle_p->pI2Cx->CR1 |= 1 << I2C_CR1_POS_Pos;
 8000ff4:	4b4d      	ldr	r3, [pc, #308]	; (800112c <I2C1_EV_IRQHandler+0x1f0>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001000:	601a      	str	r2, [r3, #0]
				}
			}

			I2C_ClearADDRFlag(I2C_handle_p->pI2Cx);				// clear address flag
 8001002:	4b4a      	ldr	r3, [pc, #296]	; (800112c <I2C1_EV_IRQHandler+0x1f0>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ff13 	bl	8000e34 <I2C_ClearADDRFlag>
		}

		// TXE, RXNE
		if (bufferInterrupt)
 800100e:	79bb      	ldrb	r3, [r7, #6]
 8001010:	2b00      	cmp	r3, #0
 8001012:	d022      	beq.n	800105a <I2C1_EV_IRQHandler+0x11e>
		{
			// TXing
			temp = (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_TXE) >> I2C_SR1_TXE_Pos;
 8001014:	4b45      	ldr	r3, [pc, #276]	; (800112c <I2C1_EV_IRQHandler+0x1f0>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	695b      	ldr	r3, [r3, #20]
 800101c:	09db      	lsrs	r3, r3, #7
 800101e:	b2db      	uxtb	r3, r3
 8001020:	f003 0301 	and.w	r3, r3, #1
 8001024:	717b      	strb	r3, [r7, #5]

			if (temp && I2C_handle_p->I2C_State == I2C_TX_BUSY)
 8001026:	797b      	ldrb	r3, [r7, #5]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d007      	beq.n	800103c <I2C1_EV_IRQHandler+0x100>
 800102c:	4b3f      	ldr	r3, [pc, #252]	; (800112c <I2C1_EV_IRQHandler+0x1f0>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	7b1b      	ldrb	r3, [r3, #12]
 8001032:	b2db      	uxtb	r3, r3
 8001034:	2b02      	cmp	r3, #2
 8001036:	d101      	bne.n	800103c <I2C1_EV_IRQHandler+0x100>
			{
				I2C_TXE_Interrupt();
 8001038:	f000 f8c8 	bl	80011cc <I2C_TXE_Interrupt>
			}

			// RXing
			temp = (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_RXNE) >> I2C_SR1_RXNE_Pos;
 800103c:	4b3b      	ldr	r3, [pc, #236]	; (800112c <I2C1_EV_IRQHandler+0x1f0>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	695b      	ldr	r3, [r3, #20]
 8001044:	099b      	lsrs	r3, r3, #6
 8001046:	b2db      	uxtb	r3, r3
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	717b      	strb	r3, [r7, #5]

			if (temp && I2C_handle_p->I2C_State == I2C_RX_BUSY)
 800104e:	797b      	ldrb	r3, [r7, #5]
 8001050:	2b00      	cmp	r3, #0
 8001052:	d002      	beq.n	800105a <I2C1_EV_IRQHandler+0x11e>
 8001054:	4b35      	ldr	r3, [pc, #212]	; (800112c <I2C1_EV_IRQHandler+0x1f0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	7b1b      	ldrb	r3, [r3, #12]
//				I2C_RXNE_Interrupt();
			}
		}

		//BTF
		temp = (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_BTF) >> I2C_SR1_BTF_Pos;
 800105a:	4b34      	ldr	r3, [pc, #208]	; (800112c <I2C1_EV_IRQHandler+0x1f0>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	695b      	ldr	r3, [r3, #20]
 8001062:	089b      	lsrs	r3, r3, #2
 8001064:	b2db      	uxtb	r3, r3
 8001066:	f003 0301 	and.w	r3, r3, #1
 800106a:	717b      	strb	r3, [r7, #5]
		if (temp)
 800106c:	797b      	ldrb	r3, [r7, #5]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d058      	beq.n	8001124 <I2C1_EV_IRQHandler+0x1e8>
		{
			if (I2C_handle_p->I2C_State == I2C_TX_BUSY)
 8001072:	4b2e      	ldr	r3, [pc, #184]	; (800112c <I2C1_EV_IRQHandler+0x1f0>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	7b1b      	ldrb	r3, [r3, #12]
 8001078:	b2db      	uxtb	r3, r3
 800107a:	2b02      	cmp	r3, #2
 800107c:	d10d      	bne.n	800109a <I2C1_EV_IRQHandler+0x15e>
			{
				if (!I2C_handle_p->txBufferLength)
 800107e:	4b2b      	ldr	r3, [pc, #172]	; (800112c <I2C1_EV_IRQHandler+0x1f0>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	7e9b      	ldrb	r3, [r3, #26]
 8001084:	b2db      	uxtb	r3, r3
 8001086:	2b00      	cmp	r3, #0
 8001088:	d14c      	bne.n	8001124 <I2C1_EV_IRQHandler+0x1e8>
				{
					GenerateStopCondition(I2C_handle_p);
 800108a:	4b28      	ldr	r3, [pc, #160]	; (800112c <I2C1_EV_IRQHandler+0x1f0>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4618      	mov	r0, r3
 8001090:	f7ff fe9d 	bl	8000dce <GenerateStopCondition>
					I2C_StopTransmission();
 8001094:	f000 fa58 	bl	8001548 <I2C_StopTransmission>
			}
		}

	}

}
 8001098:	e044      	b.n	8001124 <I2C1_EV_IRQHandler+0x1e8>
			else if (I2C_handle_p->I2C_State == I2C_RX_BUSY)			// RXNE=1, BTF=1, LEN=0 --> STOP
 800109a:	4b24      	ldr	r3, [pc, #144]	; (800112c <I2C1_EV_IRQHandler+0x1f0>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	7b1b      	ldrb	r3, [r3, #12]
 80010a0:	b2db      	uxtb	r3, r3
 80010a2:	2b01      	cmp	r3, #1
 80010a4:	d13e      	bne.n	8001124 <I2C1_EV_IRQHandler+0x1e8>
				if (I2C_handle_p->rxBufferLength == 2)
 80010a6:	4b21      	ldr	r3, [pc, #132]	; (800112c <I2C1_EV_IRQHandler+0x1f0>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	7edb      	ldrb	r3, [r3, #27]
 80010ac:	b2db      	uxtb	r3, r3
 80010ae:	2b02      	cmp	r3, #2
 80010b0:	d138      	bne.n	8001124 <I2C1_EV_IRQHandler+0x1e8>
					GenerateStopCondition(I2C_handle_p);
 80010b2:	4b1e      	ldr	r3, [pc, #120]	; (800112c <I2C1_EV_IRQHandler+0x1f0>)
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	4618      	mov	r0, r3
 80010b8:	f7ff fe89 	bl	8000dce <GenerateStopCondition>
					I2C_handle_p->pRxBuffer[I2C_handle_p->rxStartIndex++] = (uint8_t) I2C_handle_p->pI2Cx->DR;
 80010bc:	4b1b      	ldr	r3, [pc, #108]	; (800112c <I2C1_EV_IRQHandler+0x1f0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	6918      	ldr	r0, [r3, #16]
 80010c4:	4b19      	ldr	r3, [pc, #100]	; (800112c <I2C1_EV_IRQHandler+0x1f0>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	6959      	ldr	r1, [r3, #20]
 80010ca:	4b18      	ldr	r3, [pc, #96]	; (800112c <I2C1_EV_IRQHandler+0x1f0>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	7e1a      	ldrb	r2, [r3, #24]
 80010d0:	b2d2      	uxtb	r2, r2
 80010d2:	1c54      	adds	r4, r2, #1
 80010d4:	b2e4      	uxtb	r4, r4
 80010d6:	761c      	strb	r4, [r3, #24]
 80010d8:	4613      	mov	r3, r2
 80010da:	440b      	add	r3, r1
 80010dc:	b2c2      	uxtb	r2, r0
 80010de:	701a      	strb	r2, [r3, #0]
					I2C_handle_p->rxBufferLength--;
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <I2C1_EV_IRQHandler+0x1f0>)
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	7eda      	ldrb	r2, [r3, #27]
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	3a01      	subs	r2, #1
 80010ea:	b2d2      	uxtb	r2, r2
 80010ec:	76da      	strb	r2, [r3, #27]
					I2C_handle_p->pRxBuffer[I2C_handle_p->rxStartIndex++] = (uint8_t) I2C_handle_p->pI2Cx->DR;
 80010ee:	4b0f      	ldr	r3, [pc, #60]	; (800112c <I2C1_EV_IRQHandler+0x1f0>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6918      	ldr	r0, [r3, #16]
 80010f6:	4b0d      	ldr	r3, [pc, #52]	; (800112c <I2C1_EV_IRQHandler+0x1f0>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	6959      	ldr	r1, [r3, #20]
 80010fc:	4b0b      	ldr	r3, [pc, #44]	; (800112c <I2C1_EV_IRQHandler+0x1f0>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	7e1a      	ldrb	r2, [r3, #24]
 8001102:	b2d2      	uxtb	r2, r2
 8001104:	1c54      	adds	r4, r2, #1
 8001106:	b2e4      	uxtb	r4, r4
 8001108:	761c      	strb	r4, [r3, #24]
 800110a:	4613      	mov	r3, r2
 800110c:	440b      	add	r3, r1
 800110e:	b2c2      	uxtb	r2, r0
 8001110:	701a      	strb	r2, [r3, #0]
					I2C_handle_p->rxBufferLength--;
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <I2C1_EV_IRQHandler+0x1f0>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	7eda      	ldrb	r2, [r3, #27]
 8001118:	b2d2      	uxtb	r2, r2
 800111a:	3a01      	subs	r2, #1
 800111c:	b2d2      	uxtb	r2, r2
 800111e:	76da      	strb	r2, [r3, #27]
					I2C_StopTransmission();
 8001120:	f000 fa12 	bl	8001548 <I2C_StopTransmission>
}
 8001124:	bf00      	nop
 8001126:	370c      	adds	r7, #12
 8001128:	46bd      	mov	sp, r7
 800112a:	bd90      	pop	{r4, r7, pc}
 800112c:	20000098 	.word	0x20000098

08001130 <I2C_HandleInterruptEvents>:

void I2C_HandleInterruptEvents (I2C_ErrorEvents errorEvent)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	71fb      	strb	r3, [r7, #7]
	if (errorEvent == I2C_ERROR_AF)
 800113a:	79fb      	ldrb	r3, [r7, #7]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d109      	bne.n	8001154 <I2C_HandleInterruptEvents+0x24>
	{
		printf ("Received ACK failure...\n");
 8001140:	4806      	ldr	r0, [pc, #24]	; (800115c <I2C_HandleInterruptEvents+0x2c>)
 8001142:	f001 fdd9 	bl	8002cf8 <puts>
		I2C_StopTransmission();
 8001146:	f000 f9ff 	bl	8001548 <I2C_StopTransmission>
		GenerateStopCondition(I2C_handle_p);
 800114a:	4b05      	ldr	r3, [pc, #20]	; (8001160 <I2C_HandleInterruptEvents+0x30>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4618      	mov	r0, r3
 8001150:	f7ff fe3d 	bl	8000dce <GenerateStopCondition>
	}
}
 8001154:	bf00      	nop
 8001156:	3708      	adds	r7, #8
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}
 800115c:	08003888 	.word	0x08003888
 8001160:	20000098 	.word	0x20000098

08001164 <I2C1_ER_IRQHandler>:

void I2C1_ER_IRQHandler()
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b082      	sub	sp, #8
 8001168:	af00      	add	r7, sp, #0
	printf ("ERROR IRQ handler...\n");
 800116a:	4816      	ldr	r0, [pc, #88]	; (80011c4 <I2C1_ER_IRQHandler+0x60>)
 800116c:	f001 fdc4 	bl	8002cf8 <puts>
	I2C_handle_p->I2C_State = I2C_ERROR;
 8001170:	4b15      	ldr	r3, [pc, #84]	; (80011c8 <I2C1_ER_IRQHandler+0x64>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	2203      	movs	r2, #3
 8001176:	731a      	strb	r2, [r3, #12]

	uint8_t errorInterrupt = (I2C_handle_p->pI2Cx->CR2 & I2C_CR2_ITERREN) >> I2C_CR2_ITERREN_Pos;
 8001178:	4b13      	ldr	r3, [pc, #76]	; (80011c8 <I2C1_ER_IRQHandler+0x64>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	0a1b      	lsrs	r3, r3, #8
 8001182:	b2db      	uxtb	r3, r3
 8001184:	f003 0301 	and.w	r3, r3, #1
 8001188:	71fb      	strb	r3, [r7, #7]
	uint8_t temp;
	if (errorInterrupt)
 800118a:	79fb      	ldrb	r3, [r7, #7]
 800118c:	2b00      	cmp	r3, #0
 800118e:	d015      	beq.n	80011bc <I2C1_ER_IRQHandler+0x58>
	{
		// ACK failure
		temp = (I2C_handle_p->pI2Cx->SR1 & I2C_SR1_AF) >> I2C_SR1_AF_Pos;
 8001190:	4b0d      	ldr	r3, [pc, #52]	; (80011c8 <I2C1_ER_IRQHandler+0x64>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	695b      	ldr	r3, [r3, #20]
 8001198:	0a9b      	lsrs	r3, r3, #10
 800119a:	b2db      	uxtb	r3, r3
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	71bb      	strb	r3, [r7, #6]
		if (temp)
 80011a2:	79bb      	ldrb	r3, [r7, #6]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d009      	beq.n	80011bc <I2C1_ER_IRQHandler+0x58>
		{
			// clear ACK failure bit
			I2C_handle_p->pI2Cx->SR1 &= ~(I2C_SR1_AF);
 80011a8:	4b07      	ldr	r3, [pc, #28]	; (80011c8 <I2C1_ER_IRQHandler+0x64>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	695a      	ldr	r2, [r3, #20]
 80011b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80011b4:	615a      	str	r2, [r3, #20]
			I2C_HandleInterruptEvents(I2C_ERROR_AF);
 80011b6:	2000      	movs	r0, #0
 80011b8:	f7ff ffba 	bl	8001130 <I2C_HandleInterruptEvents>
		}

	}

}
 80011bc:	bf00      	nop
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	080038a0 	.word	0x080038a0
 80011c8:	20000098 	.word	0x20000098

080011cc <I2C_TXE_Interrupt>:

/*
 * @I2C_TXE_Interrupt: data register = empty
 */
void I2C_TXE_Interrupt ()
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
	if (I2C_handle_p->txBufferLength)
 80011d0:	4b0e      	ldr	r3, [pc, #56]	; (800120c <I2C_TXE_Interrupt+0x40>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	7e9b      	ldrb	r3, [r3, #26]
 80011d6:	b2db      	uxtb	r3, r3
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d011      	beq.n	8001200 <I2C_TXE_Interrupt+0x34>
	{
//		printf ("Writing TX data: %d\n", *I2C_handle_p->txBuffer);
		I2C_handle_p->pI2Cx->DR = (*I2C_handle_p->txBuffer)++;
 80011dc:	4b0b      	ldr	r3, [pc, #44]	; (800120c <I2C_TXE_Interrupt+0x40>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	781a      	ldrb	r2, [r3, #0]
 80011e4:	1c51      	adds	r1, r2, #1
 80011e6:	b2c9      	uxtb	r1, r1
 80011e8:	7019      	strb	r1, [r3, #0]
 80011ea:	4b08      	ldr	r3, [pc, #32]	; (800120c <I2C_TXE_Interrupt+0x40>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	611a      	str	r2, [r3, #16]
		I2C_handle_p->txBufferLength--;
 80011f2:	4b06      	ldr	r3, [pc, #24]	; (800120c <I2C_TXE_Interrupt+0x40>)
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	7e9a      	ldrb	r2, [r3, #26]
 80011f8:	b2d2      	uxtb	r2, r2
 80011fa:	3a01      	subs	r2, #1
 80011fc:	b2d2      	uxtb	r2, r2
 80011fe:	769a      	strb	r2, [r3, #26]
	}
}
 8001200:	bf00      	nop
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr
 800120a:	bf00      	nop
 800120c:	20000098 	.word	0x20000098

08001210 <HAL_I2C_Master_Transmit>:

HAL_StatusTypeDef HAL_I2C_Master_Transmit (I2C_Handle_t *I2C_handle, uint8_t *data, uint8_t size)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	4613      	mov	r3, r2
 800121c:	71fb      	strb	r3, [r7, #7]
	// generate start condition
	GenerateStartCondition(I2C_handle);
 800121e:	68f8      	ldr	r0, [r7, #12]
 8001220:	f7ff fdc5 	bl	8000dae <GenerateStartCondition>

	// validate the completion of start condition
	while (!GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_SB) && WaitTillTimeout(5));
 8001224:	bf00      	nop
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	2101      	movs	r1, #1
 800122c:	4618      	mov	r0, r3
 800122e:	f7ff fda9 	bl	8000d84 <GetFlagStatus>
 8001232:	4603      	mov	r3, r0
 8001234:	2b00      	cmp	r3, #0
 8001236:	d105      	bne.n	8001244 <HAL_I2C_Master_Transmit+0x34>
 8001238:	2005      	movs	r0, #5
 800123a:	f000 f9c1 	bl	80015c0 <WaitTillTimeout>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1f0      	bne.n	8001226 <HAL_I2C_Master_Transmit+0x16>

	// write slave address along with write bit
	I2C_WriteSlaveAddress(I2C_handle, WRITE);
 8001244:	2100      	movs	r1, #0
 8001246:	68f8      	ldr	r0, [r7, #12]
 8001248:	f7ff fdd1 	bl	8000dee <I2C_WriteSlaveAddress>

	// wait for address to be sent
	while (!GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_ADDR) && WaitTillTimeout(5));
 800124c:	bf00      	nop
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	2102      	movs	r1, #2
 8001254:	4618      	mov	r0, r3
 8001256:	f7ff fd95 	bl	8000d84 <GetFlagStatus>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d105      	bne.n	800126c <HAL_I2C_Master_Transmit+0x5c>
 8001260:	2005      	movs	r0, #5
 8001262:	f000 f9ad 	bl	80015c0 <WaitTillTimeout>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d1f0      	bne.n	800124e <HAL_I2C_Master_Transmit+0x3e>

	// clear address flag
	I2C_ClearADDRFlag(I2C_handle->pI2Cx);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fddf 	bl	8000e34 <I2C_ClearADDRFlag>
	/* write to the SDA line */

	// wait for TXE bit to set
//	while(!GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_TXE) && WaitTillTimeout(5)); // todo remove!

	for (; size > 0; size--)
 8001276:	e029      	b.n	80012cc <HAL_I2C_Master_Transmit+0xbc>
	{
		// making sure data register is empty prior to writing to it
		while (!GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_TXE) && WaitTillTimeout(5));
 8001278:	bf00      	nop
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2180      	movs	r1, #128	; 0x80
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fd7f 	bl	8000d84 <GetFlagStatus>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d105      	bne.n	8001298 <HAL_I2C_Master_Transmit+0x88>
 800128c:	2005      	movs	r0, #5
 800128e:	f000 f997 	bl	80015c0 <WaitTillTimeout>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1f0      	bne.n	800127a <HAL_I2C_Master_Transmit+0x6a>

		I2C_handle->pI2Cx->DR = *data++;
 8001298:	68bb      	ldr	r3, [r7, #8]
 800129a:	1c5a      	adds	r2, r3, #1
 800129c:	60ba      	str	r2, [r7, #8]
 800129e:	781a      	ldrb	r2, [r3, #0]
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	611a      	str	r2, [r3, #16]

		while (!GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_BTF) && WaitTillTimeout(5));
 80012a6:	bf00      	nop
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	2104      	movs	r1, #4
 80012ae:	4618      	mov	r0, r3
 80012b0:	f7ff fd68 	bl	8000d84 <GetFlagStatus>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d105      	bne.n	80012c6 <HAL_I2C_Master_Transmit+0xb6>
 80012ba:	2005      	movs	r0, #5
 80012bc:	f000 f980 	bl	80015c0 <WaitTillTimeout>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1f0      	bne.n	80012a8 <HAL_I2C_Master_Transmit+0x98>
	for (; size > 0; size--)
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	3b01      	subs	r3, #1
 80012ca:	71fb      	strb	r3, [r7, #7]
 80012cc:	79fb      	ldrb	r3, [r7, #7]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d1d2      	bne.n	8001278 <HAL_I2C_Master_Transmit+0x68>
//		if (GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_BTF) == RESET) {
//			return HAL_ERROR;
//		}
	}

	GenerateStopCondition(I2C_handle);
 80012d2:	68f8      	ldr	r0, [r7, #12]
 80012d4:	f7ff fd7b 	bl	8000dce <GenerateStopCondition>

	return HAL_OK;
 80012d8:	2300      	movs	r3, #0
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3710      	adds	r7, #16
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <HAL_I2C_Master_Receive>:
//	}

}

void HAL_I2C_Master_Receive (I2C_Handle_t *I2C_handle, uint8_t *rxBuffer, uint8_t size, uint8_t startIndex)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	60f8      	str	r0, [r7, #12]
 80012ec:	60b9      	str	r1, [r7, #8]
 80012ee:	4611      	mov	r1, r2
 80012f0:	461a      	mov	r2, r3
 80012f2:	460b      	mov	r3, r1
 80012f4:	71fb      	strb	r3, [r7, #7]
 80012f6:	4613      	mov	r3, r2
 80012f8:	71bb      	strb	r3, [r7, #6]
	// generate start condition
	GenerateStartCondition(I2C_handle);
 80012fa:	68f8      	ldr	r0, [r7, #12]
 80012fc:	f7ff fd57 	bl	8000dae <GenerateStartCondition>

	// validate the completion of start condition
	while (!GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_SB));
 8001300:	bf00      	nop
 8001302:	68fb      	ldr	r3, [r7, #12]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	2101      	movs	r1, #1
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fd3b 	bl	8000d84 <GetFlagStatus>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d0f6      	beq.n	8001302 <HAL_I2C_Master_Receive+0x1e>

	// write slave address
	I2C_WriteSlaveAddress(I2C_handle, READ);
 8001314:	2101      	movs	r1, #1
 8001316:	68f8      	ldr	r0, [r7, #12]
 8001318:	f7ff fd69 	bl	8000dee <I2C_WriteSlaveAddress>

	// wait for address to be sent
	while (!GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_ADDR) && WaitTillTimeout(5));
 800131c:	bf00      	nop
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	2102      	movs	r1, #2
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff fd2d 	bl	8000d84 <GetFlagStatus>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d105      	bne.n	800133c <HAL_I2C_Master_Receive+0x58>
 8001330:	2005      	movs	r0, #5
 8001332:	f000 f945 	bl	80015c0 <WaitTillTimeout>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d1f0      	bne.n	800131e <HAL_I2C_Master_Receive+0x3a>

	switch (size) {
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	2b01      	cmp	r3, #1
 8001340:	d002      	beq.n	8001348 <HAL_I2C_Master_Receive+0x64>
 8001342:	2b02      	cmp	r3, #2
 8001344:	d00f      	beq.n	8001366 <HAL_I2C_Master_Receive+0x82>
 8001346:	e022      	b.n	800138e <HAL_I2C_Master_Receive+0xaa>
		case 1:
			I2C_ControlAcking(I2C_handle->pI2Cx, RESET);	// disable ACK
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	2100      	movs	r1, #0
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff fd80 	bl	8000e54 <I2C_ControlAcking>
			I2C_ClearADDRFlag(I2C_handle->pI2Cx);			// clear ADDR flag
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff fd6b 	bl	8000e34 <I2C_ClearADDRFlag>
			GenerateStopCondition(I2C_handle);				// generate STOP condition
 800135e:	68f8      	ldr	r0, [r7, #12]
 8001360:	f7ff fd35 	bl	8000dce <GenerateStopCondition>
			break;
 8001364:	e01e      	b.n	80013a4 <HAL_I2C_Master_Receive+0xc0>

		case 2:
			I2C_ControlAcking(I2C_handle->pI2Cx, RESET);	// disable ACK
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	2100      	movs	r1, #0
 800136c:	4618      	mov	r0, r3
 800136e:	f7ff fd71 	bl	8000e54 <I2C_ControlAcking>
			I2C_handle->pI2Cx->CR1 |= 1 << 11;				// set POS
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681a      	ldr	r2, [r3, #0]
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001380:	601a      	str	r2, [r3, #0]
			I2C_ClearADDRFlag(I2C_handle->pI2Cx);			// clear ADDR flag
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	4618      	mov	r0, r3
 8001388:	f7ff fd54 	bl	8000e34 <I2C_ClearADDRFlag>
			break;
 800138c:	e00a      	b.n	80013a4 <HAL_I2C_Master_Receive+0xc0>

		default:
			I2C_ControlAcking(I2C_handle->pI2Cx, SET);		// Enable ACK
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	2101      	movs	r1, #1
 8001394:	4618      	mov	r0, r3
 8001396:	f7ff fd5d 	bl	8000e54 <I2C_ControlAcking>
			I2C_ClearADDRFlag(I2C_handle->pI2Cx);			// clear ADDR flag
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff fd48 	bl	8000e34 <I2C_ClearADDRFlag>

	}

	while (size > 0) {
 80013a4:	e0c5      	b.n	8001532 <HAL_I2C_Master_Receive+0x24e>
		if (size <= 3) {
 80013a6:	79fb      	ldrb	r3, [r7, #7]
 80013a8:	2b03      	cmp	r3, #3
 80013aa:	f200 80a6 	bhi.w	80014fa <HAL_I2C_Master_Receive+0x216>
			if (size == 1) {
 80013ae:	79fb      	ldrb	r3, [r7, #7]
 80013b0:	2b01      	cmp	r3, #1
 80013b2:	d11c      	bne.n	80013ee <HAL_I2C_Master_Receive+0x10a>
					// disable ACK
					I2C_ControlAcking(I2C_handle->pI2Cx, RESET);
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	2100      	movs	r1, #0
 80013ba:	4618      	mov	r0, r3
 80013bc:	f7ff fd4a 	bl	8000e54 <I2C_ControlAcking>

					// clear the ADDR flag
					I2C_ClearADDRFlag(I2C_handle->pI2Cx);
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff fd35 	bl	8000e34 <I2C_ClearADDRFlag>

					// wait till RXNE = 1 (Data is sent from SR to DR)
					while (!GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_RXNE));
 80013ca:	bf00      	nop
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2140      	movs	r1, #64	; 0x40
 80013d2:	4618      	mov	r0, r3
 80013d4:	f7ff fcd6 	bl	8000d84 <GetFlagStatus>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d0f6      	beq.n	80013cc <HAL_I2C_Master_Receive+0xe8>

					// generate stop
					GenerateStopCondition(I2C_handle);
 80013de:	68f8      	ldr	r0, [r7, #12]
 80013e0:	f7ff fcf5 	bl	8000dce <GenerateStopCondition>

					// read data
					rxBuffer = I2C_handle->pI2Cx->DR;
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	691b      	ldr	r3, [r3, #16]
 80013ea:	60bb      	str	r3, [r7, #8]
 80013ec:	e0a1      	b.n	8001532 <HAL_I2C_Master_Receive+0x24e>

			}

			else if (size == 2) {
 80013ee:	79fb      	ldrb	r3, [r7, #7]
 80013f0:	2b02      	cmp	r3, #2
 80013f2:	d131      	bne.n	8001458 <HAL_I2C_Master_Receive+0x174>
				// wait till BTF is set (last byte is received) - shift reg=1, DR=1
				while(!GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_BTF) && WaitTillTimeout(5));
 80013f4:	bf00      	nop
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	2104      	movs	r1, #4
 80013fc:	4618      	mov	r0, r3
 80013fe:	f7ff fcc1 	bl	8000d84 <GetFlagStatus>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d105      	bne.n	8001414 <HAL_I2C_Master_Receive+0x130>
 8001408:	2005      	movs	r0, #5
 800140a:	f000 f8d9 	bl	80015c0 <WaitTillTimeout>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d1f0      	bne.n	80013f6 <HAL_I2C_Master_Receive+0x112>

				GenerateStopCondition(I2C_handle);
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f7ff fcda 	bl	8000dce <GenerateStopCondition>
				printf ("Start_index: %d\n", startIndex);
 800141a:	79bb      	ldrb	r3, [r7, #6]
 800141c:	4619      	mov	r1, r3
 800141e:	4849      	ldr	r0, [pc, #292]	; (8001544 <HAL_I2C_Master_Receive+0x260>)
 8001420:	f001 fbf6 	bl	8002c10 <iprintf>

				rxBuffer[startIndex++] = (uint8_t) I2C_handle->pI2Cx->DR;
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	691a      	ldr	r2, [r3, #16]
 800142a:	79bb      	ldrb	r3, [r7, #6]
 800142c:	1c59      	adds	r1, r3, #1
 800142e:	71b9      	strb	r1, [r7, #6]
 8001430:	4619      	mov	r1, r3
 8001432:	68bb      	ldr	r3, [r7, #8]
 8001434:	440b      	add	r3, r1
 8001436:	b2d2      	uxtb	r2, r2
 8001438:	701a      	strb	r2, [r3, #0]
				--size;
 800143a:	79fb      	ldrb	r3, [r7, #7]
 800143c:	3b01      	subs	r3, #1
 800143e:	71fb      	strb	r3, [r7, #7]

				rxBuffer[startIndex] = (uint8_t) I2C_handle->pI2Cx->DR;
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	6919      	ldr	r1, [r3, #16]
 8001446:	79bb      	ldrb	r3, [r7, #6]
 8001448:	68ba      	ldr	r2, [r7, #8]
 800144a:	4413      	add	r3, r2
 800144c:	b2ca      	uxtb	r2, r1
 800144e:	701a      	strb	r2, [r3, #0]
				--size;
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	3b01      	subs	r3, #1
 8001454:	71fb      	strb	r3, [r7, #7]
 8001456:	e06c      	b.n	8001532 <HAL_I2C_Master_Receive+0x24e>
			}
			else if (size == 3) {
 8001458:	79fb      	ldrb	r3, [r7, #7]
 800145a:	2b03      	cmp	r3, #3
 800145c:	d169      	bne.n	8001532 <HAL_I2C_Master_Receive+0x24e>
				// wait for the second last byte to be put in SR while DR is full (RxNE=1)
				while (!GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_BTF) && WaitTillTimeout(5));
 800145e:	bf00      	nop
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	2104      	movs	r1, #4
 8001466:	4618      	mov	r0, r3
 8001468:	f7ff fc8c 	bl	8000d84 <GetFlagStatus>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d105      	bne.n	800147e <HAL_I2C_Master_Receive+0x19a>
 8001472:	2005      	movs	r0, #5
 8001474:	f000 f8a4 	bl	80015c0 <WaitTillTimeout>
 8001478:	4603      	mov	r3, r0
 800147a:	2b00      	cmp	r3, #0
 800147c:	d1f0      	bne.n	8001460 <HAL_I2C_Master_Receive+0x17c>

				// disable ACK so NACK is sent upon reception of the last byte
				I2C_ControlAcking(I2C_handle->pI2Cx, DISABLE);
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	2100      	movs	r1, #0
 8001484:	4618      	mov	r0, r3
 8001486:	f7ff fce5 	bl	8000e54 <I2C_ControlAcking>

				// read the first byte
				*rxBuffer = (uint8_t) I2C_handle->pI2Cx->DR;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	691b      	ldr	r3, [r3, #16]
 8001490:	b2da      	uxtb	r2, r3
 8001492:	68bb      	ldr	r3, [r7, #8]
 8001494:	701a      	strb	r2, [r3, #0]
				rxBuffer++;
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	3301      	adds	r3, #1
 800149a:	60bb      	str	r3, [r7, #8]

				size--;
 800149c:	79fb      	ldrb	r3, [r7, #7]
 800149e:	3b01      	subs	r3, #1
 80014a0:	71fb      	strb	r3, [r7, #7]

				// wait for the last byte to be put in SR while DR is full (RxNE=1)
				while (!GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_BTF) && WaitTillTimeout(5));
 80014a2:	bf00      	nop
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	2104      	movs	r1, #4
 80014aa:	4618      	mov	r0, r3
 80014ac:	f7ff fc6a 	bl	8000d84 <GetFlagStatus>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d105      	bne.n	80014c2 <HAL_I2C_Master_Receive+0x1de>
 80014b6:	2005      	movs	r0, #5
 80014b8:	f000 f882 	bl	80015c0 <WaitTillTimeout>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d1f0      	bne.n	80014a4 <HAL_I2C_Master_Receive+0x1c0>

				GenerateStopCondition(I2C_handle);
 80014c2:	68f8      	ldr	r0, [r7, #12]
 80014c4:	f7ff fc83 	bl	8000dce <GenerateStopCondition>

				// read the second byte
				*rxBuffer = (uint8_t) I2C_handle->pI2Cx->DR;
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	691b      	ldr	r3, [r3, #16]
 80014ce:	b2da      	uxtb	r2, r3
 80014d0:	68bb      	ldr	r3, [r7, #8]
 80014d2:	701a      	strb	r2, [r3, #0]
				rxBuffer++;
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	3301      	adds	r3, #1
 80014d8:	60bb      	str	r3, [r7, #8]

				size--;
 80014da:	79fb      	ldrb	r3, [r7, #7]
 80014dc:	3b01      	subs	r3, #1
 80014de:	71fb      	strb	r3, [r7, #7]

				// read the third byte
				*rxBuffer = (uint8_t) I2C_handle->pI2Cx->DR;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	691b      	ldr	r3, [r3, #16]
 80014e6:	b2da      	uxtb	r2, r3
 80014e8:	68bb      	ldr	r3, [r7, #8]
 80014ea:	701a      	strb	r2, [r3, #0]
				rxBuffer++;
 80014ec:	68bb      	ldr	r3, [r7, #8]
 80014ee:	3301      	adds	r3, #1
 80014f0:	60bb      	str	r3, [r7, #8]

				size--;
 80014f2:	79fb      	ldrb	r3, [r7, #7]
 80014f4:	3b01      	subs	r3, #1
 80014f6:	71fb      	strb	r3, [r7, #7]
 80014f8:	e01b      	b.n	8001532 <HAL_I2C_Master_Receive+0x24e>
			}

		}
		// > 3 bytes
		else {
			while (!GetFlagStatus(I2C_handle->pI2Cx, I2C_SR1_RXNE) && WaitTillTimeout(5));
 80014fa:	bf00      	nop
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	2140      	movs	r1, #64	; 0x40
 8001502:	4618      	mov	r0, r3
 8001504:	f7ff fc3e 	bl	8000d84 <GetFlagStatus>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d105      	bne.n	800151a <HAL_I2C_Master_Receive+0x236>
 800150e:	2005      	movs	r0, #5
 8001510:	f000 f856 	bl	80015c0 <WaitTillTimeout>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f0      	bne.n	80014fc <HAL_I2C_Master_Receive+0x218>

			// reading the byte
			*rxBuffer = (uint8_t) I2C_handle->pI2Cx->DR;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	691b      	ldr	r3, [r3, #16]
 8001520:	b2da      	uxtb	r2, r3
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	701a      	strb	r2, [r3, #0]
			rxBuffer++;
 8001526:	68bb      	ldr	r3, [r7, #8]
 8001528:	3301      	adds	r3, #1
 800152a:	60bb      	str	r3, [r7, #8]

			size--;
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	3b01      	subs	r3, #1
 8001530:	71fb      	strb	r3, [r7, #7]
	while (size > 0) {
 8001532:	79fb      	ldrb	r3, [r7, #7]
 8001534:	2b00      	cmp	r3, #0
 8001536:	f47f af36 	bne.w	80013a6 <HAL_I2C_Master_Receive+0xc2>

		}
	}
}
 800153a:	bf00      	nop
 800153c:	3710      	adds	r7, #16
 800153e:	46bd      	mov	sp, r7
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	080038b8 	.word	0x080038b8

08001548 <I2C_StopTransmission>:

static void I2C_StopTransmission()
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
	printf ("Stopping transmission...\n\n");
 800154c:	480b      	ldr	r0, [pc, #44]	; (800157c <I2C_StopTransmission+0x34>)
 800154e:	f001 fbd3 	bl	8002cf8 <puts>

	// disable control bits
	I2C_handle_p->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITEVTEN_Pos);
 8001552:	4b0b      	ldr	r3, [pc, #44]	; (8001580 <I2C_StopTransmission+0x38>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	685a      	ldr	r2, [r3, #4]
 800155a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800155e:	605a      	str	r2, [r3, #4]
	I2C_handle_p->pI2Cx->CR2 &= ~(1 << I2C_CR2_ITBUFEN_Pos);
 8001560:	4b07      	ldr	r3, [pc, #28]	; (8001580 <I2C_StopTransmission+0x38>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800156c:	605a      	str	r2, [r3, #4]

	// restore struct
	I2C_handle_p->I2C_State = I2C_READY;
 800156e:	4b04      	ldr	r3, [pc, #16]	; (8001580 <I2C_StopTransmission+0x38>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2200      	movs	r2, #0
 8001574:	731a      	strb	r2, [r3, #12]
}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	080038cc 	.word	0x080038cc
 8001580:	20000098 	.word	0x20000098

08001584 <I2C_SetCtrlBits>:

static void I2C_SetCtrlBits()
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
	I2C_handle_p->pI2Cx->CR2 |= I2C_CR2_ITBUFEN;
 8001588:	4b0c      	ldr	r3, [pc, #48]	; (80015bc <I2C_SetCtrlBits+0x38>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	685a      	ldr	r2, [r3, #4]
 8001590:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001594:	605a      	str	r2, [r3, #4]
	I2C_handle_p->pI2Cx->CR2 |= I2C_CR2_ITEVTEN;
 8001596:	4b09      	ldr	r3, [pc, #36]	; (80015bc <I2C_SetCtrlBits+0x38>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	685a      	ldr	r2, [r3, #4]
 800159e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80015a2:	605a      	str	r2, [r3, #4]
	I2C_handle_p->pI2Cx->CR2 |= I2C_CR2_ITERREN;
 80015a4:	4b05      	ldr	r3, [pc, #20]	; (80015bc <I2C_SetCtrlBits+0x38>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	685a      	ldr	r2, [r3, #4]
 80015ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015b0:	605a      	str	r2, [r3, #4]
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	20000098 	.word	0x20000098

080015c0 <WaitTillTimeout>:

HAL_StatusTypeDef WaitTillTimeout (uint8_t timeout)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b084      	sub	sp, #16
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	71fb      	strb	r3, [r7, #7]
	uint8_t prevTicks = HAL_GetTick(); // current ticks in ms
 80015ca:	f7ff f847 	bl	800065c <HAL_GetTick>
 80015ce:	4603      	mov	r3, r0
 80015d0:	73fb      	strb	r3, [r7, #15]
	while ((HAL_GetTick() - prevTicks) < timeout);
 80015d2:	bf00      	nop
 80015d4:	f7ff f842 	bl	800065c <HAL_GetTick>
 80015d8:	4602      	mov	r2, r0
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	1ad2      	subs	r2, r2, r3
 80015de:	79fb      	ldrb	r3, [r7, #7]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d3f7      	bcc.n	80015d4 <WaitTillTimeout+0x14>
	return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3710      	adds	r7, #16
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bd80      	pop	{r7, pc}
	...

080015f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b086      	sub	sp, #24
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d101      	bne.n	8001602 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015fe:	2301      	movs	r3, #1
 8001600:	e22d      	b.n	8001a5e <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f003 0301 	and.w	r3, r3, #1
 800160a:	2b00      	cmp	r3, #0
 800160c:	d075      	beq.n	80016fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800160e:	4ba3      	ldr	r3, [pc, #652]	; (800189c <HAL_RCC_OscConfig+0x2ac>)
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	f003 030c 	and.w	r3, r3, #12
 8001616:	2b04      	cmp	r3, #4
 8001618:	d00c      	beq.n	8001634 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800161a:	4ba0      	ldr	r3, [pc, #640]	; (800189c <HAL_RCC_OscConfig+0x2ac>)
 800161c:	689b      	ldr	r3, [r3, #8]
 800161e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001622:	2b08      	cmp	r3, #8
 8001624:	d112      	bne.n	800164c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001626:	4b9d      	ldr	r3, [pc, #628]	; (800189c <HAL_RCC_OscConfig+0x2ac>)
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800162e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001632:	d10b      	bne.n	800164c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001634:	4b99      	ldr	r3, [pc, #612]	; (800189c <HAL_RCC_OscConfig+0x2ac>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d05b      	beq.n	80016f8 <HAL_RCC_OscConfig+0x108>
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b00      	cmp	r3, #0
 8001646:	d157      	bne.n	80016f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e208      	b.n	8001a5e <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001654:	d106      	bne.n	8001664 <HAL_RCC_OscConfig+0x74>
 8001656:	4b91      	ldr	r3, [pc, #580]	; (800189c <HAL_RCC_OscConfig+0x2ac>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a90      	ldr	r2, [pc, #576]	; (800189c <HAL_RCC_OscConfig+0x2ac>)
 800165c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	e01d      	b.n	80016a0 <HAL_RCC_OscConfig+0xb0>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	685b      	ldr	r3, [r3, #4]
 8001668:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800166c:	d10c      	bne.n	8001688 <HAL_RCC_OscConfig+0x98>
 800166e:	4b8b      	ldr	r3, [pc, #556]	; (800189c <HAL_RCC_OscConfig+0x2ac>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a8a      	ldr	r2, [pc, #552]	; (800189c <HAL_RCC_OscConfig+0x2ac>)
 8001674:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	4b88      	ldr	r3, [pc, #544]	; (800189c <HAL_RCC_OscConfig+0x2ac>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	4a87      	ldr	r2, [pc, #540]	; (800189c <HAL_RCC_OscConfig+0x2ac>)
 8001680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001684:	6013      	str	r3, [r2, #0]
 8001686:	e00b      	b.n	80016a0 <HAL_RCC_OscConfig+0xb0>
 8001688:	4b84      	ldr	r3, [pc, #528]	; (800189c <HAL_RCC_OscConfig+0x2ac>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a83      	ldr	r2, [pc, #524]	; (800189c <HAL_RCC_OscConfig+0x2ac>)
 800168e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001692:	6013      	str	r3, [r2, #0]
 8001694:	4b81      	ldr	r3, [pc, #516]	; (800189c <HAL_RCC_OscConfig+0x2ac>)
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	4a80      	ldr	r2, [pc, #512]	; (800189c <HAL_RCC_OscConfig+0x2ac>)
 800169a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800169e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d013      	beq.n	80016d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a8:	f7fe ffd8 	bl	800065c <HAL_GetTick>
 80016ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ae:	e008      	b.n	80016c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016b0:	f7fe ffd4 	bl	800065c <HAL_GetTick>
 80016b4:	4602      	mov	r2, r0
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	1ad3      	subs	r3, r2, r3
 80016ba:	2b64      	cmp	r3, #100	; 0x64
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e1cd      	b.n	8001a5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016c2:	4b76      	ldr	r3, [pc, #472]	; (800189c <HAL_RCC_OscConfig+0x2ac>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d0f0      	beq.n	80016b0 <HAL_RCC_OscConfig+0xc0>
 80016ce:	e014      	b.n	80016fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d0:	f7fe ffc4 	bl	800065c <HAL_GetTick>
 80016d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d6:	e008      	b.n	80016ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80016d8:	f7fe ffc0 	bl	800065c <HAL_GetTick>
 80016dc:	4602      	mov	r2, r0
 80016de:	693b      	ldr	r3, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	2b64      	cmp	r3, #100	; 0x64
 80016e4:	d901      	bls.n	80016ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016e6:	2303      	movs	r3, #3
 80016e8:	e1b9      	b.n	8001a5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016ea:	4b6c      	ldr	r3, [pc, #432]	; (800189c <HAL_RCC_OscConfig+0x2ac>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1f0      	bne.n	80016d8 <HAL_RCC_OscConfig+0xe8>
 80016f6:	e000      	b.n	80016fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f003 0302 	and.w	r3, r3, #2
 8001702:	2b00      	cmp	r3, #0
 8001704:	d063      	beq.n	80017ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001706:	4b65      	ldr	r3, [pc, #404]	; (800189c <HAL_RCC_OscConfig+0x2ac>)
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 030c 	and.w	r3, r3, #12
 800170e:	2b00      	cmp	r3, #0
 8001710:	d00b      	beq.n	800172a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001712:	4b62      	ldr	r3, [pc, #392]	; (800189c <HAL_RCC_OscConfig+0x2ac>)
 8001714:	689b      	ldr	r3, [r3, #8]
 8001716:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800171a:	2b08      	cmp	r3, #8
 800171c:	d11c      	bne.n	8001758 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800171e:	4b5f      	ldr	r3, [pc, #380]	; (800189c <HAL_RCC_OscConfig+0x2ac>)
 8001720:	685b      	ldr	r3, [r3, #4]
 8001722:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d116      	bne.n	8001758 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800172a:	4b5c      	ldr	r3, [pc, #368]	; (800189c <HAL_RCC_OscConfig+0x2ac>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d005      	beq.n	8001742 <HAL_RCC_OscConfig+0x152>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	68db      	ldr	r3, [r3, #12]
 800173a:	2b01      	cmp	r3, #1
 800173c:	d001      	beq.n	8001742 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e18d      	b.n	8001a5e <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001742:	4b56      	ldr	r3, [pc, #344]	; (800189c <HAL_RCC_OscConfig+0x2ac>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	691b      	ldr	r3, [r3, #16]
 800174e:	00db      	lsls	r3, r3, #3
 8001750:	4952      	ldr	r1, [pc, #328]	; (800189c <HAL_RCC_OscConfig+0x2ac>)
 8001752:	4313      	orrs	r3, r2
 8001754:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001756:	e03a      	b.n	80017ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d020      	beq.n	80017a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001760:	4b4f      	ldr	r3, [pc, #316]	; (80018a0 <HAL_RCC_OscConfig+0x2b0>)
 8001762:	2201      	movs	r2, #1
 8001764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001766:	f7fe ff79 	bl	800065c <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800176e:	f7fe ff75 	bl	800065c <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e16e      	b.n	8001a5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001780:	4b46      	ldr	r3, [pc, #280]	; (800189c <HAL_RCC_OscConfig+0x2ac>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0302 	and.w	r3, r3, #2
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0f0      	beq.n	800176e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800178c:	4b43      	ldr	r3, [pc, #268]	; (800189c <HAL_RCC_OscConfig+0x2ac>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	691b      	ldr	r3, [r3, #16]
 8001798:	00db      	lsls	r3, r3, #3
 800179a:	4940      	ldr	r1, [pc, #256]	; (800189c <HAL_RCC_OscConfig+0x2ac>)
 800179c:	4313      	orrs	r3, r2
 800179e:	600b      	str	r3, [r1, #0]
 80017a0:	e015      	b.n	80017ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017a2:	4b3f      	ldr	r3, [pc, #252]	; (80018a0 <HAL_RCC_OscConfig+0x2b0>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a8:	f7fe ff58 	bl	800065c <HAL_GetTick>
 80017ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ae:	e008      	b.n	80017c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017b0:	f7fe ff54 	bl	800065c <HAL_GetTick>
 80017b4:	4602      	mov	r2, r0
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	1ad3      	subs	r3, r2, r3
 80017ba:	2b02      	cmp	r3, #2
 80017bc:	d901      	bls.n	80017c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017be:	2303      	movs	r3, #3
 80017c0:	e14d      	b.n	8001a5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017c2:	4b36      	ldr	r3, [pc, #216]	; (800189c <HAL_RCC_OscConfig+0x2ac>)
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	f003 0302 	and.w	r3, r3, #2
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d1f0      	bne.n	80017b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0308 	and.w	r3, r3, #8
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d030      	beq.n	800183c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	695b      	ldr	r3, [r3, #20]
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d016      	beq.n	8001810 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017e2:	4b30      	ldr	r3, [pc, #192]	; (80018a4 <HAL_RCC_OscConfig+0x2b4>)
 80017e4:	2201      	movs	r2, #1
 80017e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e8:	f7fe ff38 	bl	800065c <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017f0:	f7fe ff34 	bl	800065c <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e12d      	b.n	8001a5e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001802:	4b26      	ldr	r3, [pc, #152]	; (800189c <HAL_RCC_OscConfig+0x2ac>)
 8001804:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d0f0      	beq.n	80017f0 <HAL_RCC_OscConfig+0x200>
 800180e:	e015      	b.n	800183c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001810:	4b24      	ldr	r3, [pc, #144]	; (80018a4 <HAL_RCC_OscConfig+0x2b4>)
 8001812:	2200      	movs	r2, #0
 8001814:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001816:	f7fe ff21 	bl	800065c <HAL_GetTick>
 800181a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800181e:	f7fe ff1d 	bl	800065c <HAL_GetTick>
 8001822:	4602      	mov	r2, r0
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b02      	cmp	r3, #2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e116      	b.n	8001a5e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001830:	4b1a      	ldr	r3, [pc, #104]	; (800189c <HAL_RCC_OscConfig+0x2ac>)
 8001832:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1f0      	bne.n	800181e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0304 	and.w	r3, r3, #4
 8001844:	2b00      	cmp	r3, #0
 8001846:	f000 80a0 	beq.w	800198a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800184a:	2300      	movs	r3, #0
 800184c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800184e:	4b13      	ldr	r3, [pc, #76]	; (800189c <HAL_RCC_OscConfig+0x2ac>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001852:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10f      	bne.n	800187a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	60fb      	str	r3, [r7, #12]
 800185e:	4b0f      	ldr	r3, [pc, #60]	; (800189c <HAL_RCC_OscConfig+0x2ac>)
 8001860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001862:	4a0e      	ldr	r2, [pc, #56]	; (800189c <HAL_RCC_OscConfig+0x2ac>)
 8001864:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001868:	6413      	str	r3, [r2, #64]	; 0x40
 800186a:	4b0c      	ldr	r3, [pc, #48]	; (800189c <HAL_RCC_OscConfig+0x2ac>)
 800186c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001872:	60fb      	str	r3, [r7, #12]
 8001874:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001876:	2301      	movs	r3, #1
 8001878:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800187a:	4b0b      	ldr	r3, [pc, #44]	; (80018a8 <HAL_RCC_OscConfig+0x2b8>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001882:	2b00      	cmp	r3, #0
 8001884:	d121      	bne.n	80018ca <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001886:	4b08      	ldr	r3, [pc, #32]	; (80018a8 <HAL_RCC_OscConfig+0x2b8>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a07      	ldr	r2, [pc, #28]	; (80018a8 <HAL_RCC_OscConfig+0x2b8>)
 800188c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001890:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001892:	f7fe fee3 	bl	800065c <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001898:	e011      	b.n	80018be <HAL_RCC_OscConfig+0x2ce>
 800189a:	bf00      	nop
 800189c:	40023800 	.word	0x40023800
 80018a0:	42470000 	.word	0x42470000
 80018a4:	42470e80 	.word	0x42470e80
 80018a8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018ac:	f7fe fed6 	bl	800065c <HAL_GetTick>
 80018b0:	4602      	mov	r2, r0
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	1ad3      	subs	r3, r2, r3
 80018b6:	2b02      	cmp	r3, #2
 80018b8:	d901      	bls.n	80018be <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80018ba:	2303      	movs	r3, #3
 80018bc:	e0cf      	b.n	8001a5e <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018be:	4b6a      	ldr	r3, [pc, #424]	; (8001a68 <HAL_RCC_OscConfig+0x478>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d0f0      	beq.n	80018ac <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2b01      	cmp	r3, #1
 80018d0:	d106      	bne.n	80018e0 <HAL_RCC_OscConfig+0x2f0>
 80018d2:	4b66      	ldr	r3, [pc, #408]	; (8001a6c <HAL_RCC_OscConfig+0x47c>)
 80018d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018d6:	4a65      	ldr	r2, [pc, #404]	; (8001a6c <HAL_RCC_OscConfig+0x47c>)
 80018d8:	f043 0301 	orr.w	r3, r3, #1
 80018dc:	6713      	str	r3, [r2, #112]	; 0x70
 80018de:	e01c      	b.n	800191a <HAL_RCC_OscConfig+0x32a>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	2b05      	cmp	r3, #5
 80018e6:	d10c      	bne.n	8001902 <HAL_RCC_OscConfig+0x312>
 80018e8:	4b60      	ldr	r3, [pc, #384]	; (8001a6c <HAL_RCC_OscConfig+0x47c>)
 80018ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018ec:	4a5f      	ldr	r2, [pc, #380]	; (8001a6c <HAL_RCC_OscConfig+0x47c>)
 80018ee:	f043 0304 	orr.w	r3, r3, #4
 80018f2:	6713      	str	r3, [r2, #112]	; 0x70
 80018f4:	4b5d      	ldr	r3, [pc, #372]	; (8001a6c <HAL_RCC_OscConfig+0x47c>)
 80018f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80018f8:	4a5c      	ldr	r2, [pc, #368]	; (8001a6c <HAL_RCC_OscConfig+0x47c>)
 80018fa:	f043 0301 	orr.w	r3, r3, #1
 80018fe:	6713      	str	r3, [r2, #112]	; 0x70
 8001900:	e00b      	b.n	800191a <HAL_RCC_OscConfig+0x32a>
 8001902:	4b5a      	ldr	r3, [pc, #360]	; (8001a6c <HAL_RCC_OscConfig+0x47c>)
 8001904:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001906:	4a59      	ldr	r2, [pc, #356]	; (8001a6c <HAL_RCC_OscConfig+0x47c>)
 8001908:	f023 0301 	bic.w	r3, r3, #1
 800190c:	6713      	str	r3, [r2, #112]	; 0x70
 800190e:	4b57      	ldr	r3, [pc, #348]	; (8001a6c <HAL_RCC_OscConfig+0x47c>)
 8001910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001912:	4a56      	ldr	r2, [pc, #344]	; (8001a6c <HAL_RCC_OscConfig+0x47c>)
 8001914:	f023 0304 	bic.w	r3, r3, #4
 8001918:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d015      	beq.n	800194e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001922:	f7fe fe9b 	bl	800065c <HAL_GetTick>
 8001926:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001928:	e00a      	b.n	8001940 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800192a:	f7fe fe97 	bl	800065c <HAL_GetTick>
 800192e:	4602      	mov	r2, r0
 8001930:	693b      	ldr	r3, [r7, #16]
 8001932:	1ad3      	subs	r3, r2, r3
 8001934:	f241 3288 	movw	r2, #5000	; 0x1388
 8001938:	4293      	cmp	r3, r2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e08e      	b.n	8001a5e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001940:	4b4a      	ldr	r3, [pc, #296]	; (8001a6c <HAL_RCC_OscConfig+0x47c>)
 8001942:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001944:	f003 0302 	and.w	r3, r3, #2
 8001948:	2b00      	cmp	r3, #0
 800194a:	d0ee      	beq.n	800192a <HAL_RCC_OscConfig+0x33a>
 800194c:	e014      	b.n	8001978 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194e:	f7fe fe85 	bl	800065c <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001954:	e00a      	b.n	800196c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001956:	f7fe fe81 	bl	800065c <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	f241 3288 	movw	r2, #5000	; 0x1388
 8001964:	4293      	cmp	r3, r2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e078      	b.n	8001a5e <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800196c:	4b3f      	ldr	r3, [pc, #252]	; (8001a6c <HAL_RCC_OscConfig+0x47c>)
 800196e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001970:	f003 0302 	and.w	r3, r3, #2
 8001974:	2b00      	cmp	r3, #0
 8001976:	d1ee      	bne.n	8001956 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001978:	7dfb      	ldrb	r3, [r7, #23]
 800197a:	2b01      	cmp	r3, #1
 800197c:	d105      	bne.n	800198a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800197e:	4b3b      	ldr	r3, [pc, #236]	; (8001a6c <HAL_RCC_OscConfig+0x47c>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	4a3a      	ldr	r2, [pc, #232]	; (8001a6c <HAL_RCC_OscConfig+0x47c>)
 8001984:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001988:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	699b      	ldr	r3, [r3, #24]
 800198e:	2b00      	cmp	r3, #0
 8001990:	d064      	beq.n	8001a5c <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001992:	4b36      	ldr	r3, [pc, #216]	; (8001a6c <HAL_RCC_OscConfig+0x47c>)
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 030c 	and.w	r3, r3, #12
 800199a:	2b08      	cmp	r3, #8
 800199c:	d05c      	beq.n	8001a58 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	699b      	ldr	r3, [r3, #24]
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d141      	bne.n	8001a2a <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019a6:	4b32      	ldr	r3, [pc, #200]	; (8001a70 <HAL_RCC_OscConfig+0x480>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ac:	f7fe fe56 	bl	800065c <HAL_GetTick>
 80019b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019b2:	e008      	b.n	80019c6 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019b4:	f7fe fe52 	bl	800065c <HAL_GetTick>
 80019b8:	4602      	mov	r2, r0
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	1ad3      	subs	r3, r2, r3
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d901      	bls.n	80019c6 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 80019c2:	2303      	movs	r3, #3
 80019c4:	e04b      	b.n	8001a5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019c6:	4b29      	ldr	r3, [pc, #164]	; (8001a6c <HAL_RCC_OscConfig+0x47c>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d1f0      	bne.n	80019b4 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69da      	ldr	r2, [r3, #28]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6a1b      	ldr	r3, [r3, #32]
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e0:	019b      	lsls	r3, r3, #6
 80019e2:	431a      	orrs	r2, r3
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019e8:	085b      	lsrs	r3, r3, #1
 80019ea:	3b01      	subs	r3, #1
 80019ec:	041b      	lsls	r3, r3, #16
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f4:	061b      	lsls	r3, r3, #24
 80019f6:	491d      	ldr	r1, [pc, #116]	; (8001a6c <HAL_RCC_OscConfig+0x47c>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019fc:	4b1c      	ldr	r3, [pc, #112]	; (8001a70 <HAL_RCC_OscConfig+0x480>)
 80019fe:	2201      	movs	r2, #1
 8001a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a02:	f7fe fe2b 	bl	800065c <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a0a:	f7fe fe27 	bl	800065c <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e020      	b.n	8001a5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a1c:	4b13      	ldr	r3, [pc, #76]	; (8001a6c <HAL_RCC_OscConfig+0x47c>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d0f0      	beq.n	8001a0a <HAL_RCC_OscConfig+0x41a>
 8001a28:	e018      	b.n	8001a5c <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a2a:	4b11      	ldr	r3, [pc, #68]	; (8001a70 <HAL_RCC_OscConfig+0x480>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a30:	f7fe fe14 	bl	800065c <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a38:	f7fe fe10 	bl	800065c <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e009      	b.n	8001a5e <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a4a:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <HAL_RCC_OscConfig+0x47c>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d1f0      	bne.n	8001a38 <HAL_RCC_OscConfig+0x448>
 8001a56:	e001      	b.n	8001a5c <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e000      	b.n	8001a5e <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3718      	adds	r7, #24
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40007000 	.word	0x40007000
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	42470060 	.word	0x42470060

08001a74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d101      	bne.n	8001a88 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a84:	2301      	movs	r3, #1
 8001a86:	e0ca      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a88:	4b67      	ldr	r3, [pc, #412]	; (8001c28 <HAL_RCC_ClockConfig+0x1b4>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f003 030f 	and.w	r3, r3, #15
 8001a90:	683a      	ldr	r2, [r7, #0]
 8001a92:	429a      	cmp	r2, r3
 8001a94:	d90c      	bls.n	8001ab0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a96:	4b64      	ldr	r3, [pc, #400]	; (8001c28 <HAL_RCC_ClockConfig+0x1b4>)
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	b2d2      	uxtb	r2, r2
 8001a9c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9e:	4b62      	ldr	r3, [pc, #392]	; (8001c28 <HAL_RCC_ClockConfig+0x1b4>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d001      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e0b6      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d020      	beq.n	8001afe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f003 0304 	and.w	r3, r3, #4
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d005      	beq.n	8001ad4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001ac8:	4b58      	ldr	r3, [pc, #352]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	4a57      	ldr	r2, [pc, #348]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001ace:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001ad2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0308 	and.w	r3, r3, #8
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d005      	beq.n	8001aec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ae0:	4b52      	ldr	r3, [pc, #328]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	4a51      	ldr	r2, [pc, #324]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001ae6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001aea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aec:	4b4f      	ldr	r3, [pc, #316]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	494c      	ldr	r1, [pc, #304]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d044      	beq.n	8001b94 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d107      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b12:	4b46      	ldr	r3, [pc, #280]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d119      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e07d      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d003      	beq.n	8001b32 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b2e:	2b03      	cmp	r3, #3
 8001b30:	d107      	bne.n	8001b42 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b32:	4b3e      	ldr	r3, [pc, #248]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d109      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e06d      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001b42:	4b3a      	ldr	r3, [pc, #232]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 0302 	and.w	r3, r3, #2
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d101      	bne.n	8001b52 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e065      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001b52:	4b36      	ldr	r3, [pc, #216]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f023 0203 	bic.w	r2, r3, #3
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	4933      	ldr	r1, [pc, #204]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001b60:	4313      	orrs	r3, r2
 8001b62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001b64:	f7fe fd7a 	bl	800065c <HAL_GetTick>
 8001b68:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b6a:	e00a      	b.n	8001b82 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b6c:	f7fe fd76 	bl	800065c <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d901      	bls.n	8001b82 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001b7e:	2303      	movs	r3, #3
 8001b80:	e04d      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b82:	4b2a      	ldr	r3, [pc, #168]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001b84:	689b      	ldr	r3, [r3, #8]
 8001b86:	f003 020c 	and.w	r2, r3, #12
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	429a      	cmp	r2, r3
 8001b92:	d1eb      	bne.n	8001b6c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b94:	4b24      	ldr	r3, [pc, #144]	; (8001c28 <HAL_RCC_ClockConfig+0x1b4>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 030f 	and.w	r3, r3, #15
 8001b9c:	683a      	ldr	r2, [r7, #0]
 8001b9e:	429a      	cmp	r2, r3
 8001ba0:	d20c      	bcs.n	8001bbc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba2:	4b21      	ldr	r3, [pc, #132]	; (8001c28 <HAL_RCC_ClockConfig+0x1b4>)
 8001ba4:	683a      	ldr	r2, [r7, #0]
 8001ba6:	b2d2      	uxtb	r2, r2
 8001ba8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001baa:	4b1f      	ldr	r3, [pc, #124]	; (8001c28 <HAL_RCC_ClockConfig+0x1b4>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 030f 	and.w	r3, r3, #15
 8001bb2:	683a      	ldr	r2, [r7, #0]
 8001bb4:	429a      	cmp	r2, r3
 8001bb6:	d001      	beq.n	8001bbc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e030      	b.n	8001c1e <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d008      	beq.n	8001bda <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bc8:	4b18      	ldr	r3, [pc, #96]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	68db      	ldr	r3, [r3, #12]
 8001bd4:	4915      	ldr	r1, [pc, #84]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f003 0308 	and.w	r3, r3, #8
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d009      	beq.n	8001bfa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001be6:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001be8:	689b      	ldr	r3, [r3, #8]
 8001bea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	691b      	ldr	r3, [r3, #16]
 8001bf2:	00db      	lsls	r3, r3, #3
 8001bf4:	490d      	ldr	r1, [pc, #52]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001bfa:	f000 f81d 	bl	8001c38 <HAL_RCC_GetSysClockFreq>
 8001bfe:	4601      	mov	r1, r0
 8001c00:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <HAL_RCC_ClockConfig+0x1b8>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	091b      	lsrs	r3, r3, #4
 8001c06:	f003 030f 	and.w	r3, r3, #15
 8001c0a:	4a09      	ldr	r2, [pc, #36]	; (8001c30 <HAL_RCC_ClockConfig+0x1bc>)
 8001c0c:	5cd3      	ldrb	r3, [r2, r3]
 8001c0e:	fa21 f303 	lsr.w	r3, r1, r3
 8001c12:	4a08      	ldr	r2, [pc, #32]	; (8001c34 <HAL_RCC_ClockConfig+0x1c0>)
 8001c14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001c16:	2000      	movs	r0, #0
 8001c18:	f7fe fcdc 	bl	80005d4 <HAL_InitTick>

  return HAL_OK;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40023c00 	.word	0x40023c00
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	0800399c 	.word	0x0800399c
 8001c34:	2000000c 	.word	0x2000000c

08001c38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c38:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	2300      	movs	r3, #0
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	2300      	movs	r3, #0
 8001c48:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001c4e:	4b50      	ldr	r3, [pc, #320]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x158>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f003 030c 	and.w	r3, r3, #12
 8001c56:	2b04      	cmp	r3, #4
 8001c58:	d007      	beq.n	8001c6a <HAL_RCC_GetSysClockFreq+0x32>
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d008      	beq.n	8001c70 <HAL_RCC_GetSysClockFreq+0x38>
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	f040 808d 	bne.w	8001d7e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001c64:	4b4b      	ldr	r3, [pc, #300]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001c66:	60bb      	str	r3, [r7, #8]
       break;
 8001c68:	e08c      	b.n	8001d84 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001c6a:	4b4b      	ldr	r3, [pc, #300]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x160>)
 8001c6c:	60bb      	str	r3, [r7, #8]
      break;
 8001c6e:	e089      	b.n	8001d84 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001c70:	4b47      	ldr	r3, [pc, #284]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x158>)
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c78:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001c7a:	4b45      	ldr	r3, [pc, #276]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x158>)
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d023      	beq.n	8001cce <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c86:	4b42      	ldr	r3, [pc, #264]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x158>)
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	099b      	lsrs	r3, r3, #6
 8001c8c:	f04f 0400 	mov.w	r4, #0
 8001c90:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	ea03 0501 	and.w	r5, r3, r1
 8001c9c:	ea04 0602 	and.w	r6, r4, r2
 8001ca0:	4a3d      	ldr	r2, [pc, #244]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x160>)
 8001ca2:	fb02 f106 	mul.w	r1, r2, r6
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	fb02 f205 	mul.w	r2, r2, r5
 8001cac:	440a      	add	r2, r1
 8001cae:	493a      	ldr	r1, [pc, #232]	; (8001d98 <HAL_RCC_GetSysClockFreq+0x160>)
 8001cb0:	fba5 0101 	umull	r0, r1, r5, r1
 8001cb4:	1853      	adds	r3, r2, r1
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f04f 0400 	mov.w	r4, #0
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4623      	mov	r3, r4
 8001cc2:	f7fe fae5 	bl	8000290 <__aeabi_uldivmod>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	460c      	mov	r4, r1
 8001cca:	60fb      	str	r3, [r7, #12]
 8001ccc:	e049      	b.n	8001d62 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cce:	4b30      	ldr	r3, [pc, #192]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x158>)
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	099b      	lsrs	r3, r3, #6
 8001cd4:	f04f 0400 	mov.w	r4, #0
 8001cd8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001cdc:	f04f 0200 	mov.w	r2, #0
 8001ce0:	ea03 0501 	and.w	r5, r3, r1
 8001ce4:	ea04 0602 	and.w	r6, r4, r2
 8001ce8:	4629      	mov	r1, r5
 8001cea:	4632      	mov	r2, r6
 8001cec:	f04f 0300 	mov.w	r3, #0
 8001cf0:	f04f 0400 	mov.w	r4, #0
 8001cf4:	0154      	lsls	r4, r2, #5
 8001cf6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cfa:	014b      	lsls	r3, r1, #5
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	4622      	mov	r2, r4
 8001d00:	1b49      	subs	r1, r1, r5
 8001d02:	eb62 0206 	sbc.w	r2, r2, r6
 8001d06:	f04f 0300 	mov.w	r3, #0
 8001d0a:	f04f 0400 	mov.w	r4, #0
 8001d0e:	0194      	lsls	r4, r2, #6
 8001d10:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001d14:	018b      	lsls	r3, r1, #6
 8001d16:	1a5b      	subs	r3, r3, r1
 8001d18:	eb64 0402 	sbc.w	r4, r4, r2
 8001d1c:	f04f 0100 	mov.w	r1, #0
 8001d20:	f04f 0200 	mov.w	r2, #0
 8001d24:	00e2      	lsls	r2, r4, #3
 8001d26:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001d2a:	00d9      	lsls	r1, r3, #3
 8001d2c:	460b      	mov	r3, r1
 8001d2e:	4614      	mov	r4, r2
 8001d30:	195b      	adds	r3, r3, r5
 8001d32:	eb44 0406 	adc.w	r4, r4, r6
 8001d36:	f04f 0100 	mov.w	r1, #0
 8001d3a:	f04f 0200 	mov.w	r2, #0
 8001d3e:	02a2      	lsls	r2, r4, #10
 8001d40:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001d44:	0299      	lsls	r1, r3, #10
 8001d46:	460b      	mov	r3, r1
 8001d48:	4614      	mov	r4, r2
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	4621      	mov	r1, r4
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	f04f 0400 	mov.w	r4, #0
 8001d54:	461a      	mov	r2, r3
 8001d56:	4623      	mov	r3, r4
 8001d58:	f7fe fa9a 	bl	8000290 <__aeabi_uldivmod>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	460c      	mov	r4, r1
 8001d60:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001d62:	4b0b      	ldr	r3, [pc, #44]	; (8001d90 <HAL_RCC_GetSysClockFreq+0x158>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	0c1b      	lsrs	r3, r3, #16
 8001d68:	f003 0303 	and.w	r3, r3, #3
 8001d6c:	3301      	adds	r3, #1
 8001d6e:	005b      	lsls	r3, r3, #1
 8001d70:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001d72:	68fa      	ldr	r2, [r7, #12]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d7a:	60bb      	str	r3, [r7, #8]
      break;
 8001d7c:	e002      	b.n	8001d84 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d7e:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <HAL_RCC_GetSysClockFreq+0x15c>)
 8001d80:	60bb      	str	r3, [r7, #8]
      break;
 8001d82:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d84:	68bb      	ldr	r3, [r7, #8]
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	40023800 	.word	0x40023800
 8001d94:	00f42400 	.word	0x00f42400
 8001d98:	017d7840 	.word	0x017d7840

08001d9c <ProcessData>:

#include <i2c.h>

int ProcessData (uint8_t *rxBuffer, uint8_t startIndex) {
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	460b      	mov	r3, r1
 8001da6:	70fb      	strb	r3, [r7, #3]
	printf ("\nUpper byte: %d, Lower byte: %d\n", rxBuffer[startIndex], rxBuffer[startIndex+1]);
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	4413      	add	r3, r2
 8001dae:	781b      	ldrb	r3, [r3, #0]
 8001db0:	4619      	mov	r1, r3
 8001db2:	78fb      	ldrb	r3, [r7, #3]
 8001db4:	3301      	adds	r3, #1
 8001db6:	687a      	ldr	r2, [r7, #4]
 8001db8:	4413      	add	r3, r2
 8001dba:	781b      	ldrb	r3, [r3, #0]
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	481f      	ldr	r0, [pc, #124]	; (8001e3c <ProcessData+0xa0>)
 8001dc0:	f000 ff26 	bl	8002c10 <iprintf>
	uint16_t temperature;

	// process data
	uint8_t upperByte = rxBuffer[startIndex] & 0x1F; // mask out the 3 bits
 8001dc4:	78fb      	ldrb	r3, [r7, #3]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	4413      	add	r3, r2
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	f003 031f 	and.w	r3, r3, #31
 8001dd0:	737b      	strb	r3, [r7, #13]
	uint8_t signBit = upperByte & 0x10;
 8001dd2:	7b7b      	ldrb	r3, [r7, #13]
 8001dd4:	f003 0310 	and.w	r3, r3, #16
 8001dd8:	733b      	strb	r3, [r7, #12]

	if (signBit)
 8001dda:	7b3b      	ldrb	r3, [r7, #12]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d015      	beq.n	8001e0c <ProcessData+0x70>
	{
		upperByte = upperByte & 0xF; 	// clear out the sign bit
 8001de0:	7b7b      	ldrb	r3, [r7, #13]
 8001de2:	f003 030f 	and.w	r3, r3, #15
 8001de6:	737b      	strb	r3, [r7, #13]
		temperature = 256 - (upperByte << 4 | rxBuffer[startIndex+1] >> 4);
 8001de8:	7b7b      	ldrb	r3, [r7, #13]
 8001dea:	011b      	lsls	r3, r3, #4
 8001dec:	b21a      	sxth	r2, r3
 8001dee:	78fb      	ldrb	r3, [r7, #3]
 8001df0:	3301      	adds	r3, #1
 8001df2:	6879      	ldr	r1, [r7, #4]
 8001df4:	440b      	add	r3, r1
 8001df6:	781b      	ldrb	r3, [r3, #0]
 8001df8:	091b      	lsrs	r3, r3, #4
 8001dfa:	b2db      	uxtb	r3, r3
 8001dfc:	b21b      	sxth	r3, r3
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	b21b      	sxth	r3, r3
 8001e02:	b29b      	uxth	r3, r3
 8001e04:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8001e08:	81fb      	strh	r3, [r7, #14]
 8001e0a:	e00d      	b.n	8001e28 <ProcessData+0x8c>
	}
	else
	{
		temperature = upperByte << 4 | rxBuffer[startIndex+1] >> 4;
 8001e0c:	7b7b      	ldrb	r3, [r7, #13]
 8001e0e:	011b      	lsls	r3, r3, #4
 8001e10:	b21a      	sxth	r2, r3
 8001e12:	78fb      	ldrb	r3, [r7, #3]
 8001e14:	3301      	adds	r3, #1
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	440b      	add	r3, r1
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	091b      	lsrs	r3, r3, #4
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	b21b      	sxth	r3, r3
 8001e22:	4313      	orrs	r3, r2
 8001e24:	b21b      	sxth	r3, r3
 8001e26:	81fb      	strh	r3, [r7, #14]
	}
	printf ("Temperature value: %d\n\n", temperature);
 8001e28:	89fb      	ldrh	r3, [r7, #14]
 8001e2a:	4619      	mov	r1, r3
 8001e2c:	4804      	ldr	r0, [pc, #16]	; (8001e40 <ProcessData+0xa4>)
 8001e2e:	f000 feef 	bl	8002c10 <iprintf>
}
 8001e32:	bf00      	nop
 8001e34:	4618      	mov	r0, r3
 8001e36:	3710      	adds	r7, #16
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	080038e8 	.word	0x080038e8
 8001e40:	0800390c 	.word	0x0800390c

08001e44 <ReadTemperatureInterrupt>:


void ReadTemperatureInterrupt(I2C_Handle_t *I2C_handle, const uint8_t bytesToRead) // todo: rmv bytesToRead
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	70fb      	strb	r3, [r7, #3]
	setRef(I2C_handle);   // todo
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f7ff f81b 	bl	8000e8c <setRef>
	while (HAL_MasterTransmitInterrupt() != I2C_READY);
 8001e56:	bf00      	nop
 8001e58:	f7ff f828 	bl	8000eac <HAL_MasterTransmitInterrupt>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1fa      	bne.n	8001e58 <ReadTemperatureInterrupt+0x14>

	while (HAL_MasterReceiveInterrupt() != I2C_READY);
 8001e62:	bf00      	nop
 8001e64:	f7ff f846 	bl	8000ef4 <HAL_MasterReceiveInterrupt>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d1fa      	bne.n	8001e64 <ReadTemperatureInterrupt+0x20>

   	while (1);
 8001e6e:	e7fe      	b.n	8001e6e <ReadTemperatureInterrupt+0x2a>

08001e70 <ReadTemperature>:
//		}
//	}
}

void ReadTemperature(I2C_Handle_t *I2C_handle, const uint8_t bytesToRead)
{
 8001e70:	b5b0      	push	{r4, r5, r7, lr}
 8001e72:	b08a      	sub	sp, #40	; 0x28
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	6078      	str	r0, [r7, #4]
 8001e78:	460b      	mov	r3, r1
 8001e7a:	70fb      	strb	r3, [r7, #3]
 8001e7c:	466b      	mov	r3, sp
 8001e7e:	461d      	mov	r5, r3
	uint8_t txBuffer[1] = {MCP9808_REG_AMBIENT_TEMP_REG};
 8001e80:	2305      	movs	r3, #5
 8001e82:	733b      	strb	r3, [r7, #12]
	uint8_t rxBuffer[bytesToRead];
 8001e84:	78fb      	ldrb	r3, [r7, #3]
 8001e86:	3b01      	subs	r3, #1
 8001e88:	617b      	str	r3, [r7, #20]
 8001e8a:	78f9      	ldrb	r1, [r7, #3]
 8001e8c:	f04f 0200 	mov.w	r2, #0
 8001e90:	f04f 0300 	mov.w	r3, #0
 8001e94:	f04f 0400 	mov.w	r4, #0
 8001e98:	00d4      	lsls	r4, r2, #3
 8001e9a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001e9e:	00cb      	lsls	r3, r1, #3
 8001ea0:	78f9      	ldrb	r1, [r7, #3]
 8001ea2:	f04f 0200 	mov.w	r2, #0
 8001ea6:	f04f 0300 	mov.w	r3, #0
 8001eaa:	f04f 0400 	mov.w	r4, #0
 8001eae:	00d4      	lsls	r4, r2, #3
 8001eb0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8001eb4:	00cb      	lsls	r3, r1, #3
 8001eb6:	78fb      	ldrb	r3, [r7, #3]
 8001eb8:	3307      	adds	r3, #7
 8001eba:	08db      	lsrs	r3, r3, #3
 8001ebc:	00db      	lsls	r3, r3, #3
 8001ebe:	ebad 0d03 	sub.w	sp, sp, r3
 8001ec2:	466b      	mov	r3, sp
 8001ec4:	3300      	adds	r3, #0
 8001ec6:	613b      	str	r3, [r7, #16]
	uint8_t startRxIndex = 0;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	76fb      	strb	r3, [r7, #27]

	uint8_t txSize = sizeof(txBuffer)/sizeof(txBuffer[0]);
 8001ecc:	2301      	movs	r3, #1
 8001ece:	73fb      	strb	r3, [r7, #15]

	// specify the register address where temperature values will be read from
	HAL_I2C_Master_Transmit(I2C_handle, txBuffer, txSize);
 8001ed0:	7bfa      	ldrb	r2, [r7, #15]
 8001ed2:	f107 030c 	add.w	r3, r7, #12
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	6878      	ldr	r0, [r7, #4]
 8001eda:	f7ff f999 	bl	8001210 <HAL_I2C_Master_Transmit>

	// request the data from the sensor
	for (int i = 0; i < bytesToRead/2; i++, startRxIndex+=2)
 8001ede:	2300      	movs	r3, #0
 8001ee0:	61fb      	str	r3, [r7, #28]
 8001ee2:	e01d      	b.n	8001f20 <ReadTemperature+0xb0>
	{
		HAL_I2C_Master_Receive (I2C_handle, rxBuffer, BYTES_PER_TRANSACTION, startRxIndex);
 8001ee4:	6939      	ldr	r1, [r7, #16]
 8001ee6:	7efb      	ldrb	r3, [r7, #27]
 8001ee8:	2202      	movs	r2, #2
 8001eea:	6878      	ldr	r0, [r7, #4]
 8001eec:	f7ff f9fa 	bl	80012e4 <HAL_I2C_Master_Receive>

		for (int j=0; j<bytesToRead; j++)
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	623b      	str	r3, [r7, #32]
 8001ef4:	e00a      	b.n	8001f0c <ReadTemperature+0x9c>
		{
			printf ("%d\n", rxBuffer[j]);
 8001ef6:	693a      	ldr	r2, [r7, #16]
 8001ef8:	6a3b      	ldr	r3, [r7, #32]
 8001efa:	4413      	add	r3, r2
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	4619      	mov	r1, r3
 8001f00:	481e      	ldr	r0, [pc, #120]	; (8001f7c <ReadTemperature+0x10c>)
 8001f02:	f000 fe85 	bl	8002c10 <iprintf>
		for (int j=0; j<bytesToRead; j++)
 8001f06:	6a3b      	ldr	r3, [r7, #32]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	623b      	str	r3, [r7, #32]
 8001f0c:	78fb      	ldrb	r3, [r7, #3]
 8001f0e:	6a3a      	ldr	r2, [r7, #32]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	dbf0      	blt.n	8001ef6 <ReadTemperature+0x86>
	for (int i = 0; i < bytesToRead/2; i++, startRxIndex+=2)
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	3301      	adds	r3, #1
 8001f18:	61fb      	str	r3, [r7, #28]
 8001f1a:	7efb      	ldrb	r3, [r7, #27]
 8001f1c:	3302      	adds	r3, #2
 8001f1e:	76fb      	strb	r3, [r7, #27]
 8001f20:	78fb      	ldrb	r3, [r7, #3]
 8001f22:	085b      	lsrs	r3, r3, #1
 8001f24:	b2db      	uxtb	r3, r3
 8001f26:	461a      	mov	r2, r3
 8001f28:	69fb      	ldr	r3, [r7, #28]
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	dbda      	blt.n	8001ee4 <ReadTemperature+0x74>
		}
	}

	printf ("Printing raw bytes:\n");
 8001f2e:	4814      	ldr	r0, [pc, #80]	; (8001f80 <ReadTemperature+0x110>)
 8001f30:	f000 fee2 	bl	8002cf8 <puts>
	for (int i = 0; i < bytesToRead; i+=2)
 8001f34:	2300      	movs	r3, #0
 8001f36:	627b      	str	r3, [r7, #36]	; 0x24
 8001f38:	e016      	b.n	8001f68 <ReadTemperature+0xf8>
	{
		printf ("%d,%d\n", rxBuffer[i], rxBuffer[i+1]);
 8001f3a:	693a      	ldr	r2, [r7, #16]
 8001f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3e:	4413      	add	r3, r2
 8001f40:	781b      	ldrb	r3, [r3, #0]
 8001f42:	4619      	mov	r1, r3
 8001f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f46:	3301      	adds	r3, #1
 8001f48:	693a      	ldr	r2, [r7, #16]
 8001f4a:	5cd3      	ldrb	r3, [r2, r3]
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	480d      	ldr	r0, [pc, #52]	; (8001f84 <ReadTemperature+0x114>)
 8001f50:	f000 fe5e 	bl	8002c10 <iprintf>
		ProcessData(rxBuffer, i);
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f58:	b2d2      	uxtb	r2, r2
 8001f5a:	4611      	mov	r1, r2
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f7ff ff1d 	bl	8001d9c <ProcessData>
	for (int i = 0; i < bytesToRead; i+=2)
 8001f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f64:	3302      	adds	r3, #2
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
 8001f68:	78fb      	ldrb	r3, [r7, #3]
 8001f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f6c:	429a      	cmp	r2, r3
 8001f6e:	dbe4      	blt.n	8001f3a <ReadTemperature+0xca>
 8001f70:	46ad      	mov	sp, r5
	}

//	ProcessData(rxBuffer, 0);

}
 8001f72:	bf00      	nop
 8001f74:	3728      	adds	r7, #40	; 0x28
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bdb0      	pop	{r4, r5, r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	08003924 	.word	0x08003924
 8001f80:	08003928 	.word	0x08003928
 8001f84:	0800393c 	.word	0x0800393c

08001f88 <I2C_Initilization>:
extern void initialise_monitor_handles(void);

I2C_Handle_t I2C1_handle;

void I2C_Initilization()
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	af00      	add	r7, sp, #0
//	I2C_Handle_t I2C1_handle;
	I2C1_handle.pI2Cx = I2C1;
 8001f8c:	4b09      	ldr	r3, [pc, #36]	; (8001fb4 <I2C_Initilization+0x2c>)
 8001f8e:	4a0a      	ldr	r2, [pc, #40]	; (8001fb8 <I2C_Initilization+0x30>)
 8001f90:	601a      	str	r2, [r3, #0]
	I2C1_handle.I2C_Config.I2C_AckControl = I2C_ACK_ENABLE;
 8001f92:	4b08      	ldr	r3, [pc, #32]	; (8001fb4 <I2C_Initilization+0x2c>)
 8001f94:	2201      	movs	r2, #1
 8001f96:	725a      	strb	r2, [r3, #9]
	I2C1_handle.I2C_Config.I2C_SCLSpeed = I2C_SCL_SPEED_SM;
 8001f98:	4b06      	ldr	r3, [pc, #24]	; (8001fb4 <I2C_Initilization+0x2c>)
 8001f9a:	4a08      	ldr	r2, [pc, #32]	; (8001fbc <I2C_Initilization+0x34>)
 8001f9c:	605a      	str	r2, [r3, #4]
	I2C1_handle.I2C_Config.I2C_DeviceAddress = MCP9808_ADDR;
 8001f9e:	4b05      	ldr	r3, [pc, #20]	; (8001fb4 <I2C_Initilization+0x2c>)
 8001fa0:	2218      	movs	r2, #24
 8001fa2:	721a      	strb	r2, [r3, #8]
	I2C1_handle.I2C_Config.I2C_FMDutyCycle = I2C_FM_DUTY_2;
 8001fa4:	4b03      	ldr	r3, [pc, #12]	; (8001fb4 <I2C_Initilization+0x2c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	815a      	strh	r2, [r3, #10]
	I2C_Init(&I2C1_handle);
 8001faa:	4802      	ldr	r0, [pc, #8]	; (8001fb4 <I2C_Initilization+0x2c>)
 8001fac:	f7fe fe76 	bl	8000c9c <I2C_Init>
}
 8001fb0:	bf00      	nop
 8001fb2:	bd80      	pop	{r7, pc}
 8001fb4:	2000015c 	.word	0x2000015c
 8001fb8:	40005400 	.word	0x40005400
 8001fbc:	000186a0 	.word	0x000186a0

08001fc0 <GetTemperature>:

void GetTemperature(uint8_t interrupt)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b082      	sub	sp, #8
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	71fb      	strb	r3, [r7, #7]
//	uint8_t txBuffer[1] = {MCP9808_REG_AMBIENT_TEMP_REG};
//	uint8_t rxBuffer[bytesToRead];
//	uint8_t txSize = sizeof(txBuffer)/sizeof(txBuffer[0]);
	printf ("Reading %d bytes\n", bytesToRead);
 8001fca:	2306      	movs	r3, #6
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4814      	ldr	r0, [pc, #80]	; (8002020 <GetTemperature+0x60>)
 8001fd0:	f000 fe1e 	bl	8002c10 <iprintf>

	I2C1_handle.txBuffer = txBuffer;
 8001fd4:	4b13      	ldr	r3, [pc, #76]	; (8002024 <GetTemperature+0x64>)
 8001fd6:	4a14      	ldr	r2, [pc, #80]	; (8002028 <GetTemperature+0x68>)
 8001fd8:	611a      	str	r2, [r3, #16]
	I2C1_handle.txBufferLength = txSize;
 8001fda:	4b14      	ldr	r3, [pc, #80]	; (800202c <GetTemperature+0x6c>)
 8001fdc:	781a      	ldrb	r2, [r3, #0]
 8001fde:	4b11      	ldr	r3, [pc, #68]	; (8002024 <GetTemperature+0x64>)
 8001fe0:	769a      	strb	r2, [r3, #26]
	I2C1_handle.pRxBuffer = rxBuffer;
 8001fe2:	4b10      	ldr	r3, [pc, #64]	; (8002024 <GetTemperature+0x64>)
 8001fe4:	4a12      	ldr	r2, [pc, #72]	; (8002030 <GetTemperature+0x70>)
 8001fe6:	615a      	str	r2, [r3, #20]
	I2C1_handle.rxStartIndex = 0;
 8001fe8:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <GetTemperature+0x64>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	761a      	strb	r2, [r3, #24]
	I2C1_handle.rxBufferLength = BYTES_PER_TRANSACTION;		// todo - maybe remove rxBufferSize
 8001fee:	4b0d      	ldr	r3, [pc, #52]	; (8002024 <GetTemperature+0x64>)
 8001ff0:	2202      	movs	r2, #2
 8001ff2:	76da      	strb	r2, [r3, #27]
	I2C1_handle.rxBufferSize = bytesToRead;
 8001ff4:	2206      	movs	r2, #6
 8001ff6:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <GetTemperature+0x64>)
 8001ff8:	765a      	strb	r2, [r3, #25]

	if (interrupt == SET)
 8001ffa:	79fb      	ldrb	r3, [r7, #7]
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d105      	bne.n	800200c <GetTemperature+0x4c>
	{
		ReadTemperatureInterrupt(&I2C1_handle, bytesToRead);
 8002000:	2306      	movs	r3, #6
 8002002:	4619      	mov	r1, r3
 8002004:	4807      	ldr	r0, [pc, #28]	; (8002024 <GetTemperature+0x64>)
 8002006:	f7ff ff1d 	bl	8001e44 <ReadTemperatureInterrupt>
	}
	else
	{
		ReadTemperature(&I2C1_handle, bytesToRead);
	}
}
 800200a:	e004      	b.n	8002016 <GetTemperature+0x56>
		ReadTemperature(&I2C1_handle, bytesToRead);
 800200c:	2306      	movs	r3, #6
 800200e:	4619      	mov	r1, r3
 8002010:	4804      	ldr	r0, [pc, #16]	; (8002024 <GetTemperature+0x64>)
 8002012:	f7ff ff2d 	bl	8001e70 <ReadTemperature>
}
 8002016:	bf00      	nop
 8002018:	3708      	adds	r7, #8
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	bf00      	nop
 8002020:	08003944 	.word	0x08003944
 8002024:	2000015c 	.word	0x2000015c
 8002028:	20000008 	.word	0x20000008
 800202c:	20000009 	.word	0x20000009
 8002030:	2000009c 	.word	0x2000009c

08002034 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	af00      	add	r7, sp, #0
	initialise_monitor_handles();
 8002038:	f000 fc1a 	bl	8002870 <initialise_monitor_handles>
	printf ("Application is running...\n");
 800203c:	4807      	ldr	r0, [pc, #28]	; (800205c <main+0x28>)
 800203e:	f000 fe5b 	bl	8002cf8 <puts>

	HAL_Init();
 8002042:	f7fe faa5 	bl	8000590 <HAL_Init>

  /* Configure the system clock */
	SystemClock_Config();
 8002046:	f000 f80b 	bl	8002060 <SystemClock_Config>

  /* Initialize all configured peripherals */
	MX_GPIO_Init();
 800204a:	f000 f869 	bl	8002120 <MX_GPIO_Init>

    I2C_Initilization();
 800204e:	f7ff ff9b 	bl	8001f88 <I2C_Initilization>

	// read temperature from the sensor
	GetTemperature(SET);
 8002052:	2001      	movs	r0, #1
 8002054:	f7ff ffb4 	bl	8001fc0 <GetTemperature>
//				GetTemperature(RESET);


//	ReadTemperature(&I2C1_handle, bytesToRead);

	while (1);
 8002058:	e7fe      	b.n	8002058 <main+0x24>
 800205a:	bf00      	nop
 800205c:	08003958 	.word	0x08003958

08002060 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b094      	sub	sp, #80	; 0x50
 8002064:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002066:	f107 0320 	add.w	r3, r7, #32
 800206a:	2230      	movs	r2, #48	; 0x30
 800206c:	2100      	movs	r1, #0
 800206e:	4618      	mov	r0, r3
 8002070:	f000 fd6c 	bl	8002b4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002074:	f107 030c 	add.w	r3, r7, #12
 8002078:	2200      	movs	r2, #0
 800207a:	601a      	str	r2, [r3, #0]
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	609a      	str	r2, [r3, #8]
 8002080:	60da      	str	r2, [r3, #12]
 8002082:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002084:	2300      	movs	r3, #0
 8002086:	60bb      	str	r3, [r7, #8]
 8002088:	4b23      	ldr	r3, [pc, #140]	; (8002118 <SystemClock_Config+0xb8>)
 800208a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208c:	4a22      	ldr	r2, [pc, #136]	; (8002118 <SystemClock_Config+0xb8>)
 800208e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002092:	6413      	str	r3, [r2, #64]	; 0x40
 8002094:	4b20      	ldr	r3, [pc, #128]	; (8002118 <SystemClock_Config+0xb8>)
 8002096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209c:	60bb      	str	r3, [r7, #8]
 800209e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80020a0:	2300      	movs	r3, #0
 80020a2:	607b      	str	r3, [r7, #4]
 80020a4:	4b1d      	ldr	r3, [pc, #116]	; (800211c <SystemClock_Config+0xbc>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80020ac:	4a1b      	ldr	r2, [pc, #108]	; (800211c <SystemClock_Config+0xbc>)
 80020ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020b2:	6013      	str	r3, [r2, #0]
 80020b4:	4b19      	ldr	r3, [pc, #100]	; (800211c <SystemClock_Config+0xbc>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80020bc:	607b      	str	r3, [r7, #4]
 80020be:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80020c0:	2302      	movs	r3, #2
 80020c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80020c4:	2301      	movs	r3, #1
 80020c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80020c8:	2310      	movs	r3, #16
 80020ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80020cc:	2300      	movs	r3, #0
 80020ce:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80020d0:	f107 0320 	add.w	r3, r7, #32
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fa8b 	bl	80015f0 <HAL_RCC_OscConfig>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d001      	beq.n	80020e4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80020e0:	f000 f8a0 	bl	8002224 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80020e4:	230f      	movs	r3, #15
 80020e6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80020e8:	2300      	movs	r3, #0
 80020ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80020ec:	2300      	movs	r3, #0
 80020ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80020f0:	2300      	movs	r3, #0
 80020f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80020f4:	2300      	movs	r3, #0
 80020f6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80020f8:	f107 030c 	add.w	r3, r7, #12
 80020fc:	2100      	movs	r1, #0
 80020fe:	4618      	mov	r0, r3
 8002100:	f7ff fcb8 	bl	8001a74 <HAL_RCC_ClockConfig>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <SystemClock_Config+0xae>
  {
    Error_Handler();
 800210a:	f000 f88b 	bl	8002224 <Error_Handler>
  }
}
 800210e:	bf00      	nop
 8002110:	3750      	adds	r7, #80	; 0x50
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40023800 	.word	0x40023800
 800211c:	40007000 	.word	0x40007000

08002120 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b088      	sub	sp, #32
 8002124:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002126:	f107 030c 	add.w	r3, r7, #12
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	605a      	str	r2, [r3, #4]
 8002130:	609a      	str	r2, [r3, #8]
 8002132:	60da      	str	r2, [r3, #12]
 8002134:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002136:	2300      	movs	r3, #0
 8002138:	60bb      	str	r3, [r7, #8]
 800213a:	4b35      	ldr	r3, [pc, #212]	; (8002210 <MX_GPIO_Init+0xf0>)
 800213c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213e:	4a34      	ldr	r2, [pc, #208]	; (8002210 <MX_GPIO_Init+0xf0>)
 8002140:	f043 0304 	orr.w	r3, r3, #4
 8002144:	6313      	str	r3, [r2, #48]	; 0x30
 8002146:	4b32      	ldr	r3, [pc, #200]	; (8002210 <MX_GPIO_Init+0xf0>)
 8002148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800214a:	f003 0304 	and.w	r3, r3, #4
 800214e:	60bb      	str	r3, [r7, #8]
 8002150:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	607b      	str	r3, [r7, #4]
 8002156:	4b2e      	ldr	r3, [pc, #184]	; (8002210 <MX_GPIO_Init+0xf0>)
 8002158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800215a:	4a2d      	ldr	r2, [pc, #180]	; (8002210 <MX_GPIO_Init+0xf0>)
 800215c:	f043 0301 	orr.w	r3, r3, #1
 8002160:	6313      	str	r3, [r2, #48]	; 0x30
 8002162:	4b2b      	ldr	r3, [pc, #172]	; (8002210 <MX_GPIO_Init+0xf0>)
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	607b      	str	r3, [r7, #4]
 800216c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800216e:	2300      	movs	r3, #0
 8002170:	603b      	str	r3, [r7, #0]
 8002172:	4b27      	ldr	r3, [pc, #156]	; (8002210 <MX_GPIO_Init+0xf0>)
 8002174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002176:	4a26      	ldr	r2, [pc, #152]	; (8002210 <MX_GPIO_Init+0xf0>)
 8002178:	f043 0302 	orr.w	r3, r3, #2
 800217c:	6313      	str	r3, [r2, #48]	; 0x30
 800217e:	4b24      	ldr	r3, [pc, #144]	; (8002210 <MX_GPIO_Init+0xf0>)
 8002180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002182:	f003 0302 	and.w	r3, r3, #2
 8002186:	603b      	str	r3, [r7, #0]
 8002188:	683b      	ldr	r3, [r7, #0]

  /* GPIO I2C Clock Enable */
//  __HAL_RCC_I2C1_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);
 800218a:	2200      	movs	r2, #0
 800218c:	2140      	movs	r1, #64	; 0x40
 800218e:	4821      	ldr	r0, [pc, #132]	; (8002214 <MX_GPIO_Init+0xf4>)
 8002190:	f7fe fd04 	bl	8000b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002194:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002198:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800219a:	4b1f      	ldr	r3, [pc, #124]	; (8002218 <MX_GPIO_Init+0xf8>)
 800219c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021a2:	f107 030c 	add.w	r3, r7, #12
 80021a6:	4619      	mov	r1, r3
 80021a8:	481c      	ldr	r0, [pc, #112]	; (800221c <MX_GPIO_Init+0xfc>)
 80021aa:	f7fe fb75 	bl	8000898 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 80021ae:	2320      	movs	r3, #32
 80021b0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b2:	2301      	movs	r3, #1
 80021b4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ba:	2300      	movs	r3, #0
 80021bc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021be:	f107 030c 	add.w	r3, r7, #12
 80021c2:	4619      	mov	r1, r3
 80021c4:	4813      	ldr	r0, [pc, #76]	; (8002214 <MX_GPIO_Init+0xf4>)
 80021c6:	f7fe fb67 	bl	8000898 <HAL_GPIO_Init>

  /* Configure I2C */
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021ca:	2312      	movs	r3, #18
 80021cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021d2:	2302      	movs	r3, #2
 80021d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80021d6:	2304      	movs	r3, #4
 80021d8:	61fb      	str	r3, [r7, #28]

  // scl
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80021da:	2340      	movs	r3, #64	; 0x40
 80021dc:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021de:	f107 030c 	add.w	r3, r7, #12
 80021e2:	4619      	mov	r1, r3
 80021e4:	480e      	ldr	r0, [pc, #56]	; (8002220 <MX_GPIO_Init+0x100>)
 80021e6:	f7fe fb57 	bl	8000898 <HAL_GPIO_Init>

  // sdata
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80021ea:	2380      	movs	r3, #128	; 0x80
 80021ec:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021ee:	f107 030c 	add.w	r3, r7, #12
 80021f2:	4619      	mov	r1, r3
 80021f4:	480a      	ldr	r0, [pc, #40]	; (8002220 <MX_GPIO_Init+0x100>)
 80021f6:	f7fe fb4f 	bl	8000898 <HAL_GPIO_Init>
  /* EXTI GPIO init */
//  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
//  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

  /* EXTI I2C Interrupts */
  HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80021fa:	201f      	movs	r0, #31
 80021fc:	f7fe fb31 	bl	8000862 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002200:	2020      	movs	r0, #32
 8002202:	f7fe fb2e 	bl	8000862 <HAL_NVIC_EnableIRQ>
}
 8002206:	bf00      	nop
 8002208:	3720      	adds	r7, #32
 800220a:	46bd      	mov	sp, r7
 800220c:	bd80      	pop	{r7, pc}
 800220e:	bf00      	nop
 8002210:	40023800 	.word	0x40023800
 8002214:	40020000 	.word	0x40020000
 8002218:	10110000 	.word	0x10110000
 800221c:	40020800 	.word	0x40020800
 8002220:	40020400 	.word	0x40020400

08002224 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
	...

08002234 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800223a:	2300      	movs	r3, #0
 800223c:	607b      	str	r3, [r7, #4]
 800223e:	4b10      	ldr	r3, [pc, #64]	; (8002280 <HAL_MspInit+0x4c>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	4a0f      	ldr	r2, [pc, #60]	; (8002280 <HAL_MspInit+0x4c>)
 8002244:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002248:	6453      	str	r3, [r2, #68]	; 0x44
 800224a:	4b0d      	ldr	r3, [pc, #52]	; (8002280 <HAL_MspInit+0x4c>)
 800224c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002252:	607b      	str	r3, [r7, #4]
 8002254:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002256:	2300      	movs	r3, #0
 8002258:	603b      	str	r3, [r7, #0]
 800225a:	4b09      	ldr	r3, [pc, #36]	; (8002280 <HAL_MspInit+0x4c>)
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	4a08      	ldr	r2, [pc, #32]	; (8002280 <HAL_MspInit+0x4c>)
 8002260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002264:	6413      	str	r3, [r2, #64]	; 0x40
 8002266:	4b06      	ldr	r3, [pc, #24]	; (8002280 <HAL_MspInit+0x4c>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800226a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800226e:	603b      	str	r3, [r7, #0]
 8002270:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002272:	bf00      	nop
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40023800 	.word	0x40023800

08002284 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002288:	bf00      	nop
 800228a:	46bd      	mov	sp, r7
 800228c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002290:	4770      	bx	lr

08002292 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002292:	b480      	push	{r7}
 8002294:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */

	while (1)
 8002296:	e7fe      	b.n	8002296 <HardFault_Handler+0x4>

08002298 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800229c:	e7fe      	b.n	800229c <MemManage_Handler+0x4>

0800229e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800229e:	b480      	push	{r7}
 80022a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022a2:	e7fe      	b.n	80022a2 <BusFault_Handler+0x4>

080022a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022a8:	e7fe      	b.n	80022a8 <UsageFault_Handler+0x4>

080022aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022aa:	b480      	push	{r7}
 80022ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022ae:	bf00      	nop
 80022b0:	46bd      	mov	sp, r7
 80022b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b6:	4770      	bx	lr

080022b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022b8:	b480      	push	{r7}
 80022ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022bc:	bf00      	nop
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr

080022c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022c6:	b480      	push	{r7}
 80022c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022ca:	bf00      	nop
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022d8:	f7fe f9ac 	bl	8000634 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022dc:	bf00      	nop
 80022de:	bd80      	pop	{r7, pc}

080022e0 <EXTI15_10_IRQHandler>:
/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */

void EXTI15_10_IRQHandler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  printf ("Interrupt handler for push button...\n");
 80022e4:	4804      	ldr	r0, [pc, #16]	; (80022f8 <EXTI15_10_IRQHandler+0x18>)
 80022e6:	f000 fd07 	bl	8002cf8 <puts>

  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80022ea:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80022ee:	f7fe fc89 	bl	8000c04 <HAL_GPIO_EXTI_IRQHandler>

}
 80022f2:	bf00      	nop
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	08003974 	.word	0x08003974

080022fc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002304:	4b11      	ldr	r3, [pc, #68]	; (800234c <_sbrk+0x50>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d102      	bne.n	8002312 <_sbrk+0x16>
		heap_end = &end;
 800230c:	4b0f      	ldr	r3, [pc, #60]	; (800234c <_sbrk+0x50>)
 800230e:	4a10      	ldr	r2, [pc, #64]	; (8002350 <_sbrk+0x54>)
 8002310:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002312:	4b0e      	ldr	r3, [pc, #56]	; (800234c <_sbrk+0x50>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <_sbrk+0x50>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	4413      	add	r3, r2
 8002320:	466a      	mov	r2, sp
 8002322:	4293      	cmp	r3, r2
 8002324:	d907      	bls.n	8002336 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8002326:	f000 fb1d 	bl	8002964 <__errno>
 800232a:	4602      	mov	r2, r0
 800232c:	230c      	movs	r3, #12
 800232e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002334:	e006      	b.n	8002344 <_sbrk+0x48>
	}

	heap_end += incr;
 8002336:	4b05      	ldr	r3, [pc, #20]	; (800234c <_sbrk+0x50>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4413      	add	r3, r2
 800233e:	4a03      	ldr	r2, [pc, #12]	; (800234c <_sbrk+0x50>)
 8002340:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002342:	68fb      	ldr	r3, [r7, #12]
}
 8002344:	4618      	mov	r0, r3
 8002346:	3710      	adds	r7, #16
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	200000a0 	.word	0x200000a0
 8002350:	20000180 	.word	0x20000180

08002354 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002358:	4b16      	ldr	r3, [pc, #88]	; (80023b4 <SystemInit+0x60>)
 800235a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800235e:	4a15      	ldr	r2, [pc, #84]	; (80023b4 <SystemInit+0x60>)
 8002360:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002364:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002368:	4b13      	ldr	r3, [pc, #76]	; (80023b8 <SystemInit+0x64>)
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a12      	ldr	r2, [pc, #72]	; (80023b8 <SystemInit+0x64>)
 800236e:	f043 0301 	orr.w	r3, r3, #1
 8002372:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002374:	4b10      	ldr	r3, [pc, #64]	; (80023b8 <SystemInit+0x64>)
 8002376:	2200      	movs	r2, #0
 8002378:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800237a:	4b0f      	ldr	r3, [pc, #60]	; (80023b8 <SystemInit+0x64>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	4a0e      	ldr	r2, [pc, #56]	; (80023b8 <SystemInit+0x64>)
 8002380:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002384:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002388:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800238a:	4b0b      	ldr	r3, [pc, #44]	; (80023b8 <SystemInit+0x64>)
 800238c:	4a0b      	ldr	r2, [pc, #44]	; (80023bc <SystemInit+0x68>)
 800238e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002390:	4b09      	ldr	r3, [pc, #36]	; (80023b8 <SystemInit+0x64>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a08      	ldr	r2, [pc, #32]	; (80023b8 <SystemInit+0x64>)
 8002396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800239a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800239c:	4b06      	ldr	r3, [pc, #24]	; (80023b8 <SystemInit+0x64>)
 800239e:	2200      	movs	r2, #0
 80023a0:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023a2:	4b04      	ldr	r3, [pc, #16]	; (80023b4 <SystemInit+0x60>)
 80023a4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023a8:	609a      	str	r2, [r3, #8]
#endif
}
 80023aa:	bf00      	nop
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	e000ed00 	.word	0xe000ed00
 80023b8:	40023800 	.word	0x40023800
 80023bc:	24003010 	.word	0x24003010

080023c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80023c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023f8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80023c4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80023c6:	e003      	b.n	80023d0 <LoopCopyDataInit>

080023c8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80023ca:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80023cc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80023ce:	3104      	adds	r1, #4

080023d0 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80023d0:	480b      	ldr	r0, [pc, #44]	; (8002400 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80023d2:	4b0c      	ldr	r3, [pc, #48]	; (8002404 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80023d4:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80023d6:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80023d8:	d3f6      	bcc.n	80023c8 <CopyDataInit>
  ldr  r2, =_sbss
 80023da:	4a0b      	ldr	r2, [pc, #44]	; (8002408 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80023dc:	e002      	b.n	80023e4 <LoopFillZerobss>

080023de <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80023de:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80023e0:	f842 3b04 	str.w	r3, [r2], #4

080023e4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80023e4:	4b09      	ldr	r3, [pc, #36]	; (800240c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80023e6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80023e8:	d3f9      	bcc.n	80023de <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80023ea:	f7ff ffb3 	bl	8002354 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023ee:	f000 fb89 	bl	8002b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023f2:	f7ff fe1f 	bl	8002034 <main>
  bx  lr    
 80023f6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80023f8:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 80023fc:	08003a70 	.word	0x08003a70
  ldr  r0, =_sdata
 8002400:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002404:	2000007c 	.word	0x2000007c
  ldr  r2, =_sbss
 8002408:	2000007c 	.word	0x2000007c
  ldr  r3, = _ebss
 800240c:	2000017c 	.word	0x2000017c

08002410 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002410:	e7fe      	b.n	8002410 <ADC_IRQHandler>
	...

08002414 <findslot>:
 8002414:	4b0a      	ldr	r3, [pc, #40]	; (8002440 <findslot+0x2c>)
 8002416:	b510      	push	{r4, lr}
 8002418:	4604      	mov	r4, r0
 800241a:	6818      	ldr	r0, [r3, #0]
 800241c:	b118      	cbz	r0, 8002426 <findslot+0x12>
 800241e:	6983      	ldr	r3, [r0, #24]
 8002420:	b90b      	cbnz	r3, 8002426 <findslot+0x12>
 8002422:	f000 fae5 	bl	80029f0 <__sinit>
 8002426:	2c13      	cmp	r4, #19
 8002428:	d807      	bhi.n	800243a <findslot+0x26>
 800242a:	4806      	ldr	r0, [pc, #24]	; (8002444 <findslot+0x30>)
 800242c:	f850 3034 	ldr.w	r3, [r0, r4, lsl #3]
 8002430:	3301      	adds	r3, #1
 8002432:	d002      	beq.n	800243a <findslot+0x26>
 8002434:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8002438:	bd10      	pop	{r4, pc}
 800243a:	2000      	movs	r0, #0
 800243c:	e7fc      	b.n	8002438 <findslot+0x24>
 800243e:	bf00      	nop
 8002440:	20000018 	.word	0x20000018
 8002444:	200000b0 	.word	0x200000b0

08002448 <checkerror>:
 8002448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800244a:	1c43      	adds	r3, r0, #1
 800244c:	4605      	mov	r5, r0
 800244e:	d109      	bne.n	8002464 <checkerror+0x1c>
 8002450:	f000 fa88 	bl	8002964 <__errno>
 8002454:	2413      	movs	r4, #19
 8002456:	4606      	mov	r6, r0
 8002458:	2700      	movs	r7, #0
 800245a:	4620      	mov	r0, r4
 800245c:	4639      	mov	r1, r7
 800245e:	beab      	bkpt	0x00ab
 8002460:	4604      	mov	r4, r0
 8002462:	6034      	str	r4, [r6, #0]
 8002464:	4628      	mov	r0, r5
 8002466:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002468 <error>:
 8002468:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800246a:	4605      	mov	r5, r0
 800246c:	f000 fa7a 	bl	8002964 <__errno>
 8002470:	2413      	movs	r4, #19
 8002472:	4606      	mov	r6, r0
 8002474:	2700      	movs	r7, #0
 8002476:	4620      	mov	r0, r4
 8002478:	4639      	mov	r1, r7
 800247a:	beab      	bkpt	0x00ab
 800247c:	4604      	mov	r4, r0
 800247e:	6034      	str	r4, [r6, #0]
 8002480:	4628      	mov	r0, r5
 8002482:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08002484 <_swiread>:
 8002484:	b530      	push	{r4, r5, lr}
 8002486:	b085      	sub	sp, #20
 8002488:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800248c:	9203      	str	r2, [sp, #12]
 800248e:	2406      	movs	r4, #6
 8002490:	ad01      	add	r5, sp, #4
 8002492:	4620      	mov	r0, r4
 8002494:	4629      	mov	r1, r5
 8002496:	beab      	bkpt	0x00ab
 8002498:	4604      	mov	r4, r0
 800249a:	4620      	mov	r0, r4
 800249c:	f7ff ffd4 	bl	8002448 <checkerror>
 80024a0:	b005      	add	sp, #20
 80024a2:	bd30      	pop	{r4, r5, pc}

080024a4 <_read>:
 80024a4:	b570      	push	{r4, r5, r6, lr}
 80024a6:	460e      	mov	r6, r1
 80024a8:	4615      	mov	r5, r2
 80024aa:	f7ff ffb3 	bl	8002414 <findslot>
 80024ae:	4604      	mov	r4, r0
 80024b0:	b930      	cbnz	r0, 80024c0 <_read+0x1c>
 80024b2:	f000 fa57 	bl	8002964 <__errno>
 80024b6:	2309      	movs	r3, #9
 80024b8:	6003      	str	r3, [r0, #0]
 80024ba:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024be:	bd70      	pop	{r4, r5, r6, pc}
 80024c0:	462a      	mov	r2, r5
 80024c2:	4631      	mov	r1, r6
 80024c4:	6800      	ldr	r0, [r0, #0]
 80024c6:	f7ff ffdd 	bl	8002484 <_swiread>
 80024ca:	1c43      	adds	r3, r0, #1
 80024cc:	bf1f      	itttt	ne
 80024ce:	6863      	ldrne	r3, [r4, #4]
 80024d0:	1a28      	subne	r0, r5, r0
 80024d2:	181b      	addne	r3, r3, r0
 80024d4:	6063      	strne	r3, [r4, #4]
 80024d6:	e7f2      	b.n	80024be <_read+0x1a>

080024d8 <_swilseek>:
 80024d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80024da:	460c      	mov	r4, r1
 80024dc:	4616      	mov	r6, r2
 80024de:	f7ff ff99 	bl	8002414 <findslot>
 80024e2:	4605      	mov	r5, r0
 80024e4:	b940      	cbnz	r0, 80024f8 <_swilseek+0x20>
 80024e6:	f000 fa3d 	bl	8002964 <__errno>
 80024ea:	2309      	movs	r3, #9
 80024ec:	6003      	str	r3, [r0, #0]
 80024ee:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80024f2:	4620      	mov	r0, r4
 80024f4:	b003      	add	sp, #12
 80024f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80024f8:	2e02      	cmp	r6, #2
 80024fa:	d903      	bls.n	8002504 <_swilseek+0x2c>
 80024fc:	f000 fa32 	bl	8002964 <__errno>
 8002500:	2316      	movs	r3, #22
 8002502:	e7f3      	b.n	80024ec <_swilseek+0x14>
 8002504:	2e01      	cmp	r6, #1
 8002506:	d112      	bne.n	800252e <_swilseek+0x56>
 8002508:	6843      	ldr	r3, [r0, #4]
 800250a:	18e4      	adds	r4, r4, r3
 800250c:	d4f6      	bmi.n	80024fc <_swilseek+0x24>
 800250e:	682b      	ldr	r3, [r5, #0]
 8002510:	260a      	movs	r6, #10
 8002512:	e9cd 3400 	strd	r3, r4, [sp]
 8002516:	466f      	mov	r7, sp
 8002518:	4630      	mov	r0, r6
 800251a:	4639      	mov	r1, r7
 800251c:	beab      	bkpt	0x00ab
 800251e:	4606      	mov	r6, r0
 8002520:	4630      	mov	r0, r6
 8002522:	f7ff ff91 	bl	8002448 <checkerror>
 8002526:	2800      	cmp	r0, #0
 8002528:	dbe1      	blt.n	80024ee <_swilseek+0x16>
 800252a:	606c      	str	r4, [r5, #4]
 800252c:	e7e1      	b.n	80024f2 <_swilseek+0x1a>
 800252e:	2e02      	cmp	r6, #2
 8002530:	d1ed      	bne.n	800250e <_swilseek+0x36>
 8002532:	af02      	add	r7, sp, #8
 8002534:	6803      	ldr	r3, [r0, #0]
 8002536:	f847 3d08 	str.w	r3, [r7, #-8]!
 800253a:	260c      	movs	r6, #12
 800253c:	4630      	mov	r0, r6
 800253e:	4639      	mov	r1, r7
 8002540:	beab      	bkpt	0x00ab
 8002542:	4606      	mov	r6, r0
 8002544:	4630      	mov	r0, r6
 8002546:	f7ff ff7f 	bl	8002448 <checkerror>
 800254a:	1c43      	adds	r3, r0, #1
 800254c:	d0cf      	beq.n	80024ee <_swilseek+0x16>
 800254e:	4404      	add	r4, r0
 8002550:	e7dd      	b.n	800250e <_swilseek+0x36>

08002552 <_lseek>:
 8002552:	f7ff bfc1 	b.w	80024d8 <_swilseek>

08002556 <_swiwrite>:
 8002556:	b530      	push	{r4, r5, lr}
 8002558:	b085      	sub	sp, #20
 800255a:	e9cd 0101 	strd	r0, r1, [sp, #4]
 800255e:	9203      	str	r2, [sp, #12]
 8002560:	2405      	movs	r4, #5
 8002562:	ad01      	add	r5, sp, #4
 8002564:	4620      	mov	r0, r4
 8002566:	4629      	mov	r1, r5
 8002568:	beab      	bkpt	0x00ab
 800256a:	4604      	mov	r4, r0
 800256c:	4620      	mov	r0, r4
 800256e:	f7ff ff6b 	bl	8002448 <checkerror>
 8002572:	b005      	add	sp, #20
 8002574:	bd30      	pop	{r4, r5, pc}

08002576 <_write>:
 8002576:	b570      	push	{r4, r5, r6, lr}
 8002578:	460e      	mov	r6, r1
 800257a:	4615      	mov	r5, r2
 800257c:	f7ff ff4a 	bl	8002414 <findslot>
 8002580:	4604      	mov	r4, r0
 8002582:	b930      	cbnz	r0, 8002592 <_write+0x1c>
 8002584:	f000 f9ee 	bl	8002964 <__errno>
 8002588:	2309      	movs	r3, #9
 800258a:	6003      	str	r3, [r0, #0]
 800258c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002590:	bd70      	pop	{r4, r5, r6, pc}
 8002592:	462a      	mov	r2, r5
 8002594:	4631      	mov	r1, r6
 8002596:	6800      	ldr	r0, [r0, #0]
 8002598:	f7ff ffdd 	bl	8002556 <_swiwrite>
 800259c:	1e02      	subs	r2, r0, #0
 800259e:	dbf5      	blt.n	800258c <_write+0x16>
 80025a0:	6863      	ldr	r3, [r4, #4]
 80025a2:	1aa8      	subs	r0, r5, r2
 80025a4:	4403      	add	r3, r0
 80025a6:	42aa      	cmp	r2, r5
 80025a8:	6063      	str	r3, [r4, #4]
 80025aa:	d1f1      	bne.n	8002590 <_write+0x1a>
 80025ac:	2000      	movs	r0, #0
 80025ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80025b2:	f7ff bf59 	b.w	8002468 <error>

080025b6 <_swiclose>:
 80025b6:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80025b8:	ad02      	add	r5, sp, #8
 80025ba:	2402      	movs	r4, #2
 80025bc:	f845 0d04 	str.w	r0, [r5, #-4]!
 80025c0:	4620      	mov	r0, r4
 80025c2:	4629      	mov	r1, r5
 80025c4:	beab      	bkpt	0x00ab
 80025c6:	4604      	mov	r4, r0
 80025c8:	4620      	mov	r0, r4
 80025ca:	f7ff ff3d 	bl	8002448 <checkerror>
 80025ce:	b003      	add	sp, #12
 80025d0:	bd30      	pop	{r4, r5, pc}
	...

080025d4 <_close>:
 80025d4:	b538      	push	{r3, r4, r5, lr}
 80025d6:	4605      	mov	r5, r0
 80025d8:	f7ff ff1c 	bl	8002414 <findslot>
 80025dc:	4604      	mov	r4, r0
 80025de:	b930      	cbnz	r0, 80025ee <_close+0x1a>
 80025e0:	f000 f9c0 	bl	8002964 <__errno>
 80025e4:	2309      	movs	r3, #9
 80025e6:	6003      	str	r3, [r0, #0]
 80025e8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025ec:	bd38      	pop	{r3, r4, r5, pc}
 80025ee:	3d01      	subs	r5, #1
 80025f0:	2d01      	cmp	r5, #1
 80025f2:	d809      	bhi.n	8002608 <_close+0x34>
 80025f4:	4b09      	ldr	r3, [pc, #36]	; (800261c <_close+0x48>)
 80025f6:	689a      	ldr	r2, [r3, #8]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d104      	bne.n	8002608 <_close+0x34>
 80025fe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002602:	6003      	str	r3, [r0, #0]
 8002604:	2000      	movs	r0, #0
 8002606:	e7f1      	b.n	80025ec <_close+0x18>
 8002608:	6820      	ldr	r0, [r4, #0]
 800260a:	f7ff ffd4 	bl	80025b6 <_swiclose>
 800260e:	2800      	cmp	r0, #0
 8002610:	d1ec      	bne.n	80025ec <_close+0x18>
 8002612:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002616:	6023      	str	r3, [r4, #0]
 8002618:	e7e8      	b.n	80025ec <_close+0x18>
 800261a:	bf00      	nop
 800261c:	200000b0 	.word	0x200000b0

08002620 <_swistat>:
 8002620:	b570      	push	{r4, r5, r6, lr}
 8002622:	460c      	mov	r4, r1
 8002624:	f7ff fef6 	bl	8002414 <findslot>
 8002628:	4606      	mov	r6, r0
 800262a:	b930      	cbnz	r0, 800263a <_swistat+0x1a>
 800262c:	f000 f99a 	bl	8002964 <__errno>
 8002630:	2309      	movs	r3, #9
 8002632:	6003      	str	r3, [r0, #0]
 8002634:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002638:	bd70      	pop	{r4, r5, r6, pc}
 800263a:	6863      	ldr	r3, [r4, #4]
 800263c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002640:	6063      	str	r3, [r4, #4]
 8002642:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002646:	6463      	str	r3, [r4, #68]	; 0x44
 8002648:	250c      	movs	r5, #12
 800264a:	4628      	mov	r0, r5
 800264c:	4631      	mov	r1, r6
 800264e:	beab      	bkpt	0x00ab
 8002650:	4605      	mov	r5, r0
 8002652:	4628      	mov	r0, r5
 8002654:	f7ff fef8 	bl	8002448 <checkerror>
 8002658:	1c43      	adds	r3, r0, #1
 800265a:	bf1c      	itt	ne
 800265c:	6120      	strne	r0, [r4, #16]
 800265e:	2000      	movne	r0, #0
 8002660:	e7ea      	b.n	8002638 <_swistat+0x18>

08002662 <_fstat>:
 8002662:	460b      	mov	r3, r1
 8002664:	b510      	push	{r4, lr}
 8002666:	2100      	movs	r1, #0
 8002668:	4604      	mov	r4, r0
 800266a:	2258      	movs	r2, #88	; 0x58
 800266c:	4618      	mov	r0, r3
 800266e:	f000 fa6d 	bl	8002b4c <memset>
 8002672:	4601      	mov	r1, r0
 8002674:	4620      	mov	r0, r4
 8002676:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800267a:	f7ff bfd1 	b.w	8002620 <_swistat>

0800267e <_stat>:
 800267e:	b538      	push	{r3, r4, r5, lr}
 8002680:	460d      	mov	r5, r1
 8002682:	4604      	mov	r4, r0
 8002684:	2258      	movs	r2, #88	; 0x58
 8002686:	2100      	movs	r1, #0
 8002688:	4628      	mov	r0, r5
 800268a:	f000 fa5f 	bl	8002b4c <memset>
 800268e:	4620      	mov	r0, r4
 8002690:	2100      	movs	r1, #0
 8002692:	f000 f811 	bl	80026b8 <_swiopen>
 8002696:	1c43      	adds	r3, r0, #1
 8002698:	4604      	mov	r4, r0
 800269a:	d00b      	beq.n	80026b4 <_stat+0x36>
 800269c:	686b      	ldr	r3, [r5, #4]
 800269e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80026a2:	606b      	str	r3, [r5, #4]
 80026a4:	4629      	mov	r1, r5
 80026a6:	f7ff ffbb 	bl	8002620 <_swistat>
 80026aa:	4605      	mov	r5, r0
 80026ac:	4620      	mov	r0, r4
 80026ae:	f7ff ff91 	bl	80025d4 <_close>
 80026b2:	462c      	mov	r4, r5
 80026b4:	4620      	mov	r0, r4
 80026b6:	bd38      	pop	{r3, r4, r5, pc}

080026b8 <_swiopen>:
 80026b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80026bc:	4b2b      	ldr	r3, [pc, #172]	; (800276c <_swiopen+0xb4>)
 80026be:	b096      	sub	sp, #88	; 0x58
 80026c0:	4682      	mov	sl, r0
 80026c2:	460e      	mov	r6, r1
 80026c4:	2500      	movs	r5, #0
 80026c6:	4698      	mov	r8, r3
 80026c8:	f853 4035 	ldr.w	r4, [r3, r5, lsl #3]
 80026cc:	1c61      	adds	r1, r4, #1
 80026ce:	ea4f 07c5 	mov.w	r7, r5, lsl #3
 80026d2:	d036      	beq.n	8002742 <_swiopen+0x8a>
 80026d4:	3501      	adds	r5, #1
 80026d6:	2d14      	cmp	r5, #20
 80026d8:	d1f6      	bne.n	80026c8 <_swiopen+0x10>
 80026da:	f000 f943 	bl	8002964 <__errno>
 80026de:	2318      	movs	r3, #24
 80026e0:	6003      	str	r3, [r0, #0]
 80026e2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80026e6:	e03c      	b.n	8002762 <_swiopen+0xaa>
 80026e8:	f3c6 4400 	ubfx	r4, r6, #16, #1
 80026ec:	f240 6301 	movw	r3, #1537	; 0x601
 80026f0:	07b2      	lsls	r2, r6, #30
 80026f2:	bf48      	it	mi
 80026f4:	f044 0402 	orrmi.w	r4, r4, #2
 80026f8:	421e      	tst	r6, r3
 80026fa:	bf18      	it	ne
 80026fc:	f044 0404 	orrne.w	r4, r4, #4
 8002700:	0733      	lsls	r3, r6, #28
 8002702:	bf48      	it	mi
 8002704:	f024 0404 	bicmi.w	r4, r4, #4
 8002708:	4650      	mov	r0, sl
 800270a:	bf48      	it	mi
 800270c:	f044 0408 	orrmi.w	r4, r4, #8
 8002710:	f8cd a000 	str.w	sl, [sp]
 8002714:	f7fd fd64 	bl	80001e0 <strlen>
 8002718:	e9cd 4001 	strd	r4, r0, [sp, #4]
 800271c:	2401      	movs	r4, #1
 800271e:	4620      	mov	r0, r4
 8002720:	4649      	mov	r1, r9
 8002722:	beab      	bkpt	0x00ab
 8002724:	4604      	mov	r4, r0
 8002726:	2c00      	cmp	r4, #0
 8002728:	db06      	blt.n	8002738 <_swiopen+0x80>
 800272a:	4447      	add	r7, r8
 800272c:	2300      	movs	r3, #0
 800272e:	f848 4035 	str.w	r4, [r8, r5, lsl #3]
 8002732:	607b      	str	r3, [r7, #4]
 8002734:	462c      	mov	r4, r5
 8002736:	e014      	b.n	8002762 <_swiopen+0xaa>
 8002738:	4620      	mov	r0, r4
 800273a:	f7ff fe95 	bl	8002468 <error>
 800273e:	4604      	mov	r4, r0
 8002740:	e00f      	b.n	8002762 <_swiopen+0xaa>
 8002742:	f406 6320 	and.w	r3, r6, #2560	; 0xa00
 8002746:	f5b3 6f20 	cmp.w	r3, #2560	; 0xa00
 800274a:	46e9      	mov	r9, sp
 800274c:	d1cc      	bne.n	80026e8 <_swiopen+0x30>
 800274e:	4649      	mov	r1, r9
 8002750:	4650      	mov	r0, sl
 8002752:	f7ff ff94 	bl	800267e <_stat>
 8002756:	3001      	adds	r0, #1
 8002758:	d0c6      	beq.n	80026e8 <_swiopen+0x30>
 800275a:	f000 f903 	bl	8002964 <__errno>
 800275e:	2311      	movs	r3, #17
 8002760:	6003      	str	r3, [r0, #0]
 8002762:	4620      	mov	r0, r4
 8002764:	b016      	add	sp, #88	; 0x58
 8002766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800276a:	bf00      	nop
 800276c:	200000b0 	.word	0x200000b0

08002770 <_get_semihosting_exts>:
 8002770:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8002774:	4607      	mov	r7, r0
 8002776:	4688      	mov	r8, r1
 8002778:	4829      	ldr	r0, [pc, #164]	; (8002820 <_get_semihosting_exts+0xb0>)
 800277a:	2100      	movs	r1, #0
 800277c:	4615      	mov	r5, r2
 800277e:	f7ff ff9b 	bl	80026b8 <_swiopen>
 8002782:	462a      	mov	r2, r5
 8002784:	4604      	mov	r4, r0
 8002786:	2100      	movs	r1, #0
 8002788:	4638      	mov	r0, r7
 800278a:	f000 f9df 	bl	8002b4c <memset>
 800278e:	1c63      	adds	r3, r4, #1
 8002790:	d015      	beq.n	80027be <_get_semihosting_exts+0x4e>
 8002792:	4620      	mov	r0, r4
 8002794:	f7ff fe3e 	bl	8002414 <findslot>
 8002798:	260c      	movs	r6, #12
 800279a:	4681      	mov	r9, r0
 800279c:	4630      	mov	r0, r6
 800279e:	4649      	mov	r1, r9
 80027a0:	beab      	bkpt	0x00ab
 80027a2:	4606      	mov	r6, r0
 80027a4:	4630      	mov	r0, r6
 80027a6:	f7ff fe4f 	bl	8002448 <checkerror>
 80027aa:	2803      	cmp	r0, #3
 80027ac:	dd02      	ble.n	80027b4 <_get_semihosting_exts+0x44>
 80027ae:	3803      	subs	r0, #3
 80027b0:	42a8      	cmp	r0, r5
 80027b2:	dc08      	bgt.n	80027c6 <_get_semihosting_exts+0x56>
 80027b4:	4620      	mov	r0, r4
 80027b6:	f7ff ff0d 	bl	80025d4 <_close>
 80027ba:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80027be:	4620      	mov	r0, r4
 80027c0:	b003      	add	sp, #12
 80027c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80027c6:	2204      	movs	r2, #4
 80027c8:	eb0d 0102 	add.w	r1, sp, r2
 80027cc:	4620      	mov	r0, r4
 80027ce:	f7ff fe69 	bl	80024a4 <_read>
 80027d2:	2803      	cmp	r0, #3
 80027d4:	ddee      	ble.n	80027b4 <_get_semihosting_exts+0x44>
 80027d6:	f89d 3004 	ldrb.w	r3, [sp, #4]
 80027da:	2b53      	cmp	r3, #83	; 0x53
 80027dc:	d1ea      	bne.n	80027b4 <_get_semihosting_exts+0x44>
 80027de:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80027e2:	2b48      	cmp	r3, #72	; 0x48
 80027e4:	d1e6      	bne.n	80027b4 <_get_semihosting_exts+0x44>
 80027e6:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80027ea:	2b46      	cmp	r3, #70	; 0x46
 80027ec:	d1e2      	bne.n	80027b4 <_get_semihosting_exts+0x44>
 80027ee:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80027f2:	2b42      	cmp	r3, #66	; 0x42
 80027f4:	d1de      	bne.n	80027b4 <_get_semihosting_exts+0x44>
 80027f6:	2201      	movs	r2, #1
 80027f8:	4641      	mov	r1, r8
 80027fa:	4620      	mov	r0, r4
 80027fc:	f7ff fe6c 	bl	80024d8 <_swilseek>
 8002800:	2800      	cmp	r0, #0
 8002802:	dbd7      	blt.n	80027b4 <_get_semihosting_exts+0x44>
 8002804:	462a      	mov	r2, r5
 8002806:	4639      	mov	r1, r7
 8002808:	4620      	mov	r0, r4
 800280a:	f7ff fe4b 	bl	80024a4 <_read>
 800280e:	4605      	mov	r5, r0
 8002810:	4620      	mov	r0, r4
 8002812:	f7ff fedf 	bl	80025d4 <_close>
 8002816:	4628      	mov	r0, r5
 8002818:	f7ff fe16 	bl	8002448 <checkerror>
 800281c:	4604      	mov	r4, r0
 800281e:	e7ce      	b.n	80027be <_get_semihosting_exts+0x4e>
 8002820:	080039ac 	.word	0x080039ac

08002824 <initialise_semihosting_exts>:
 8002824:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002826:	4d0a      	ldr	r5, [pc, #40]	; (8002850 <initialise_semihosting_exts+0x2c>)
 8002828:	4c0a      	ldr	r4, [pc, #40]	; (8002854 <initialise_semihosting_exts+0x30>)
 800282a:	2100      	movs	r1, #0
 800282c:	2201      	movs	r2, #1
 800282e:	a801      	add	r0, sp, #4
 8002830:	6029      	str	r1, [r5, #0]
 8002832:	6022      	str	r2, [r4, #0]
 8002834:	f7ff ff9c 	bl	8002770 <_get_semihosting_exts>
 8002838:	2800      	cmp	r0, #0
 800283a:	dd07      	ble.n	800284c <initialise_semihosting_exts+0x28>
 800283c:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8002840:	f003 0201 	and.w	r2, r3, #1
 8002844:	f003 0302 	and.w	r3, r3, #2
 8002848:	602a      	str	r2, [r5, #0]
 800284a:	6023      	str	r3, [r4, #0]
 800284c:	b003      	add	sp, #12
 800284e:	bd30      	pop	{r4, r5, pc}
 8002850:	20000010 	.word	0x20000010
 8002854:	20000014 	.word	0x20000014

08002858 <_has_ext_stdout_stderr>:
 8002858:	b510      	push	{r4, lr}
 800285a:	4c04      	ldr	r4, [pc, #16]	; (800286c <_has_ext_stdout_stderr+0x14>)
 800285c:	6822      	ldr	r2, [r4, #0]
 800285e:	2a00      	cmp	r2, #0
 8002860:	da01      	bge.n	8002866 <_has_ext_stdout_stderr+0xe>
 8002862:	f7ff ffdf 	bl	8002824 <initialise_semihosting_exts>
 8002866:	6820      	ldr	r0, [r4, #0]
 8002868:	bd10      	pop	{r4, pc}
 800286a:	bf00      	nop
 800286c:	20000014 	.word	0x20000014

08002870 <initialise_monitor_handles>:
 8002870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002874:	b085      	sub	sp, #20
 8002876:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 8002928 <initialise_monitor_handles+0xb8>
 800287a:	f8cd 9004 	str.w	r9, [sp, #4]
 800287e:	2303      	movs	r3, #3
 8002880:	2400      	movs	r4, #0
 8002882:	9303      	str	r3, [sp, #12]
 8002884:	f10d 0804 	add.w	r8, sp, #4
 8002888:	9402      	str	r4, [sp, #8]
 800288a:	2501      	movs	r5, #1
 800288c:	4628      	mov	r0, r5
 800288e:	4641      	mov	r1, r8
 8002890:	beab      	bkpt	0x00ab
 8002892:	4605      	mov	r5, r0
 8002894:	4e20      	ldr	r6, [pc, #128]	; (8002918 <initialise_monitor_handles+0xa8>)
 8002896:	4a21      	ldr	r2, [pc, #132]	; (800291c <initialise_monitor_handles+0xac>)
 8002898:	6035      	str	r5, [r6, #0]
 800289a:	4623      	mov	r3, r4
 800289c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80028a0:	4614      	mov	r4, r2
 80028a2:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
 80028a6:	3301      	adds	r3, #1
 80028a8:	2b14      	cmp	r3, #20
 80028aa:	d1fa      	bne.n	80028a2 <initialise_monitor_handles+0x32>
 80028ac:	f7ff ffd4 	bl	8002858 <_has_ext_stdout_stderr>
 80028b0:	4d1b      	ldr	r5, [pc, #108]	; (8002920 <initialise_monitor_handles+0xb0>)
 80028b2:	b1d0      	cbz	r0, 80028ea <initialise_monitor_handles+0x7a>
 80028b4:	f04f 0a03 	mov.w	sl, #3
 80028b8:	2304      	movs	r3, #4
 80028ba:	f8cd 9004 	str.w	r9, [sp, #4]
 80028be:	2701      	movs	r7, #1
 80028c0:	f8cd a00c 	str.w	sl, [sp, #12]
 80028c4:	9302      	str	r3, [sp, #8]
 80028c6:	4638      	mov	r0, r7
 80028c8:	4641      	mov	r1, r8
 80028ca:	beab      	bkpt	0x00ab
 80028cc:	4683      	mov	fp, r0
 80028ce:	4b15      	ldr	r3, [pc, #84]	; (8002924 <initialise_monitor_handles+0xb4>)
 80028d0:	f8cd 9004 	str.w	r9, [sp, #4]
 80028d4:	f8c3 b000 	str.w	fp, [r3]
 80028d8:	2308      	movs	r3, #8
 80028da:	f8cd a00c 	str.w	sl, [sp, #12]
 80028de:	9302      	str	r3, [sp, #8]
 80028e0:	4638      	mov	r0, r7
 80028e2:	4641      	mov	r1, r8
 80028e4:	beab      	bkpt	0x00ab
 80028e6:	4607      	mov	r7, r0
 80028e8:	602f      	str	r7, [r5, #0]
 80028ea:	682b      	ldr	r3, [r5, #0]
 80028ec:	3301      	adds	r3, #1
 80028ee:	bf02      	ittt	eq
 80028f0:	4b0c      	ldreq	r3, [pc, #48]	; (8002924 <initialise_monitor_handles+0xb4>)
 80028f2:	681b      	ldreq	r3, [r3, #0]
 80028f4:	602b      	streq	r3, [r5, #0]
 80028f6:	6833      	ldr	r3, [r6, #0]
 80028f8:	6023      	str	r3, [r4, #0]
 80028fa:	2600      	movs	r6, #0
 80028fc:	6066      	str	r6, [r4, #4]
 80028fe:	f7ff ffab 	bl	8002858 <_has_ext_stdout_stderr>
 8002902:	b130      	cbz	r0, 8002912 <initialise_monitor_handles+0xa2>
 8002904:	4b07      	ldr	r3, [pc, #28]	; (8002924 <initialise_monitor_handles+0xb4>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	e9c4 3602 	strd	r3, r6, [r4, #8]
 800290c:	682b      	ldr	r3, [r5, #0]
 800290e:	e9c4 3604 	strd	r3, r6, [r4, #16]
 8002912:	b005      	add	sp, #20
 8002914:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002918:	200000a8 	.word	0x200000a8
 800291c:	200000b0 	.word	0x200000b0
 8002920:	200000a4 	.word	0x200000a4
 8002924:	200000ac 	.word	0x200000ac
 8002928:	080039c2 	.word	0x080039c2

0800292c <_isatty>:
 800292c:	b570      	push	{r4, r5, r6, lr}
 800292e:	f7ff fd71 	bl	8002414 <findslot>
 8002932:	2509      	movs	r5, #9
 8002934:	4604      	mov	r4, r0
 8002936:	b920      	cbnz	r0, 8002942 <_isatty+0x16>
 8002938:	f000 f814 	bl	8002964 <__errno>
 800293c:	6005      	str	r5, [r0, #0]
 800293e:	4620      	mov	r0, r4
 8002940:	bd70      	pop	{r4, r5, r6, pc}
 8002942:	4628      	mov	r0, r5
 8002944:	4621      	mov	r1, r4
 8002946:	beab      	bkpt	0x00ab
 8002948:	4604      	mov	r4, r0
 800294a:	2c01      	cmp	r4, #1
 800294c:	d0f7      	beq.n	800293e <_isatty+0x12>
 800294e:	f000 f809 	bl	8002964 <__errno>
 8002952:	2400      	movs	r4, #0
 8002954:	4606      	mov	r6, r0
 8002956:	2513      	movs	r5, #19
 8002958:	4628      	mov	r0, r5
 800295a:	4621      	mov	r1, r4
 800295c:	beab      	bkpt	0x00ab
 800295e:	4605      	mov	r5, r0
 8002960:	6035      	str	r5, [r6, #0]
 8002962:	e7ec      	b.n	800293e <_isatty+0x12>

08002964 <__errno>:
 8002964:	4b01      	ldr	r3, [pc, #4]	; (800296c <__errno+0x8>)
 8002966:	6818      	ldr	r0, [r3, #0]
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	20000018 	.word	0x20000018

08002970 <std>:
 8002970:	2300      	movs	r3, #0
 8002972:	b510      	push	{r4, lr}
 8002974:	4604      	mov	r4, r0
 8002976:	e9c0 3300 	strd	r3, r3, [r0]
 800297a:	6083      	str	r3, [r0, #8]
 800297c:	8181      	strh	r1, [r0, #12]
 800297e:	6643      	str	r3, [r0, #100]	; 0x64
 8002980:	81c2      	strh	r2, [r0, #14]
 8002982:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002986:	6183      	str	r3, [r0, #24]
 8002988:	4619      	mov	r1, r3
 800298a:	2208      	movs	r2, #8
 800298c:	305c      	adds	r0, #92	; 0x5c
 800298e:	f000 f8dd 	bl	8002b4c <memset>
 8002992:	4b05      	ldr	r3, [pc, #20]	; (80029a8 <std+0x38>)
 8002994:	6263      	str	r3, [r4, #36]	; 0x24
 8002996:	4b05      	ldr	r3, [pc, #20]	; (80029ac <std+0x3c>)
 8002998:	62a3      	str	r3, [r4, #40]	; 0x28
 800299a:	4b05      	ldr	r3, [pc, #20]	; (80029b0 <std+0x40>)
 800299c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800299e:	4b05      	ldr	r3, [pc, #20]	; (80029b4 <std+0x44>)
 80029a0:	6224      	str	r4, [r4, #32]
 80029a2:	6323      	str	r3, [r4, #48]	; 0x30
 80029a4:	bd10      	pop	{r4, pc}
 80029a6:	bf00      	nop
 80029a8:	08002d29 	.word	0x08002d29
 80029ac:	08002d4b 	.word	0x08002d4b
 80029b0:	08002d83 	.word	0x08002d83
 80029b4:	08002da7 	.word	0x08002da7

080029b8 <_cleanup_r>:
 80029b8:	4901      	ldr	r1, [pc, #4]	; (80029c0 <_cleanup_r+0x8>)
 80029ba:	f000 b885 	b.w	8002ac8 <_fwalk_reent>
 80029be:	bf00      	nop
 80029c0:	08003081 	.word	0x08003081

080029c4 <__sfmoreglue>:
 80029c4:	b570      	push	{r4, r5, r6, lr}
 80029c6:	1e4a      	subs	r2, r1, #1
 80029c8:	2568      	movs	r5, #104	; 0x68
 80029ca:	4355      	muls	r5, r2
 80029cc:	460e      	mov	r6, r1
 80029ce:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80029d2:	f000 f8c3 	bl	8002b5c <_malloc_r>
 80029d6:	4604      	mov	r4, r0
 80029d8:	b140      	cbz	r0, 80029ec <__sfmoreglue+0x28>
 80029da:	2100      	movs	r1, #0
 80029dc:	e9c0 1600 	strd	r1, r6, [r0]
 80029e0:	300c      	adds	r0, #12
 80029e2:	60a0      	str	r0, [r4, #8]
 80029e4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80029e8:	f000 f8b0 	bl	8002b4c <memset>
 80029ec:	4620      	mov	r0, r4
 80029ee:	bd70      	pop	{r4, r5, r6, pc}

080029f0 <__sinit>:
 80029f0:	6983      	ldr	r3, [r0, #24]
 80029f2:	b510      	push	{r4, lr}
 80029f4:	4604      	mov	r4, r0
 80029f6:	bb33      	cbnz	r3, 8002a46 <__sinit+0x56>
 80029f8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80029fc:	6503      	str	r3, [r0, #80]	; 0x50
 80029fe:	4b12      	ldr	r3, [pc, #72]	; (8002a48 <__sinit+0x58>)
 8002a00:	4a12      	ldr	r2, [pc, #72]	; (8002a4c <__sinit+0x5c>)
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	6282      	str	r2, [r0, #40]	; 0x28
 8002a06:	4298      	cmp	r0, r3
 8002a08:	bf04      	itt	eq
 8002a0a:	2301      	moveq	r3, #1
 8002a0c:	6183      	streq	r3, [r0, #24]
 8002a0e:	f000 f81f 	bl	8002a50 <__sfp>
 8002a12:	6060      	str	r0, [r4, #4]
 8002a14:	4620      	mov	r0, r4
 8002a16:	f000 f81b 	bl	8002a50 <__sfp>
 8002a1a:	60a0      	str	r0, [r4, #8]
 8002a1c:	4620      	mov	r0, r4
 8002a1e:	f000 f817 	bl	8002a50 <__sfp>
 8002a22:	2200      	movs	r2, #0
 8002a24:	60e0      	str	r0, [r4, #12]
 8002a26:	2104      	movs	r1, #4
 8002a28:	6860      	ldr	r0, [r4, #4]
 8002a2a:	f7ff ffa1 	bl	8002970 <std>
 8002a2e:	2201      	movs	r2, #1
 8002a30:	2109      	movs	r1, #9
 8002a32:	68a0      	ldr	r0, [r4, #8]
 8002a34:	f7ff ff9c 	bl	8002970 <std>
 8002a38:	2202      	movs	r2, #2
 8002a3a:	2112      	movs	r1, #18
 8002a3c:	68e0      	ldr	r0, [r4, #12]
 8002a3e:	f7ff ff97 	bl	8002970 <std>
 8002a42:	2301      	movs	r3, #1
 8002a44:	61a3      	str	r3, [r4, #24]
 8002a46:	bd10      	pop	{r4, pc}
 8002a48:	08003a28 	.word	0x08003a28
 8002a4c:	080029b9 	.word	0x080029b9

08002a50 <__sfp>:
 8002a50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a52:	4b1b      	ldr	r3, [pc, #108]	; (8002ac0 <__sfp+0x70>)
 8002a54:	681e      	ldr	r6, [r3, #0]
 8002a56:	69b3      	ldr	r3, [r6, #24]
 8002a58:	4607      	mov	r7, r0
 8002a5a:	b913      	cbnz	r3, 8002a62 <__sfp+0x12>
 8002a5c:	4630      	mov	r0, r6
 8002a5e:	f7ff ffc7 	bl	80029f0 <__sinit>
 8002a62:	3648      	adds	r6, #72	; 0x48
 8002a64:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	d503      	bpl.n	8002a74 <__sfp+0x24>
 8002a6c:	6833      	ldr	r3, [r6, #0]
 8002a6e:	b133      	cbz	r3, 8002a7e <__sfp+0x2e>
 8002a70:	6836      	ldr	r6, [r6, #0]
 8002a72:	e7f7      	b.n	8002a64 <__sfp+0x14>
 8002a74:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002a78:	b16d      	cbz	r5, 8002a96 <__sfp+0x46>
 8002a7a:	3468      	adds	r4, #104	; 0x68
 8002a7c:	e7f4      	b.n	8002a68 <__sfp+0x18>
 8002a7e:	2104      	movs	r1, #4
 8002a80:	4638      	mov	r0, r7
 8002a82:	f7ff ff9f 	bl	80029c4 <__sfmoreglue>
 8002a86:	6030      	str	r0, [r6, #0]
 8002a88:	2800      	cmp	r0, #0
 8002a8a:	d1f1      	bne.n	8002a70 <__sfp+0x20>
 8002a8c:	230c      	movs	r3, #12
 8002a8e:	603b      	str	r3, [r7, #0]
 8002a90:	4604      	mov	r4, r0
 8002a92:	4620      	mov	r0, r4
 8002a94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a96:	4b0b      	ldr	r3, [pc, #44]	; (8002ac4 <__sfp+0x74>)
 8002a98:	6665      	str	r5, [r4, #100]	; 0x64
 8002a9a:	e9c4 5500 	strd	r5, r5, [r4]
 8002a9e:	60a5      	str	r5, [r4, #8]
 8002aa0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002aa4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002aa8:	2208      	movs	r2, #8
 8002aaa:	4629      	mov	r1, r5
 8002aac:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002ab0:	f000 f84c 	bl	8002b4c <memset>
 8002ab4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002ab8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002abc:	e7e9      	b.n	8002a92 <__sfp+0x42>
 8002abe:	bf00      	nop
 8002ac0:	08003a28 	.word	0x08003a28
 8002ac4:	ffff0001 	.word	0xffff0001

08002ac8 <_fwalk_reent>:
 8002ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002acc:	4680      	mov	r8, r0
 8002ace:	4689      	mov	r9, r1
 8002ad0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002ad4:	2600      	movs	r6, #0
 8002ad6:	b914      	cbnz	r4, 8002ade <_fwalk_reent+0x16>
 8002ad8:	4630      	mov	r0, r6
 8002ada:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ade:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002ae2:	3f01      	subs	r7, #1
 8002ae4:	d501      	bpl.n	8002aea <_fwalk_reent+0x22>
 8002ae6:	6824      	ldr	r4, [r4, #0]
 8002ae8:	e7f5      	b.n	8002ad6 <_fwalk_reent+0xe>
 8002aea:	89ab      	ldrh	r3, [r5, #12]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d907      	bls.n	8002b00 <_fwalk_reent+0x38>
 8002af0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002af4:	3301      	adds	r3, #1
 8002af6:	d003      	beq.n	8002b00 <_fwalk_reent+0x38>
 8002af8:	4629      	mov	r1, r5
 8002afa:	4640      	mov	r0, r8
 8002afc:	47c8      	blx	r9
 8002afe:	4306      	orrs	r6, r0
 8002b00:	3568      	adds	r5, #104	; 0x68
 8002b02:	e7ee      	b.n	8002ae2 <_fwalk_reent+0x1a>

08002b04 <__libc_init_array>:
 8002b04:	b570      	push	{r4, r5, r6, lr}
 8002b06:	4e0d      	ldr	r6, [pc, #52]	; (8002b3c <__libc_init_array+0x38>)
 8002b08:	4c0d      	ldr	r4, [pc, #52]	; (8002b40 <__libc_init_array+0x3c>)
 8002b0a:	1ba4      	subs	r4, r4, r6
 8002b0c:	10a4      	asrs	r4, r4, #2
 8002b0e:	2500      	movs	r5, #0
 8002b10:	42a5      	cmp	r5, r4
 8002b12:	d109      	bne.n	8002b28 <__libc_init_array+0x24>
 8002b14:	4e0b      	ldr	r6, [pc, #44]	; (8002b44 <__libc_init_array+0x40>)
 8002b16:	4c0c      	ldr	r4, [pc, #48]	; (8002b48 <__libc_init_array+0x44>)
 8002b18:	f000 fe9e 	bl	8003858 <_init>
 8002b1c:	1ba4      	subs	r4, r4, r6
 8002b1e:	10a4      	asrs	r4, r4, #2
 8002b20:	2500      	movs	r5, #0
 8002b22:	42a5      	cmp	r5, r4
 8002b24:	d105      	bne.n	8002b32 <__libc_init_array+0x2e>
 8002b26:	bd70      	pop	{r4, r5, r6, pc}
 8002b28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b2c:	4798      	blx	r3
 8002b2e:	3501      	adds	r5, #1
 8002b30:	e7ee      	b.n	8002b10 <__libc_init_array+0xc>
 8002b32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002b36:	4798      	blx	r3
 8002b38:	3501      	adds	r5, #1
 8002b3a:	e7f2      	b.n	8002b22 <__libc_init_array+0x1e>
 8002b3c:	08003a68 	.word	0x08003a68
 8002b40:	08003a68 	.word	0x08003a68
 8002b44:	08003a68 	.word	0x08003a68
 8002b48:	08003a6c 	.word	0x08003a6c

08002b4c <memset>:
 8002b4c:	4402      	add	r2, r0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	4293      	cmp	r3, r2
 8002b52:	d100      	bne.n	8002b56 <memset+0xa>
 8002b54:	4770      	bx	lr
 8002b56:	f803 1b01 	strb.w	r1, [r3], #1
 8002b5a:	e7f9      	b.n	8002b50 <memset+0x4>

08002b5c <_malloc_r>:
 8002b5c:	b570      	push	{r4, r5, r6, lr}
 8002b5e:	1ccd      	adds	r5, r1, #3
 8002b60:	f025 0503 	bic.w	r5, r5, #3
 8002b64:	3508      	adds	r5, #8
 8002b66:	2d0c      	cmp	r5, #12
 8002b68:	bf38      	it	cc
 8002b6a:	250c      	movcc	r5, #12
 8002b6c:	2d00      	cmp	r5, #0
 8002b6e:	4606      	mov	r6, r0
 8002b70:	db01      	blt.n	8002b76 <_malloc_r+0x1a>
 8002b72:	42a9      	cmp	r1, r5
 8002b74:	d903      	bls.n	8002b7e <_malloc_r+0x22>
 8002b76:	230c      	movs	r3, #12
 8002b78:	6033      	str	r3, [r6, #0]
 8002b7a:	2000      	movs	r0, #0
 8002b7c:	bd70      	pop	{r4, r5, r6, pc}
 8002b7e:	f000 fb1f 	bl	80031c0 <__malloc_lock>
 8002b82:	4a21      	ldr	r2, [pc, #132]	; (8002c08 <_malloc_r+0xac>)
 8002b84:	6814      	ldr	r4, [r2, #0]
 8002b86:	4621      	mov	r1, r4
 8002b88:	b991      	cbnz	r1, 8002bb0 <_malloc_r+0x54>
 8002b8a:	4c20      	ldr	r4, [pc, #128]	; (8002c0c <_malloc_r+0xb0>)
 8002b8c:	6823      	ldr	r3, [r4, #0]
 8002b8e:	b91b      	cbnz	r3, 8002b98 <_malloc_r+0x3c>
 8002b90:	4630      	mov	r0, r6
 8002b92:	f000 f8b9 	bl	8002d08 <_sbrk_r>
 8002b96:	6020      	str	r0, [r4, #0]
 8002b98:	4629      	mov	r1, r5
 8002b9a:	4630      	mov	r0, r6
 8002b9c:	f000 f8b4 	bl	8002d08 <_sbrk_r>
 8002ba0:	1c43      	adds	r3, r0, #1
 8002ba2:	d124      	bne.n	8002bee <_malloc_r+0x92>
 8002ba4:	230c      	movs	r3, #12
 8002ba6:	6033      	str	r3, [r6, #0]
 8002ba8:	4630      	mov	r0, r6
 8002baa:	f000 fb0a 	bl	80031c2 <__malloc_unlock>
 8002bae:	e7e4      	b.n	8002b7a <_malloc_r+0x1e>
 8002bb0:	680b      	ldr	r3, [r1, #0]
 8002bb2:	1b5b      	subs	r3, r3, r5
 8002bb4:	d418      	bmi.n	8002be8 <_malloc_r+0x8c>
 8002bb6:	2b0b      	cmp	r3, #11
 8002bb8:	d90f      	bls.n	8002bda <_malloc_r+0x7e>
 8002bba:	600b      	str	r3, [r1, #0]
 8002bbc:	50cd      	str	r5, [r1, r3]
 8002bbe:	18cc      	adds	r4, r1, r3
 8002bc0:	4630      	mov	r0, r6
 8002bc2:	f000 fafe 	bl	80031c2 <__malloc_unlock>
 8002bc6:	f104 000b 	add.w	r0, r4, #11
 8002bca:	1d23      	adds	r3, r4, #4
 8002bcc:	f020 0007 	bic.w	r0, r0, #7
 8002bd0:	1ac3      	subs	r3, r0, r3
 8002bd2:	d0d3      	beq.n	8002b7c <_malloc_r+0x20>
 8002bd4:	425a      	negs	r2, r3
 8002bd6:	50e2      	str	r2, [r4, r3]
 8002bd8:	e7d0      	b.n	8002b7c <_malloc_r+0x20>
 8002bda:	428c      	cmp	r4, r1
 8002bdc:	684b      	ldr	r3, [r1, #4]
 8002bde:	bf16      	itet	ne
 8002be0:	6063      	strne	r3, [r4, #4]
 8002be2:	6013      	streq	r3, [r2, #0]
 8002be4:	460c      	movne	r4, r1
 8002be6:	e7eb      	b.n	8002bc0 <_malloc_r+0x64>
 8002be8:	460c      	mov	r4, r1
 8002bea:	6849      	ldr	r1, [r1, #4]
 8002bec:	e7cc      	b.n	8002b88 <_malloc_r+0x2c>
 8002bee:	1cc4      	adds	r4, r0, #3
 8002bf0:	f024 0403 	bic.w	r4, r4, #3
 8002bf4:	42a0      	cmp	r0, r4
 8002bf6:	d005      	beq.n	8002c04 <_malloc_r+0xa8>
 8002bf8:	1a21      	subs	r1, r4, r0
 8002bfa:	4630      	mov	r0, r6
 8002bfc:	f000 f884 	bl	8002d08 <_sbrk_r>
 8002c00:	3001      	adds	r0, #1
 8002c02:	d0cf      	beq.n	8002ba4 <_malloc_r+0x48>
 8002c04:	6025      	str	r5, [r4, #0]
 8002c06:	e7db      	b.n	8002bc0 <_malloc_r+0x64>
 8002c08:	20000150 	.word	0x20000150
 8002c0c:	20000154 	.word	0x20000154

08002c10 <iprintf>:
 8002c10:	b40f      	push	{r0, r1, r2, r3}
 8002c12:	4b0a      	ldr	r3, [pc, #40]	; (8002c3c <iprintf+0x2c>)
 8002c14:	b513      	push	{r0, r1, r4, lr}
 8002c16:	681c      	ldr	r4, [r3, #0]
 8002c18:	b124      	cbz	r4, 8002c24 <iprintf+0x14>
 8002c1a:	69a3      	ldr	r3, [r4, #24]
 8002c1c:	b913      	cbnz	r3, 8002c24 <iprintf+0x14>
 8002c1e:	4620      	mov	r0, r4
 8002c20:	f7ff fee6 	bl	80029f0 <__sinit>
 8002c24:	ab05      	add	r3, sp, #20
 8002c26:	9a04      	ldr	r2, [sp, #16]
 8002c28:	68a1      	ldr	r1, [r4, #8]
 8002c2a:	9301      	str	r3, [sp, #4]
 8002c2c:	4620      	mov	r0, r4
 8002c2e:	f000 fb41 	bl	80032b4 <_vfiprintf_r>
 8002c32:	b002      	add	sp, #8
 8002c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c38:	b004      	add	sp, #16
 8002c3a:	4770      	bx	lr
 8002c3c:	20000018 	.word	0x20000018

08002c40 <_puts_r>:
 8002c40:	b570      	push	{r4, r5, r6, lr}
 8002c42:	460e      	mov	r6, r1
 8002c44:	4605      	mov	r5, r0
 8002c46:	b118      	cbz	r0, 8002c50 <_puts_r+0x10>
 8002c48:	6983      	ldr	r3, [r0, #24]
 8002c4a:	b90b      	cbnz	r3, 8002c50 <_puts_r+0x10>
 8002c4c:	f7ff fed0 	bl	80029f0 <__sinit>
 8002c50:	69ab      	ldr	r3, [r5, #24]
 8002c52:	68ac      	ldr	r4, [r5, #8]
 8002c54:	b913      	cbnz	r3, 8002c5c <_puts_r+0x1c>
 8002c56:	4628      	mov	r0, r5
 8002c58:	f7ff feca 	bl	80029f0 <__sinit>
 8002c5c:	4b23      	ldr	r3, [pc, #140]	; (8002cec <_puts_r+0xac>)
 8002c5e:	429c      	cmp	r4, r3
 8002c60:	d117      	bne.n	8002c92 <_puts_r+0x52>
 8002c62:	686c      	ldr	r4, [r5, #4]
 8002c64:	89a3      	ldrh	r3, [r4, #12]
 8002c66:	071b      	lsls	r3, r3, #28
 8002c68:	d51d      	bpl.n	8002ca6 <_puts_r+0x66>
 8002c6a:	6923      	ldr	r3, [r4, #16]
 8002c6c:	b1db      	cbz	r3, 8002ca6 <_puts_r+0x66>
 8002c6e:	3e01      	subs	r6, #1
 8002c70:	68a3      	ldr	r3, [r4, #8]
 8002c72:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002c76:	3b01      	subs	r3, #1
 8002c78:	60a3      	str	r3, [r4, #8]
 8002c7a:	b9e9      	cbnz	r1, 8002cb8 <_puts_r+0x78>
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	da2e      	bge.n	8002cde <_puts_r+0x9e>
 8002c80:	4622      	mov	r2, r4
 8002c82:	210a      	movs	r1, #10
 8002c84:	4628      	mov	r0, r5
 8002c86:	f000 f893 	bl	8002db0 <__swbuf_r>
 8002c8a:	3001      	adds	r0, #1
 8002c8c:	d011      	beq.n	8002cb2 <_puts_r+0x72>
 8002c8e:	200a      	movs	r0, #10
 8002c90:	e011      	b.n	8002cb6 <_puts_r+0x76>
 8002c92:	4b17      	ldr	r3, [pc, #92]	; (8002cf0 <_puts_r+0xb0>)
 8002c94:	429c      	cmp	r4, r3
 8002c96:	d101      	bne.n	8002c9c <_puts_r+0x5c>
 8002c98:	68ac      	ldr	r4, [r5, #8]
 8002c9a:	e7e3      	b.n	8002c64 <_puts_r+0x24>
 8002c9c:	4b15      	ldr	r3, [pc, #84]	; (8002cf4 <_puts_r+0xb4>)
 8002c9e:	429c      	cmp	r4, r3
 8002ca0:	bf08      	it	eq
 8002ca2:	68ec      	ldreq	r4, [r5, #12]
 8002ca4:	e7de      	b.n	8002c64 <_puts_r+0x24>
 8002ca6:	4621      	mov	r1, r4
 8002ca8:	4628      	mov	r0, r5
 8002caa:	f000 f8e5 	bl	8002e78 <__swsetup_r>
 8002cae:	2800      	cmp	r0, #0
 8002cb0:	d0dd      	beq.n	8002c6e <_puts_r+0x2e>
 8002cb2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002cb6:	bd70      	pop	{r4, r5, r6, pc}
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	da04      	bge.n	8002cc6 <_puts_r+0x86>
 8002cbc:	69a2      	ldr	r2, [r4, #24]
 8002cbe:	429a      	cmp	r2, r3
 8002cc0:	dc06      	bgt.n	8002cd0 <_puts_r+0x90>
 8002cc2:	290a      	cmp	r1, #10
 8002cc4:	d004      	beq.n	8002cd0 <_puts_r+0x90>
 8002cc6:	6823      	ldr	r3, [r4, #0]
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	6022      	str	r2, [r4, #0]
 8002ccc:	7019      	strb	r1, [r3, #0]
 8002cce:	e7cf      	b.n	8002c70 <_puts_r+0x30>
 8002cd0:	4622      	mov	r2, r4
 8002cd2:	4628      	mov	r0, r5
 8002cd4:	f000 f86c 	bl	8002db0 <__swbuf_r>
 8002cd8:	3001      	adds	r0, #1
 8002cda:	d1c9      	bne.n	8002c70 <_puts_r+0x30>
 8002cdc:	e7e9      	b.n	8002cb2 <_puts_r+0x72>
 8002cde:	6823      	ldr	r3, [r4, #0]
 8002ce0:	200a      	movs	r0, #10
 8002ce2:	1c5a      	adds	r2, r3, #1
 8002ce4:	6022      	str	r2, [r4, #0]
 8002ce6:	7018      	strb	r0, [r3, #0]
 8002ce8:	e7e5      	b.n	8002cb6 <_puts_r+0x76>
 8002cea:	bf00      	nop
 8002cec:	080039e8 	.word	0x080039e8
 8002cf0:	08003a08 	.word	0x08003a08
 8002cf4:	080039c8 	.word	0x080039c8

08002cf8 <puts>:
 8002cf8:	4b02      	ldr	r3, [pc, #8]	; (8002d04 <puts+0xc>)
 8002cfa:	4601      	mov	r1, r0
 8002cfc:	6818      	ldr	r0, [r3, #0]
 8002cfe:	f7ff bf9f 	b.w	8002c40 <_puts_r>
 8002d02:	bf00      	nop
 8002d04:	20000018 	.word	0x20000018

08002d08 <_sbrk_r>:
 8002d08:	b538      	push	{r3, r4, r5, lr}
 8002d0a:	4c06      	ldr	r4, [pc, #24]	; (8002d24 <_sbrk_r+0x1c>)
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	4605      	mov	r5, r0
 8002d10:	4608      	mov	r0, r1
 8002d12:	6023      	str	r3, [r4, #0]
 8002d14:	f7ff faf2 	bl	80022fc <_sbrk>
 8002d18:	1c43      	adds	r3, r0, #1
 8002d1a:	d102      	bne.n	8002d22 <_sbrk_r+0x1a>
 8002d1c:	6823      	ldr	r3, [r4, #0]
 8002d1e:	b103      	cbz	r3, 8002d22 <_sbrk_r+0x1a>
 8002d20:	602b      	str	r3, [r5, #0]
 8002d22:	bd38      	pop	{r3, r4, r5, pc}
 8002d24:	20000178 	.word	0x20000178

08002d28 <__sread>:
 8002d28:	b510      	push	{r4, lr}
 8002d2a:	460c      	mov	r4, r1
 8002d2c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d30:	f000 fd5e 	bl	80037f0 <_read_r>
 8002d34:	2800      	cmp	r0, #0
 8002d36:	bfab      	itete	ge
 8002d38:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002d3a:	89a3      	ldrhlt	r3, [r4, #12]
 8002d3c:	181b      	addge	r3, r3, r0
 8002d3e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002d42:	bfac      	ite	ge
 8002d44:	6563      	strge	r3, [r4, #84]	; 0x54
 8002d46:	81a3      	strhlt	r3, [r4, #12]
 8002d48:	bd10      	pop	{r4, pc}

08002d4a <__swrite>:
 8002d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d4e:	461f      	mov	r7, r3
 8002d50:	898b      	ldrh	r3, [r1, #12]
 8002d52:	05db      	lsls	r3, r3, #23
 8002d54:	4605      	mov	r5, r0
 8002d56:	460c      	mov	r4, r1
 8002d58:	4616      	mov	r6, r2
 8002d5a:	d505      	bpl.n	8002d68 <__swrite+0x1e>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	2200      	movs	r2, #0
 8002d60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d64:	f000 f9b6 	bl	80030d4 <_lseek_r>
 8002d68:	89a3      	ldrh	r3, [r4, #12]
 8002d6a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002d72:	81a3      	strh	r3, [r4, #12]
 8002d74:	4632      	mov	r2, r6
 8002d76:	463b      	mov	r3, r7
 8002d78:	4628      	mov	r0, r5
 8002d7a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d7e:	f000 b869 	b.w	8002e54 <_write_r>

08002d82 <__sseek>:
 8002d82:	b510      	push	{r4, lr}
 8002d84:	460c      	mov	r4, r1
 8002d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d8a:	f000 f9a3 	bl	80030d4 <_lseek_r>
 8002d8e:	1c43      	adds	r3, r0, #1
 8002d90:	89a3      	ldrh	r3, [r4, #12]
 8002d92:	bf15      	itete	ne
 8002d94:	6560      	strne	r0, [r4, #84]	; 0x54
 8002d96:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002d9a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002d9e:	81a3      	strheq	r3, [r4, #12]
 8002da0:	bf18      	it	ne
 8002da2:	81a3      	strhne	r3, [r4, #12]
 8002da4:	bd10      	pop	{r4, pc}

08002da6 <__sclose>:
 8002da6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002daa:	f000 b8d3 	b.w	8002f54 <_close_r>
	...

08002db0 <__swbuf_r>:
 8002db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002db2:	460e      	mov	r6, r1
 8002db4:	4614      	mov	r4, r2
 8002db6:	4605      	mov	r5, r0
 8002db8:	b118      	cbz	r0, 8002dc2 <__swbuf_r+0x12>
 8002dba:	6983      	ldr	r3, [r0, #24]
 8002dbc:	b90b      	cbnz	r3, 8002dc2 <__swbuf_r+0x12>
 8002dbe:	f7ff fe17 	bl	80029f0 <__sinit>
 8002dc2:	4b21      	ldr	r3, [pc, #132]	; (8002e48 <__swbuf_r+0x98>)
 8002dc4:	429c      	cmp	r4, r3
 8002dc6:	d12a      	bne.n	8002e1e <__swbuf_r+0x6e>
 8002dc8:	686c      	ldr	r4, [r5, #4]
 8002dca:	69a3      	ldr	r3, [r4, #24]
 8002dcc:	60a3      	str	r3, [r4, #8]
 8002dce:	89a3      	ldrh	r3, [r4, #12]
 8002dd0:	071a      	lsls	r2, r3, #28
 8002dd2:	d52e      	bpl.n	8002e32 <__swbuf_r+0x82>
 8002dd4:	6923      	ldr	r3, [r4, #16]
 8002dd6:	b363      	cbz	r3, 8002e32 <__swbuf_r+0x82>
 8002dd8:	6923      	ldr	r3, [r4, #16]
 8002dda:	6820      	ldr	r0, [r4, #0]
 8002ddc:	1ac0      	subs	r0, r0, r3
 8002dde:	6963      	ldr	r3, [r4, #20]
 8002de0:	b2f6      	uxtb	r6, r6
 8002de2:	4283      	cmp	r3, r0
 8002de4:	4637      	mov	r7, r6
 8002de6:	dc04      	bgt.n	8002df2 <__swbuf_r+0x42>
 8002de8:	4621      	mov	r1, r4
 8002dea:	4628      	mov	r0, r5
 8002dec:	f000 f948 	bl	8003080 <_fflush_r>
 8002df0:	bb28      	cbnz	r0, 8002e3e <__swbuf_r+0x8e>
 8002df2:	68a3      	ldr	r3, [r4, #8]
 8002df4:	3b01      	subs	r3, #1
 8002df6:	60a3      	str	r3, [r4, #8]
 8002df8:	6823      	ldr	r3, [r4, #0]
 8002dfa:	1c5a      	adds	r2, r3, #1
 8002dfc:	6022      	str	r2, [r4, #0]
 8002dfe:	701e      	strb	r6, [r3, #0]
 8002e00:	6963      	ldr	r3, [r4, #20]
 8002e02:	3001      	adds	r0, #1
 8002e04:	4283      	cmp	r3, r0
 8002e06:	d004      	beq.n	8002e12 <__swbuf_r+0x62>
 8002e08:	89a3      	ldrh	r3, [r4, #12]
 8002e0a:	07db      	lsls	r3, r3, #31
 8002e0c:	d519      	bpl.n	8002e42 <__swbuf_r+0x92>
 8002e0e:	2e0a      	cmp	r6, #10
 8002e10:	d117      	bne.n	8002e42 <__swbuf_r+0x92>
 8002e12:	4621      	mov	r1, r4
 8002e14:	4628      	mov	r0, r5
 8002e16:	f000 f933 	bl	8003080 <_fflush_r>
 8002e1a:	b190      	cbz	r0, 8002e42 <__swbuf_r+0x92>
 8002e1c:	e00f      	b.n	8002e3e <__swbuf_r+0x8e>
 8002e1e:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <__swbuf_r+0x9c>)
 8002e20:	429c      	cmp	r4, r3
 8002e22:	d101      	bne.n	8002e28 <__swbuf_r+0x78>
 8002e24:	68ac      	ldr	r4, [r5, #8]
 8002e26:	e7d0      	b.n	8002dca <__swbuf_r+0x1a>
 8002e28:	4b09      	ldr	r3, [pc, #36]	; (8002e50 <__swbuf_r+0xa0>)
 8002e2a:	429c      	cmp	r4, r3
 8002e2c:	bf08      	it	eq
 8002e2e:	68ec      	ldreq	r4, [r5, #12]
 8002e30:	e7cb      	b.n	8002dca <__swbuf_r+0x1a>
 8002e32:	4621      	mov	r1, r4
 8002e34:	4628      	mov	r0, r5
 8002e36:	f000 f81f 	bl	8002e78 <__swsetup_r>
 8002e3a:	2800      	cmp	r0, #0
 8002e3c:	d0cc      	beq.n	8002dd8 <__swbuf_r+0x28>
 8002e3e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8002e42:	4638      	mov	r0, r7
 8002e44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e46:	bf00      	nop
 8002e48:	080039e8 	.word	0x080039e8
 8002e4c:	08003a08 	.word	0x08003a08
 8002e50:	080039c8 	.word	0x080039c8

08002e54 <_write_r>:
 8002e54:	b538      	push	{r3, r4, r5, lr}
 8002e56:	4c07      	ldr	r4, [pc, #28]	; (8002e74 <_write_r+0x20>)
 8002e58:	4605      	mov	r5, r0
 8002e5a:	4608      	mov	r0, r1
 8002e5c:	4611      	mov	r1, r2
 8002e5e:	2200      	movs	r2, #0
 8002e60:	6022      	str	r2, [r4, #0]
 8002e62:	461a      	mov	r2, r3
 8002e64:	f7ff fb87 	bl	8002576 <_write>
 8002e68:	1c43      	adds	r3, r0, #1
 8002e6a:	d102      	bne.n	8002e72 <_write_r+0x1e>
 8002e6c:	6823      	ldr	r3, [r4, #0]
 8002e6e:	b103      	cbz	r3, 8002e72 <_write_r+0x1e>
 8002e70:	602b      	str	r3, [r5, #0]
 8002e72:	bd38      	pop	{r3, r4, r5, pc}
 8002e74:	20000178 	.word	0x20000178

08002e78 <__swsetup_r>:
 8002e78:	4b32      	ldr	r3, [pc, #200]	; (8002f44 <__swsetup_r+0xcc>)
 8002e7a:	b570      	push	{r4, r5, r6, lr}
 8002e7c:	681d      	ldr	r5, [r3, #0]
 8002e7e:	4606      	mov	r6, r0
 8002e80:	460c      	mov	r4, r1
 8002e82:	b125      	cbz	r5, 8002e8e <__swsetup_r+0x16>
 8002e84:	69ab      	ldr	r3, [r5, #24]
 8002e86:	b913      	cbnz	r3, 8002e8e <__swsetup_r+0x16>
 8002e88:	4628      	mov	r0, r5
 8002e8a:	f7ff fdb1 	bl	80029f0 <__sinit>
 8002e8e:	4b2e      	ldr	r3, [pc, #184]	; (8002f48 <__swsetup_r+0xd0>)
 8002e90:	429c      	cmp	r4, r3
 8002e92:	d10f      	bne.n	8002eb4 <__swsetup_r+0x3c>
 8002e94:	686c      	ldr	r4, [r5, #4]
 8002e96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	0715      	lsls	r5, r2, #28
 8002e9e:	d42c      	bmi.n	8002efa <__swsetup_r+0x82>
 8002ea0:	06d0      	lsls	r0, r2, #27
 8002ea2:	d411      	bmi.n	8002ec8 <__swsetup_r+0x50>
 8002ea4:	2209      	movs	r2, #9
 8002ea6:	6032      	str	r2, [r6, #0]
 8002ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002eac:	81a3      	strh	r3, [r4, #12]
 8002eae:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002eb2:	e03e      	b.n	8002f32 <__swsetup_r+0xba>
 8002eb4:	4b25      	ldr	r3, [pc, #148]	; (8002f4c <__swsetup_r+0xd4>)
 8002eb6:	429c      	cmp	r4, r3
 8002eb8:	d101      	bne.n	8002ebe <__swsetup_r+0x46>
 8002eba:	68ac      	ldr	r4, [r5, #8]
 8002ebc:	e7eb      	b.n	8002e96 <__swsetup_r+0x1e>
 8002ebe:	4b24      	ldr	r3, [pc, #144]	; (8002f50 <__swsetup_r+0xd8>)
 8002ec0:	429c      	cmp	r4, r3
 8002ec2:	bf08      	it	eq
 8002ec4:	68ec      	ldreq	r4, [r5, #12]
 8002ec6:	e7e6      	b.n	8002e96 <__swsetup_r+0x1e>
 8002ec8:	0751      	lsls	r1, r2, #29
 8002eca:	d512      	bpl.n	8002ef2 <__swsetup_r+0x7a>
 8002ecc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ece:	b141      	cbz	r1, 8002ee2 <__swsetup_r+0x6a>
 8002ed0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ed4:	4299      	cmp	r1, r3
 8002ed6:	d002      	beq.n	8002ede <__swsetup_r+0x66>
 8002ed8:	4630      	mov	r0, r6
 8002eda:	f000 f973 	bl	80031c4 <_free_r>
 8002ede:	2300      	movs	r3, #0
 8002ee0:	6363      	str	r3, [r4, #52]	; 0x34
 8002ee2:	89a3      	ldrh	r3, [r4, #12]
 8002ee4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002ee8:	81a3      	strh	r3, [r4, #12]
 8002eea:	2300      	movs	r3, #0
 8002eec:	6063      	str	r3, [r4, #4]
 8002eee:	6923      	ldr	r3, [r4, #16]
 8002ef0:	6023      	str	r3, [r4, #0]
 8002ef2:	89a3      	ldrh	r3, [r4, #12]
 8002ef4:	f043 0308 	orr.w	r3, r3, #8
 8002ef8:	81a3      	strh	r3, [r4, #12]
 8002efa:	6923      	ldr	r3, [r4, #16]
 8002efc:	b94b      	cbnz	r3, 8002f12 <__swsetup_r+0x9a>
 8002efe:	89a3      	ldrh	r3, [r4, #12]
 8002f00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002f04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002f08:	d003      	beq.n	8002f12 <__swsetup_r+0x9a>
 8002f0a:	4621      	mov	r1, r4
 8002f0c:	4630      	mov	r0, r6
 8002f0e:	f000 f917 	bl	8003140 <__smakebuf_r>
 8002f12:	89a2      	ldrh	r2, [r4, #12]
 8002f14:	f012 0301 	ands.w	r3, r2, #1
 8002f18:	d00c      	beq.n	8002f34 <__swsetup_r+0xbc>
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	60a3      	str	r3, [r4, #8]
 8002f1e:	6963      	ldr	r3, [r4, #20]
 8002f20:	425b      	negs	r3, r3
 8002f22:	61a3      	str	r3, [r4, #24]
 8002f24:	6923      	ldr	r3, [r4, #16]
 8002f26:	b953      	cbnz	r3, 8002f3e <__swsetup_r+0xc6>
 8002f28:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f2c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002f30:	d1ba      	bne.n	8002ea8 <__swsetup_r+0x30>
 8002f32:	bd70      	pop	{r4, r5, r6, pc}
 8002f34:	0792      	lsls	r2, r2, #30
 8002f36:	bf58      	it	pl
 8002f38:	6963      	ldrpl	r3, [r4, #20]
 8002f3a:	60a3      	str	r3, [r4, #8]
 8002f3c:	e7f2      	b.n	8002f24 <__swsetup_r+0xac>
 8002f3e:	2000      	movs	r0, #0
 8002f40:	e7f7      	b.n	8002f32 <__swsetup_r+0xba>
 8002f42:	bf00      	nop
 8002f44:	20000018 	.word	0x20000018
 8002f48:	080039e8 	.word	0x080039e8
 8002f4c:	08003a08 	.word	0x08003a08
 8002f50:	080039c8 	.word	0x080039c8

08002f54 <_close_r>:
 8002f54:	b538      	push	{r3, r4, r5, lr}
 8002f56:	4c06      	ldr	r4, [pc, #24]	; (8002f70 <_close_r+0x1c>)
 8002f58:	2300      	movs	r3, #0
 8002f5a:	4605      	mov	r5, r0
 8002f5c:	4608      	mov	r0, r1
 8002f5e:	6023      	str	r3, [r4, #0]
 8002f60:	f7ff fb38 	bl	80025d4 <_close>
 8002f64:	1c43      	adds	r3, r0, #1
 8002f66:	d102      	bne.n	8002f6e <_close_r+0x1a>
 8002f68:	6823      	ldr	r3, [r4, #0]
 8002f6a:	b103      	cbz	r3, 8002f6e <_close_r+0x1a>
 8002f6c:	602b      	str	r3, [r5, #0]
 8002f6e:	bd38      	pop	{r3, r4, r5, pc}
 8002f70:	20000178 	.word	0x20000178

08002f74 <__sflush_r>:
 8002f74:	898a      	ldrh	r2, [r1, #12]
 8002f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f7a:	4605      	mov	r5, r0
 8002f7c:	0710      	lsls	r0, r2, #28
 8002f7e:	460c      	mov	r4, r1
 8002f80:	d458      	bmi.n	8003034 <__sflush_r+0xc0>
 8002f82:	684b      	ldr	r3, [r1, #4]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	dc05      	bgt.n	8002f94 <__sflush_r+0x20>
 8002f88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	dc02      	bgt.n	8002f94 <__sflush_r+0x20>
 8002f8e:	2000      	movs	r0, #0
 8002f90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002f94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002f96:	2e00      	cmp	r6, #0
 8002f98:	d0f9      	beq.n	8002f8e <__sflush_r+0x1a>
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002fa0:	682f      	ldr	r7, [r5, #0]
 8002fa2:	6a21      	ldr	r1, [r4, #32]
 8002fa4:	602b      	str	r3, [r5, #0]
 8002fa6:	d032      	beq.n	800300e <__sflush_r+0x9a>
 8002fa8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002faa:	89a3      	ldrh	r3, [r4, #12]
 8002fac:	075a      	lsls	r2, r3, #29
 8002fae:	d505      	bpl.n	8002fbc <__sflush_r+0x48>
 8002fb0:	6863      	ldr	r3, [r4, #4]
 8002fb2:	1ac0      	subs	r0, r0, r3
 8002fb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002fb6:	b10b      	cbz	r3, 8002fbc <__sflush_r+0x48>
 8002fb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002fba:	1ac0      	subs	r0, r0, r3
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002fc2:	6a21      	ldr	r1, [r4, #32]
 8002fc4:	4628      	mov	r0, r5
 8002fc6:	47b0      	blx	r6
 8002fc8:	1c43      	adds	r3, r0, #1
 8002fca:	89a3      	ldrh	r3, [r4, #12]
 8002fcc:	d106      	bne.n	8002fdc <__sflush_r+0x68>
 8002fce:	6829      	ldr	r1, [r5, #0]
 8002fd0:	291d      	cmp	r1, #29
 8002fd2:	d848      	bhi.n	8003066 <__sflush_r+0xf2>
 8002fd4:	4a29      	ldr	r2, [pc, #164]	; (800307c <__sflush_r+0x108>)
 8002fd6:	40ca      	lsrs	r2, r1
 8002fd8:	07d6      	lsls	r6, r2, #31
 8002fda:	d544      	bpl.n	8003066 <__sflush_r+0xf2>
 8002fdc:	2200      	movs	r2, #0
 8002fde:	6062      	str	r2, [r4, #4]
 8002fe0:	04d9      	lsls	r1, r3, #19
 8002fe2:	6922      	ldr	r2, [r4, #16]
 8002fe4:	6022      	str	r2, [r4, #0]
 8002fe6:	d504      	bpl.n	8002ff2 <__sflush_r+0x7e>
 8002fe8:	1c42      	adds	r2, r0, #1
 8002fea:	d101      	bne.n	8002ff0 <__sflush_r+0x7c>
 8002fec:	682b      	ldr	r3, [r5, #0]
 8002fee:	b903      	cbnz	r3, 8002ff2 <__sflush_r+0x7e>
 8002ff0:	6560      	str	r0, [r4, #84]	; 0x54
 8002ff2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ff4:	602f      	str	r7, [r5, #0]
 8002ff6:	2900      	cmp	r1, #0
 8002ff8:	d0c9      	beq.n	8002f8e <__sflush_r+0x1a>
 8002ffa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002ffe:	4299      	cmp	r1, r3
 8003000:	d002      	beq.n	8003008 <__sflush_r+0x94>
 8003002:	4628      	mov	r0, r5
 8003004:	f000 f8de 	bl	80031c4 <_free_r>
 8003008:	2000      	movs	r0, #0
 800300a:	6360      	str	r0, [r4, #52]	; 0x34
 800300c:	e7c0      	b.n	8002f90 <__sflush_r+0x1c>
 800300e:	2301      	movs	r3, #1
 8003010:	4628      	mov	r0, r5
 8003012:	47b0      	blx	r6
 8003014:	1c41      	adds	r1, r0, #1
 8003016:	d1c8      	bne.n	8002faa <__sflush_r+0x36>
 8003018:	682b      	ldr	r3, [r5, #0]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d0c5      	beq.n	8002faa <__sflush_r+0x36>
 800301e:	2b1d      	cmp	r3, #29
 8003020:	d001      	beq.n	8003026 <__sflush_r+0xb2>
 8003022:	2b16      	cmp	r3, #22
 8003024:	d101      	bne.n	800302a <__sflush_r+0xb6>
 8003026:	602f      	str	r7, [r5, #0]
 8003028:	e7b1      	b.n	8002f8e <__sflush_r+0x1a>
 800302a:	89a3      	ldrh	r3, [r4, #12]
 800302c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003030:	81a3      	strh	r3, [r4, #12]
 8003032:	e7ad      	b.n	8002f90 <__sflush_r+0x1c>
 8003034:	690f      	ldr	r7, [r1, #16]
 8003036:	2f00      	cmp	r7, #0
 8003038:	d0a9      	beq.n	8002f8e <__sflush_r+0x1a>
 800303a:	0793      	lsls	r3, r2, #30
 800303c:	680e      	ldr	r6, [r1, #0]
 800303e:	bf08      	it	eq
 8003040:	694b      	ldreq	r3, [r1, #20]
 8003042:	600f      	str	r7, [r1, #0]
 8003044:	bf18      	it	ne
 8003046:	2300      	movne	r3, #0
 8003048:	eba6 0807 	sub.w	r8, r6, r7
 800304c:	608b      	str	r3, [r1, #8]
 800304e:	f1b8 0f00 	cmp.w	r8, #0
 8003052:	dd9c      	ble.n	8002f8e <__sflush_r+0x1a>
 8003054:	4643      	mov	r3, r8
 8003056:	463a      	mov	r2, r7
 8003058:	6a21      	ldr	r1, [r4, #32]
 800305a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800305c:	4628      	mov	r0, r5
 800305e:	47b0      	blx	r6
 8003060:	2800      	cmp	r0, #0
 8003062:	dc06      	bgt.n	8003072 <__sflush_r+0xfe>
 8003064:	89a3      	ldrh	r3, [r4, #12]
 8003066:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800306a:	81a3      	strh	r3, [r4, #12]
 800306c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003070:	e78e      	b.n	8002f90 <__sflush_r+0x1c>
 8003072:	4407      	add	r7, r0
 8003074:	eba8 0800 	sub.w	r8, r8, r0
 8003078:	e7e9      	b.n	800304e <__sflush_r+0xda>
 800307a:	bf00      	nop
 800307c:	20400001 	.word	0x20400001

08003080 <_fflush_r>:
 8003080:	b538      	push	{r3, r4, r5, lr}
 8003082:	690b      	ldr	r3, [r1, #16]
 8003084:	4605      	mov	r5, r0
 8003086:	460c      	mov	r4, r1
 8003088:	b1db      	cbz	r3, 80030c2 <_fflush_r+0x42>
 800308a:	b118      	cbz	r0, 8003094 <_fflush_r+0x14>
 800308c:	6983      	ldr	r3, [r0, #24]
 800308e:	b90b      	cbnz	r3, 8003094 <_fflush_r+0x14>
 8003090:	f7ff fcae 	bl	80029f0 <__sinit>
 8003094:	4b0c      	ldr	r3, [pc, #48]	; (80030c8 <_fflush_r+0x48>)
 8003096:	429c      	cmp	r4, r3
 8003098:	d109      	bne.n	80030ae <_fflush_r+0x2e>
 800309a:	686c      	ldr	r4, [r5, #4]
 800309c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030a0:	b17b      	cbz	r3, 80030c2 <_fflush_r+0x42>
 80030a2:	4621      	mov	r1, r4
 80030a4:	4628      	mov	r0, r5
 80030a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030aa:	f7ff bf63 	b.w	8002f74 <__sflush_r>
 80030ae:	4b07      	ldr	r3, [pc, #28]	; (80030cc <_fflush_r+0x4c>)
 80030b0:	429c      	cmp	r4, r3
 80030b2:	d101      	bne.n	80030b8 <_fflush_r+0x38>
 80030b4:	68ac      	ldr	r4, [r5, #8]
 80030b6:	e7f1      	b.n	800309c <_fflush_r+0x1c>
 80030b8:	4b05      	ldr	r3, [pc, #20]	; (80030d0 <_fflush_r+0x50>)
 80030ba:	429c      	cmp	r4, r3
 80030bc:	bf08      	it	eq
 80030be:	68ec      	ldreq	r4, [r5, #12]
 80030c0:	e7ec      	b.n	800309c <_fflush_r+0x1c>
 80030c2:	2000      	movs	r0, #0
 80030c4:	bd38      	pop	{r3, r4, r5, pc}
 80030c6:	bf00      	nop
 80030c8:	080039e8 	.word	0x080039e8
 80030cc:	08003a08 	.word	0x08003a08
 80030d0:	080039c8 	.word	0x080039c8

080030d4 <_lseek_r>:
 80030d4:	b538      	push	{r3, r4, r5, lr}
 80030d6:	4c07      	ldr	r4, [pc, #28]	; (80030f4 <_lseek_r+0x20>)
 80030d8:	4605      	mov	r5, r0
 80030da:	4608      	mov	r0, r1
 80030dc:	4611      	mov	r1, r2
 80030de:	2200      	movs	r2, #0
 80030e0:	6022      	str	r2, [r4, #0]
 80030e2:	461a      	mov	r2, r3
 80030e4:	f7ff fa35 	bl	8002552 <_lseek>
 80030e8:	1c43      	adds	r3, r0, #1
 80030ea:	d102      	bne.n	80030f2 <_lseek_r+0x1e>
 80030ec:	6823      	ldr	r3, [r4, #0]
 80030ee:	b103      	cbz	r3, 80030f2 <_lseek_r+0x1e>
 80030f0:	602b      	str	r3, [r5, #0]
 80030f2:	bd38      	pop	{r3, r4, r5, pc}
 80030f4:	20000178 	.word	0x20000178

080030f8 <__swhatbuf_r>:
 80030f8:	b570      	push	{r4, r5, r6, lr}
 80030fa:	460e      	mov	r6, r1
 80030fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003100:	2900      	cmp	r1, #0
 8003102:	b096      	sub	sp, #88	; 0x58
 8003104:	4614      	mov	r4, r2
 8003106:	461d      	mov	r5, r3
 8003108:	da07      	bge.n	800311a <__swhatbuf_r+0x22>
 800310a:	2300      	movs	r3, #0
 800310c:	602b      	str	r3, [r5, #0]
 800310e:	89b3      	ldrh	r3, [r6, #12]
 8003110:	061a      	lsls	r2, r3, #24
 8003112:	d410      	bmi.n	8003136 <__swhatbuf_r+0x3e>
 8003114:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003118:	e00e      	b.n	8003138 <__swhatbuf_r+0x40>
 800311a:	466a      	mov	r2, sp
 800311c:	f000 fb7a 	bl	8003814 <_fstat_r>
 8003120:	2800      	cmp	r0, #0
 8003122:	dbf2      	blt.n	800310a <__swhatbuf_r+0x12>
 8003124:	9a01      	ldr	r2, [sp, #4]
 8003126:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800312a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800312e:	425a      	negs	r2, r3
 8003130:	415a      	adcs	r2, r3
 8003132:	602a      	str	r2, [r5, #0]
 8003134:	e7ee      	b.n	8003114 <__swhatbuf_r+0x1c>
 8003136:	2340      	movs	r3, #64	; 0x40
 8003138:	2000      	movs	r0, #0
 800313a:	6023      	str	r3, [r4, #0]
 800313c:	b016      	add	sp, #88	; 0x58
 800313e:	bd70      	pop	{r4, r5, r6, pc}

08003140 <__smakebuf_r>:
 8003140:	898b      	ldrh	r3, [r1, #12]
 8003142:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003144:	079d      	lsls	r5, r3, #30
 8003146:	4606      	mov	r6, r0
 8003148:	460c      	mov	r4, r1
 800314a:	d507      	bpl.n	800315c <__smakebuf_r+0x1c>
 800314c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003150:	6023      	str	r3, [r4, #0]
 8003152:	6123      	str	r3, [r4, #16]
 8003154:	2301      	movs	r3, #1
 8003156:	6163      	str	r3, [r4, #20]
 8003158:	b002      	add	sp, #8
 800315a:	bd70      	pop	{r4, r5, r6, pc}
 800315c:	ab01      	add	r3, sp, #4
 800315e:	466a      	mov	r2, sp
 8003160:	f7ff ffca 	bl	80030f8 <__swhatbuf_r>
 8003164:	9900      	ldr	r1, [sp, #0]
 8003166:	4605      	mov	r5, r0
 8003168:	4630      	mov	r0, r6
 800316a:	f7ff fcf7 	bl	8002b5c <_malloc_r>
 800316e:	b948      	cbnz	r0, 8003184 <__smakebuf_r+0x44>
 8003170:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003174:	059a      	lsls	r2, r3, #22
 8003176:	d4ef      	bmi.n	8003158 <__smakebuf_r+0x18>
 8003178:	f023 0303 	bic.w	r3, r3, #3
 800317c:	f043 0302 	orr.w	r3, r3, #2
 8003180:	81a3      	strh	r3, [r4, #12]
 8003182:	e7e3      	b.n	800314c <__smakebuf_r+0xc>
 8003184:	4b0d      	ldr	r3, [pc, #52]	; (80031bc <__smakebuf_r+0x7c>)
 8003186:	62b3      	str	r3, [r6, #40]	; 0x28
 8003188:	89a3      	ldrh	r3, [r4, #12]
 800318a:	6020      	str	r0, [r4, #0]
 800318c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003190:	81a3      	strh	r3, [r4, #12]
 8003192:	9b00      	ldr	r3, [sp, #0]
 8003194:	6163      	str	r3, [r4, #20]
 8003196:	9b01      	ldr	r3, [sp, #4]
 8003198:	6120      	str	r0, [r4, #16]
 800319a:	b15b      	cbz	r3, 80031b4 <__smakebuf_r+0x74>
 800319c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80031a0:	4630      	mov	r0, r6
 80031a2:	f000 fb49 	bl	8003838 <_isatty_r>
 80031a6:	b128      	cbz	r0, 80031b4 <__smakebuf_r+0x74>
 80031a8:	89a3      	ldrh	r3, [r4, #12]
 80031aa:	f023 0303 	bic.w	r3, r3, #3
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	81a3      	strh	r3, [r4, #12]
 80031b4:	89a3      	ldrh	r3, [r4, #12]
 80031b6:	431d      	orrs	r5, r3
 80031b8:	81a5      	strh	r5, [r4, #12]
 80031ba:	e7cd      	b.n	8003158 <__smakebuf_r+0x18>
 80031bc:	080029b9 	.word	0x080029b9

080031c0 <__malloc_lock>:
 80031c0:	4770      	bx	lr

080031c2 <__malloc_unlock>:
 80031c2:	4770      	bx	lr

080031c4 <_free_r>:
 80031c4:	b538      	push	{r3, r4, r5, lr}
 80031c6:	4605      	mov	r5, r0
 80031c8:	2900      	cmp	r1, #0
 80031ca:	d045      	beq.n	8003258 <_free_r+0x94>
 80031cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80031d0:	1f0c      	subs	r4, r1, #4
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	bfb8      	it	lt
 80031d6:	18e4      	addlt	r4, r4, r3
 80031d8:	f7ff fff2 	bl	80031c0 <__malloc_lock>
 80031dc:	4a1f      	ldr	r2, [pc, #124]	; (800325c <_free_r+0x98>)
 80031de:	6813      	ldr	r3, [r2, #0]
 80031e0:	4610      	mov	r0, r2
 80031e2:	b933      	cbnz	r3, 80031f2 <_free_r+0x2e>
 80031e4:	6063      	str	r3, [r4, #4]
 80031e6:	6014      	str	r4, [r2, #0]
 80031e8:	4628      	mov	r0, r5
 80031ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80031ee:	f7ff bfe8 	b.w	80031c2 <__malloc_unlock>
 80031f2:	42a3      	cmp	r3, r4
 80031f4:	d90c      	bls.n	8003210 <_free_r+0x4c>
 80031f6:	6821      	ldr	r1, [r4, #0]
 80031f8:	1862      	adds	r2, r4, r1
 80031fa:	4293      	cmp	r3, r2
 80031fc:	bf04      	itt	eq
 80031fe:	681a      	ldreq	r2, [r3, #0]
 8003200:	685b      	ldreq	r3, [r3, #4]
 8003202:	6063      	str	r3, [r4, #4]
 8003204:	bf04      	itt	eq
 8003206:	1852      	addeq	r2, r2, r1
 8003208:	6022      	streq	r2, [r4, #0]
 800320a:	6004      	str	r4, [r0, #0]
 800320c:	e7ec      	b.n	80031e8 <_free_r+0x24>
 800320e:	4613      	mov	r3, r2
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	b10a      	cbz	r2, 8003218 <_free_r+0x54>
 8003214:	42a2      	cmp	r2, r4
 8003216:	d9fa      	bls.n	800320e <_free_r+0x4a>
 8003218:	6819      	ldr	r1, [r3, #0]
 800321a:	1858      	adds	r0, r3, r1
 800321c:	42a0      	cmp	r0, r4
 800321e:	d10b      	bne.n	8003238 <_free_r+0x74>
 8003220:	6820      	ldr	r0, [r4, #0]
 8003222:	4401      	add	r1, r0
 8003224:	1858      	adds	r0, r3, r1
 8003226:	4282      	cmp	r2, r0
 8003228:	6019      	str	r1, [r3, #0]
 800322a:	d1dd      	bne.n	80031e8 <_free_r+0x24>
 800322c:	6810      	ldr	r0, [r2, #0]
 800322e:	6852      	ldr	r2, [r2, #4]
 8003230:	605a      	str	r2, [r3, #4]
 8003232:	4401      	add	r1, r0
 8003234:	6019      	str	r1, [r3, #0]
 8003236:	e7d7      	b.n	80031e8 <_free_r+0x24>
 8003238:	d902      	bls.n	8003240 <_free_r+0x7c>
 800323a:	230c      	movs	r3, #12
 800323c:	602b      	str	r3, [r5, #0]
 800323e:	e7d3      	b.n	80031e8 <_free_r+0x24>
 8003240:	6820      	ldr	r0, [r4, #0]
 8003242:	1821      	adds	r1, r4, r0
 8003244:	428a      	cmp	r2, r1
 8003246:	bf04      	itt	eq
 8003248:	6811      	ldreq	r1, [r2, #0]
 800324a:	6852      	ldreq	r2, [r2, #4]
 800324c:	6062      	str	r2, [r4, #4]
 800324e:	bf04      	itt	eq
 8003250:	1809      	addeq	r1, r1, r0
 8003252:	6021      	streq	r1, [r4, #0]
 8003254:	605c      	str	r4, [r3, #4]
 8003256:	e7c7      	b.n	80031e8 <_free_r+0x24>
 8003258:	bd38      	pop	{r3, r4, r5, pc}
 800325a:	bf00      	nop
 800325c:	20000150 	.word	0x20000150

08003260 <__sfputc_r>:
 8003260:	6893      	ldr	r3, [r2, #8]
 8003262:	3b01      	subs	r3, #1
 8003264:	2b00      	cmp	r3, #0
 8003266:	b410      	push	{r4}
 8003268:	6093      	str	r3, [r2, #8]
 800326a:	da08      	bge.n	800327e <__sfputc_r+0x1e>
 800326c:	6994      	ldr	r4, [r2, #24]
 800326e:	42a3      	cmp	r3, r4
 8003270:	db01      	blt.n	8003276 <__sfputc_r+0x16>
 8003272:	290a      	cmp	r1, #10
 8003274:	d103      	bne.n	800327e <__sfputc_r+0x1e>
 8003276:	f85d 4b04 	ldr.w	r4, [sp], #4
 800327a:	f7ff bd99 	b.w	8002db0 <__swbuf_r>
 800327e:	6813      	ldr	r3, [r2, #0]
 8003280:	1c58      	adds	r0, r3, #1
 8003282:	6010      	str	r0, [r2, #0]
 8003284:	7019      	strb	r1, [r3, #0]
 8003286:	4608      	mov	r0, r1
 8003288:	f85d 4b04 	ldr.w	r4, [sp], #4
 800328c:	4770      	bx	lr

0800328e <__sfputs_r>:
 800328e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003290:	4606      	mov	r6, r0
 8003292:	460f      	mov	r7, r1
 8003294:	4614      	mov	r4, r2
 8003296:	18d5      	adds	r5, r2, r3
 8003298:	42ac      	cmp	r4, r5
 800329a:	d101      	bne.n	80032a0 <__sfputs_r+0x12>
 800329c:	2000      	movs	r0, #0
 800329e:	e007      	b.n	80032b0 <__sfputs_r+0x22>
 80032a0:	463a      	mov	r2, r7
 80032a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80032a6:	4630      	mov	r0, r6
 80032a8:	f7ff ffda 	bl	8003260 <__sfputc_r>
 80032ac:	1c43      	adds	r3, r0, #1
 80032ae:	d1f3      	bne.n	8003298 <__sfputs_r+0xa>
 80032b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080032b4 <_vfiprintf_r>:
 80032b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032b8:	460c      	mov	r4, r1
 80032ba:	b09d      	sub	sp, #116	; 0x74
 80032bc:	4617      	mov	r7, r2
 80032be:	461d      	mov	r5, r3
 80032c0:	4606      	mov	r6, r0
 80032c2:	b118      	cbz	r0, 80032cc <_vfiprintf_r+0x18>
 80032c4:	6983      	ldr	r3, [r0, #24]
 80032c6:	b90b      	cbnz	r3, 80032cc <_vfiprintf_r+0x18>
 80032c8:	f7ff fb92 	bl	80029f0 <__sinit>
 80032cc:	4b7c      	ldr	r3, [pc, #496]	; (80034c0 <_vfiprintf_r+0x20c>)
 80032ce:	429c      	cmp	r4, r3
 80032d0:	d158      	bne.n	8003384 <_vfiprintf_r+0xd0>
 80032d2:	6874      	ldr	r4, [r6, #4]
 80032d4:	89a3      	ldrh	r3, [r4, #12]
 80032d6:	0718      	lsls	r0, r3, #28
 80032d8:	d55e      	bpl.n	8003398 <_vfiprintf_r+0xe4>
 80032da:	6923      	ldr	r3, [r4, #16]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d05b      	beq.n	8003398 <_vfiprintf_r+0xe4>
 80032e0:	2300      	movs	r3, #0
 80032e2:	9309      	str	r3, [sp, #36]	; 0x24
 80032e4:	2320      	movs	r3, #32
 80032e6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80032ea:	2330      	movs	r3, #48	; 0x30
 80032ec:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80032f0:	9503      	str	r5, [sp, #12]
 80032f2:	f04f 0b01 	mov.w	fp, #1
 80032f6:	46b8      	mov	r8, r7
 80032f8:	4645      	mov	r5, r8
 80032fa:	f815 3b01 	ldrb.w	r3, [r5], #1
 80032fe:	b10b      	cbz	r3, 8003304 <_vfiprintf_r+0x50>
 8003300:	2b25      	cmp	r3, #37	; 0x25
 8003302:	d154      	bne.n	80033ae <_vfiprintf_r+0xfa>
 8003304:	ebb8 0a07 	subs.w	sl, r8, r7
 8003308:	d00b      	beq.n	8003322 <_vfiprintf_r+0x6e>
 800330a:	4653      	mov	r3, sl
 800330c:	463a      	mov	r2, r7
 800330e:	4621      	mov	r1, r4
 8003310:	4630      	mov	r0, r6
 8003312:	f7ff ffbc 	bl	800328e <__sfputs_r>
 8003316:	3001      	adds	r0, #1
 8003318:	f000 80c2 	beq.w	80034a0 <_vfiprintf_r+0x1ec>
 800331c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800331e:	4453      	add	r3, sl
 8003320:	9309      	str	r3, [sp, #36]	; 0x24
 8003322:	f898 3000 	ldrb.w	r3, [r8]
 8003326:	2b00      	cmp	r3, #0
 8003328:	f000 80ba 	beq.w	80034a0 <_vfiprintf_r+0x1ec>
 800332c:	2300      	movs	r3, #0
 800332e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003332:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003336:	9304      	str	r3, [sp, #16]
 8003338:	9307      	str	r3, [sp, #28]
 800333a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800333e:	931a      	str	r3, [sp, #104]	; 0x68
 8003340:	46a8      	mov	r8, r5
 8003342:	2205      	movs	r2, #5
 8003344:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003348:	485e      	ldr	r0, [pc, #376]	; (80034c4 <_vfiprintf_r+0x210>)
 800334a:	f7fc ff51 	bl	80001f0 <memchr>
 800334e:	9b04      	ldr	r3, [sp, #16]
 8003350:	bb78      	cbnz	r0, 80033b2 <_vfiprintf_r+0xfe>
 8003352:	06d9      	lsls	r1, r3, #27
 8003354:	bf44      	itt	mi
 8003356:	2220      	movmi	r2, #32
 8003358:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800335c:	071a      	lsls	r2, r3, #28
 800335e:	bf44      	itt	mi
 8003360:	222b      	movmi	r2, #43	; 0x2b
 8003362:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003366:	782a      	ldrb	r2, [r5, #0]
 8003368:	2a2a      	cmp	r2, #42	; 0x2a
 800336a:	d02a      	beq.n	80033c2 <_vfiprintf_r+0x10e>
 800336c:	9a07      	ldr	r2, [sp, #28]
 800336e:	46a8      	mov	r8, r5
 8003370:	2000      	movs	r0, #0
 8003372:	250a      	movs	r5, #10
 8003374:	4641      	mov	r1, r8
 8003376:	f811 3b01 	ldrb.w	r3, [r1], #1
 800337a:	3b30      	subs	r3, #48	; 0x30
 800337c:	2b09      	cmp	r3, #9
 800337e:	d969      	bls.n	8003454 <_vfiprintf_r+0x1a0>
 8003380:	b360      	cbz	r0, 80033dc <_vfiprintf_r+0x128>
 8003382:	e024      	b.n	80033ce <_vfiprintf_r+0x11a>
 8003384:	4b50      	ldr	r3, [pc, #320]	; (80034c8 <_vfiprintf_r+0x214>)
 8003386:	429c      	cmp	r4, r3
 8003388:	d101      	bne.n	800338e <_vfiprintf_r+0xda>
 800338a:	68b4      	ldr	r4, [r6, #8]
 800338c:	e7a2      	b.n	80032d4 <_vfiprintf_r+0x20>
 800338e:	4b4f      	ldr	r3, [pc, #316]	; (80034cc <_vfiprintf_r+0x218>)
 8003390:	429c      	cmp	r4, r3
 8003392:	bf08      	it	eq
 8003394:	68f4      	ldreq	r4, [r6, #12]
 8003396:	e79d      	b.n	80032d4 <_vfiprintf_r+0x20>
 8003398:	4621      	mov	r1, r4
 800339a:	4630      	mov	r0, r6
 800339c:	f7ff fd6c 	bl	8002e78 <__swsetup_r>
 80033a0:	2800      	cmp	r0, #0
 80033a2:	d09d      	beq.n	80032e0 <_vfiprintf_r+0x2c>
 80033a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80033a8:	b01d      	add	sp, #116	; 0x74
 80033aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033ae:	46a8      	mov	r8, r5
 80033b0:	e7a2      	b.n	80032f8 <_vfiprintf_r+0x44>
 80033b2:	4a44      	ldr	r2, [pc, #272]	; (80034c4 <_vfiprintf_r+0x210>)
 80033b4:	1a80      	subs	r0, r0, r2
 80033b6:	fa0b f000 	lsl.w	r0, fp, r0
 80033ba:	4318      	orrs	r0, r3
 80033bc:	9004      	str	r0, [sp, #16]
 80033be:	4645      	mov	r5, r8
 80033c0:	e7be      	b.n	8003340 <_vfiprintf_r+0x8c>
 80033c2:	9a03      	ldr	r2, [sp, #12]
 80033c4:	1d11      	adds	r1, r2, #4
 80033c6:	6812      	ldr	r2, [r2, #0]
 80033c8:	9103      	str	r1, [sp, #12]
 80033ca:	2a00      	cmp	r2, #0
 80033cc:	db01      	blt.n	80033d2 <_vfiprintf_r+0x11e>
 80033ce:	9207      	str	r2, [sp, #28]
 80033d0:	e004      	b.n	80033dc <_vfiprintf_r+0x128>
 80033d2:	4252      	negs	r2, r2
 80033d4:	f043 0302 	orr.w	r3, r3, #2
 80033d8:	9207      	str	r2, [sp, #28]
 80033da:	9304      	str	r3, [sp, #16]
 80033dc:	f898 3000 	ldrb.w	r3, [r8]
 80033e0:	2b2e      	cmp	r3, #46	; 0x2e
 80033e2:	d10e      	bne.n	8003402 <_vfiprintf_r+0x14e>
 80033e4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80033e8:	2b2a      	cmp	r3, #42	; 0x2a
 80033ea:	d138      	bne.n	800345e <_vfiprintf_r+0x1aa>
 80033ec:	9b03      	ldr	r3, [sp, #12]
 80033ee:	1d1a      	adds	r2, r3, #4
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	9203      	str	r2, [sp, #12]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	bfb8      	it	lt
 80033f8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80033fc:	f108 0802 	add.w	r8, r8, #2
 8003400:	9305      	str	r3, [sp, #20]
 8003402:	4d33      	ldr	r5, [pc, #204]	; (80034d0 <_vfiprintf_r+0x21c>)
 8003404:	f898 1000 	ldrb.w	r1, [r8]
 8003408:	2203      	movs	r2, #3
 800340a:	4628      	mov	r0, r5
 800340c:	f7fc fef0 	bl	80001f0 <memchr>
 8003410:	b140      	cbz	r0, 8003424 <_vfiprintf_r+0x170>
 8003412:	2340      	movs	r3, #64	; 0x40
 8003414:	1b40      	subs	r0, r0, r5
 8003416:	fa03 f000 	lsl.w	r0, r3, r0
 800341a:	9b04      	ldr	r3, [sp, #16]
 800341c:	4303      	orrs	r3, r0
 800341e:	f108 0801 	add.w	r8, r8, #1
 8003422:	9304      	str	r3, [sp, #16]
 8003424:	f898 1000 	ldrb.w	r1, [r8]
 8003428:	482a      	ldr	r0, [pc, #168]	; (80034d4 <_vfiprintf_r+0x220>)
 800342a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800342e:	2206      	movs	r2, #6
 8003430:	f108 0701 	add.w	r7, r8, #1
 8003434:	f7fc fedc 	bl	80001f0 <memchr>
 8003438:	2800      	cmp	r0, #0
 800343a:	d037      	beq.n	80034ac <_vfiprintf_r+0x1f8>
 800343c:	4b26      	ldr	r3, [pc, #152]	; (80034d8 <_vfiprintf_r+0x224>)
 800343e:	bb1b      	cbnz	r3, 8003488 <_vfiprintf_r+0x1d4>
 8003440:	9b03      	ldr	r3, [sp, #12]
 8003442:	3307      	adds	r3, #7
 8003444:	f023 0307 	bic.w	r3, r3, #7
 8003448:	3308      	adds	r3, #8
 800344a:	9303      	str	r3, [sp, #12]
 800344c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800344e:	444b      	add	r3, r9
 8003450:	9309      	str	r3, [sp, #36]	; 0x24
 8003452:	e750      	b.n	80032f6 <_vfiprintf_r+0x42>
 8003454:	fb05 3202 	mla	r2, r5, r2, r3
 8003458:	2001      	movs	r0, #1
 800345a:	4688      	mov	r8, r1
 800345c:	e78a      	b.n	8003374 <_vfiprintf_r+0xc0>
 800345e:	2300      	movs	r3, #0
 8003460:	f108 0801 	add.w	r8, r8, #1
 8003464:	9305      	str	r3, [sp, #20]
 8003466:	4619      	mov	r1, r3
 8003468:	250a      	movs	r5, #10
 800346a:	4640      	mov	r0, r8
 800346c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003470:	3a30      	subs	r2, #48	; 0x30
 8003472:	2a09      	cmp	r2, #9
 8003474:	d903      	bls.n	800347e <_vfiprintf_r+0x1ca>
 8003476:	2b00      	cmp	r3, #0
 8003478:	d0c3      	beq.n	8003402 <_vfiprintf_r+0x14e>
 800347a:	9105      	str	r1, [sp, #20]
 800347c:	e7c1      	b.n	8003402 <_vfiprintf_r+0x14e>
 800347e:	fb05 2101 	mla	r1, r5, r1, r2
 8003482:	2301      	movs	r3, #1
 8003484:	4680      	mov	r8, r0
 8003486:	e7f0      	b.n	800346a <_vfiprintf_r+0x1b6>
 8003488:	ab03      	add	r3, sp, #12
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	4622      	mov	r2, r4
 800348e:	4b13      	ldr	r3, [pc, #76]	; (80034dc <_vfiprintf_r+0x228>)
 8003490:	a904      	add	r1, sp, #16
 8003492:	4630      	mov	r0, r6
 8003494:	f3af 8000 	nop.w
 8003498:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
 800349c:	4681      	mov	r9, r0
 800349e:	d1d5      	bne.n	800344c <_vfiprintf_r+0x198>
 80034a0:	89a3      	ldrh	r3, [r4, #12]
 80034a2:	065b      	lsls	r3, r3, #25
 80034a4:	f53f af7e 	bmi.w	80033a4 <_vfiprintf_r+0xf0>
 80034a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034aa:	e77d      	b.n	80033a8 <_vfiprintf_r+0xf4>
 80034ac:	ab03      	add	r3, sp, #12
 80034ae:	9300      	str	r3, [sp, #0]
 80034b0:	4622      	mov	r2, r4
 80034b2:	4b0a      	ldr	r3, [pc, #40]	; (80034dc <_vfiprintf_r+0x228>)
 80034b4:	a904      	add	r1, sp, #16
 80034b6:	4630      	mov	r0, r6
 80034b8:	f000 f888 	bl	80035cc <_printf_i>
 80034bc:	e7ec      	b.n	8003498 <_vfiprintf_r+0x1e4>
 80034be:	bf00      	nop
 80034c0:	080039e8 	.word	0x080039e8
 80034c4:	08003a2c 	.word	0x08003a2c
 80034c8:	08003a08 	.word	0x08003a08
 80034cc:	080039c8 	.word	0x080039c8
 80034d0:	08003a32 	.word	0x08003a32
 80034d4:	08003a36 	.word	0x08003a36
 80034d8:	00000000 	.word	0x00000000
 80034dc:	0800328f 	.word	0x0800328f

080034e0 <_printf_common>:
 80034e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034e4:	4691      	mov	r9, r2
 80034e6:	461f      	mov	r7, r3
 80034e8:	688a      	ldr	r2, [r1, #8]
 80034ea:	690b      	ldr	r3, [r1, #16]
 80034ec:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80034f0:	4293      	cmp	r3, r2
 80034f2:	bfb8      	it	lt
 80034f4:	4613      	movlt	r3, r2
 80034f6:	f8c9 3000 	str.w	r3, [r9]
 80034fa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80034fe:	4606      	mov	r6, r0
 8003500:	460c      	mov	r4, r1
 8003502:	b112      	cbz	r2, 800350a <_printf_common+0x2a>
 8003504:	3301      	adds	r3, #1
 8003506:	f8c9 3000 	str.w	r3, [r9]
 800350a:	6823      	ldr	r3, [r4, #0]
 800350c:	0699      	lsls	r1, r3, #26
 800350e:	bf42      	ittt	mi
 8003510:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003514:	3302      	addmi	r3, #2
 8003516:	f8c9 3000 	strmi.w	r3, [r9]
 800351a:	6825      	ldr	r5, [r4, #0]
 800351c:	f015 0506 	ands.w	r5, r5, #6
 8003520:	d107      	bne.n	8003532 <_printf_common+0x52>
 8003522:	f104 0a19 	add.w	sl, r4, #25
 8003526:	68e3      	ldr	r3, [r4, #12]
 8003528:	f8d9 2000 	ldr.w	r2, [r9]
 800352c:	1a9b      	subs	r3, r3, r2
 800352e:	42ab      	cmp	r3, r5
 8003530:	dc28      	bgt.n	8003584 <_printf_common+0xa4>
 8003532:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003536:	6822      	ldr	r2, [r4, #0]
 8003538:	3300      	adds	r3, #0
 800353a:	bf18      	it	ne
 800353c:	2301      	movne	r3, #1
 800353e:	0692      	lsls	r2, r2, #26
 8003540:	d42d      	bmi.n	800359e <_printf_common+0xbe>
 8003542:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003546:	4639      	mov	r1, r7
 8003548:	4630      	mov	r0, r6
 800354a:	47c0      	blx	r8
 800354c:	3001      	adds	r0, #1
 800354e:	d020      	beq.n	8003592 <_printf_common+0xb2>
 8003550:	6823      	ldr	r3, [r4, #0]
 8003552:	68e5      	ldr	r5, [r4, #12]
 8003554:	f8d9 2000 	ldr.w	r2, [r9]
 8003558:	f003 0306 	and.w	r3, r3, #6
 800355c:	2b04      	cmp	r3, #4
 800355e:	bf08      	it	eq
 8003560:	1aad      	subeq	r5, r5, r2
 8003562:	68a3      	ldr	r3, [r4, #8]
 8003564:	6922      	ldr	r2, [r4, #16]
 8003566:	bf0c      	ite	eq
 8003568:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800356c:	2500      	movne	r5, #0
 800356e:	4293      	cmp	r3, r2
 8003570:	bfc4      	itt	gt
 8003572:	1a9b      	subgt	r3, r3, r2
 8003574:	18ed      	addgt	r5, r5, r3
 8003576:	f04f 0900 	mov.w	r9, #0
 800357a:	341a      	adds	r4, #26
 800357c:	454d      	cmp	r5, r9
 800357e:	d11a      	bne.n	80035b6 <_printf_common+0xd6>
 8003580:	2000      	movs	r0, #0
 8003582:	e008      	b.n	8003596 <_printf_common+0xb6>
 8003584:	2301      	movs	r3, #1
 8003586:	4652      	mov	r2, sl
 8003588:	4639      	mov	r1, r7
 800358a:	4630      	mov	r0, r6
 800358c:	47c0      	blx	r8
 800358e:	3001      	adds	r0, #1
 8003590:	d103      	bne.n	800359a <_printf_common+0xba>
 8003592:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800359a:	3501      	adds	r5, #1
 800359c:	e7c3      	b.n	8003526 <_printf_common+0x46>
 800359e:	18e1      	adds	r1, r4, r3
 80035a0:	1c5a      	adds	r2, r3, #1
 80035a2:	2030      	movs	r0, #48	; 0x30
 80035a4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035a8:	4422      	add	r2, r4
 80035aa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035ae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035b2:	3302      	adds	r3, #2
 80035b4:	e7c5      	b.n	8003542 <_printf_common+0x62>
 80035b6:	2301      	movs	r3, #1
 80035b8:	4622      	mov	r2, r4
 80035ba:	4639      	mov	r1, r7
 80035bc:	4630      	mov	r0, r6
 80035be:	47c0      	blx	r8
 80035c0:	3001      	adds	r0, #1
 80035c2:	d0e6      	beq.n	8003592 <_printf_common+0xb2>
 80035c4:	f109 0901 	add.w	r9, r9, #1
 80035c8:	e7d8      	b.n	800357c <_printf_common+0x9c>
	...

080035cc <_printf_i>:
 80035cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80035d0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80035d4:	460c      	mov	r4, r1
 80035d6:	7e09      	ldrb	r1, [r1, #24]
 80035d8:	b085      	sub	sp, #20
 80035da:	296e      	cmp	r1, #110	; 0x6e
 80035dc:	4617      	mov	r7, r2
 80035de:	4606      	mov	r6, r0
 80035e0:	4698      	mov	r8, r3
 80035e2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80035e4:	f000 80b3 	beq.w	800374e <_printf_i+0x182>
 80035e8:	d822      	bhi.n	8003630 <_printf_i+0x64>
 80035ea:	2963      	cmp	r1, #99	; 0x63
 80035ec:	d036      	beq.n	800365c <_printf_i+0x90>
 80035ee:	d80a      	bhi.n	8003606 <_printf_i+0x3a>
 80035f0:	2900      	cmp	r1, #0
 80035f2:	f000 80b9 	beq.w	8003768 <_printf_i+0x19c>
 80035f6:	2958      	cmp	r1, #88	; 0x58
 80035f8:	f000 8083 	beq.w	8003702 <_printf_i+0x136>
 80035fc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003600:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003604:	e032      	b.n	800366c <_printf_i+0xa0>
 8003606:	2964      	cmp	r1, #100	; 0x64
 8003608:	d001      	beq.n	800360e <_printf_i+0x42>
 800360a:	2969      	cmp	r1, #105	; 0x69
 800360c:	d1f6      	bne.n	80035fc <_printf_i+0x30>
 800360e:	6820      	ldr	r0, [r4, #0]
 8003610:	6813      	ldr	r3, [r2, #0]
 8003612:	0605      	lsls	r5, r0, #24
 8003614:	f103 0104 	add.w	r1, r3, #4
 8003618:	d52a      	bpl.n	8003670 <_printf_i+0xa4>
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	6011      	str	r1, [r2, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	da03      	bge.n	800362a <_printf_i+0x5e>
 8003622:	222d      	movs	r2, #45	; 0x2d
 8003624:	425b      	negs	r3, r3
 8003626:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800362a:	486f      	ldr	r0, [pc, #444]	; (80037e8 <_printf_i+0x21c>)
 800362c:	220a      	movs	r2, #10
 800362e:	e039      	b.n	80036a4 <_printf_i+0xd8>
 8003630:	2973      	cmp	r1, #115	; 0x73
 8003632:	f000 809d 	beq.w	8003770 <_printf_i+0x1a4>
 8003636:	d808      	bhi.n	800364a <_printf_i+0x7e>
 8003638:	296f      	cmp	r1, #111	; 0x6f
 800363a:	d020      	beq.n	800367e <_printf_i+0xb2>
 800363c:	2970      	cmp	r1, #112	; 0x70
 800363e:	d1dd      	bne.n	80035fc <_printf_i+0x30>
 8003640:	6823      	ldr	r3, [r4, #0]
 8003642:	f043 0320 	orr.w	r3, r3, #32
 8003646:	6023      	str	r3, [r4, #0]
 8003648:	e003      	b.n	8003652 <_printf_i+0x86>
 800364a:	2975      	cmp	r1, #117	; 0x75
 800364c:	d017      	beq.n	800367e <_printf_i+0xb2>
 800364e:	2978      	cmp	r1, #120	; 0x78
 8003650:	d1d4      	bne.n	80035fc <_printf_i+0x30>
 8003652:	2378      	movs	r3, #120	; 0x78
 8003654:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003658:	4864      	ldr	r0, [pc, #400]	; (80037ec <_printf_i+0x220>)
 800365a:	e055      	b.n	8003708 <_printf_i+0x13c>
 800365c:	6813      	ldr	r3, [r2, #0]
 800365e:	1d19      	adds	r1, r3, #4
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	6011      	str	r1, [r2, #0]
 8003664:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003668:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800366c:	2301      	movs	r3, #1
 800366e:	e08c      	b.n	800378a <_printf_i+0x1be>
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	6011      	str	r1, [r2, #0]
 8003674:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003678:	bf18      	it	ne
 800367a:	b21b      	sxthne	r3, r3
 800367c:	e7cf      	b.n	800361e <_printf_i+0x52>
 800367e:	6813      	ldr	r3, [r2, #0]
 8003680:	6825      	ldr	r5, [r4, #0]
 8003682:	1d18      	adds	r0, r3, #4
 8003684:	6010      	str	r0, [r2, #0]
 8003686:	0628      	lsls	r0, r5, #24
 8003688:	d501      	bpl.n	800368e <_printf_i+0xc2>
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	e002      	b.n	8003694 <_printf_i+0xc8>
 800368e:	0668      	lsls	r0, r5, #25
 8003690:	d5fb      	bpl.n	800368a <_printf_i+0xbe>
 8003692:	881b      	ldrh	r3, [r3, #0]
 8003694:	4854      	ldr	r0, [pc, #336]	; (80037e8 <_printf_i+0x21c>)
 8003696:	296f      	cmp	r1, #111	; 0x6f
 8003698:	bf14      	ite	ne
 800369a:	220a      	movne	r2, #10
 800369c:	2208      	moveq	r2, #8
 800369e:	2100      	movs	r1, #0
 80036a0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80036a4:	6865      	ldr	r5, [r4, #4]
 80036a6:	60a5      	str	r5, [r4, #8]
 80036a8:	2d00      	cmp	r5, #0
 80036aa:	f2c0 8095 	blt.w	80037d8 <_printf_i+0x20c>
 80036ae:	6821      	ldr	r1, [r4, #0]
 80036b0:	f021 0104 	bic.w	r1, r1, #4
 80036b4:	6021      	str	r1, [r4, #0]
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d13d      	bne.n	8003736 <_printf_i+0x16a>
 80036ba:	2d00      	cmp	r5, #0
 80036bc:	f040 808e 	bne.w	80037dc <_printf_i+0x210>
 80036c0:	4665      	mov	r5, ip
 80036c2:	2a08      	cmp	r2, #8
 80036c4:	d10b      	bne.n	80036de <_printf_i+0x112>
 80036c6:	6823      	ldr	r3, [r4, #0]
 80036c8:	07db      	lsls	r3, r3, #31
 80036ca:	d508      	bpl.n	80036de <_printf_i+0x112>
 80036cc:	6923      	ldr	r3, [r4, #16]
 80036ce:	6862      	ldr	r2, [r4, #4]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	bfde      	ittt	le
 80036d4:	2330      	movle	r3, #48	; 0x30
 80036d6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80036da:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80036de:	ebac 0305 	sub.w	r3, ip, r5
 80036e2:	6123      	str	r3, [r4, #16]
 80036e4:	f8cd 8000 	str.w	r8, [sp]
 80036e8:	463b      	mov	r3, r7
 80036ea:	aa03      	add	r2, sp, #12
 80036ec:	4621      	mov	r1, r4
 80036ee:	4630      	mov	r0, r6
 80036f0:	f7ff fef6 	bl	80034e0 <_printf_common>
 80036f4:	3001      	adds	r0, #1
 80036f6:	d14d      	bne.n	8003794 <_printf_i+0x1c8>
 80036f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80036fc:	b005      	add	sp, #20
 80036fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003702:	4839      	ldr	r0, [pc, #228]	; (80037e8 <_printf_i+0x21c>)
 8003704:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003708:	6813      	ldr	r3, [r2, #0]
 800370a:	6821      	ldr	r1, [r4, #0]
 800370c:	1d1d      	adds	r5, r3, #4
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	6015      	str	r5, [r2, #0]
 8003712:	060a      	lsls	r2, r1, #24
 8003714:	d50b      	bpl.n	800372e <_printf_i+0x162>
 8003716:	07ca      	lsls	r2, r1, #31
 8003718:	bf44      	itt	mi
 800371a:	f041 0120 	orrmi.w	r1, r1, #32
 800371e:	6021      	strmi	r1, [r4, #0]
 8003720:	b91b      	cbnz	r3, 800372a <_printf_i+0x15e>
 8003722:	6822      	ldr	r2, [r4, #0]
 8003724:	f022 0220 	bic.w	r2, r2, #32
 8003728:	6022      	str	r2, [r4, #0]
 800372a:	2210      	movs	r2, #16
 800372c:	e7b7      	b.n	800369e <_printf_i+0xd2>
 800372e:	064d      	lsls	r5, r1, #25
 8003730:	bf48      	it	mi
 8003732:	b29b      	uxthmi	r3, r3
 8003734:	e7ef      	b.n	8003716 <_printf_i+0x14a>
 8003736:	4665      	mov	r5, ip
 8003738:	fbb3 f1f2 	udiv	r1, r3, r2
 800373c:	fb02 3311 	mls	r3, r2, r1, r3
 8003740:	5cc3      	ldrb	r3, [r0, r3]
 8003742:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003746:	460b      	mov	r3, r1
 8003748:	2900      	cmp	r1, #0
 800374a:	d1f5      	bne.n	8003738 <_printf_i+0x16c>
 800374c:	e7b9      	b.n	80036c2 <_printf_i+0xf6>
 800374e:	6813      	ldr	r3, [r2, #0]
 8003750:	6825      	ldr	r5, [r4, #0]
 8003752:	6961      	ldr	r1, [r4, #20]
 8003754:	1d18      	adds	r0, r3, #4
 8003756:	6010      	str	r0, [r2, #0]
 8003758:	0628      	lsls	r0, r5, #24
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	d501      	bpl.n	8003762 <_printf_i+0x196>
 800375e:	6019      	str	r1, [r3, #0]
 8003760:	e002      	b.n	8003768 <_printf_i+0x19c>
 8003762:	066a      	lsls	r2, r5, #25
 8003764:	d5fb      	bpl.n	800375e <_printf_i+0x192>
 8003766:	8019      	strh	r1, [r3, #0]
 8003768:	2300      	movs	r3, #0
 800376a:	6123      	str	r3, [r4, #16]
 800376c:	4665      	mov	r5, ip
 800376e:	e7b9      	b.n	80036e4 <_printf_i+0x118>
 8003770:	6813      	ldr	r3, [r2, #0]
 8003772:	1d19      	adds	r1, r3, #4
 8003774:	6011      	str	r1, [r2, #0]
 8003776:	681d      	ldr	r5, [r3, #0]
 8003778:	6862      	ldr	r2, [r4, #4]
 800377a:	2100      	movs	r1, #0
 800377c:	4628      	mov	r0, r5
 800377e:	f7fc fd37 	bl	80001f0 <memchr>
 8003782:	b108      	cbz	r0, 8003788 <_printf_i+0x1bc>
 8003784:	1b40      	subs	r0, r0, r5
 8003786:	6060      	str	r0, [r4, #4]
 8003788:	6863      	ldr	r3, [r4, #4]
 800378a:	6123      	str	r3, [r4, #16]
 800378c:	2300      	movs	r3, #0
 800378e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003792:	e7a7      	b.n	80036e4 <_printf_i+0x118>
 8003794:	6923      	ldr	r3, [r4, #16]
 8003796:	462a      	mov	r2, r5
 8003798:	4639      	mov	r1, r7
 800379a:	4630      	mov	r0, r6
 800379c:	47c0      	blx	r8
 800379e:	3001      	adds	r0, #1
 80037a0:	d0aa      	beq.n	80036f8 <_printf_i+0x12c>
 80037a2:	6823      	ldr	r3, [r4, #0]
 80037a4:	079b      	lsls	r3, r3, #30
 80037a6:	d413      	bmi.n	80037d0 <_printf_i+0x204>
 80037a8:	68e0      	ldr	r0, [r4, #12]
 80037aa:	9b03      	ldr	r3, [sp, #12]
 80037ac:	4298      	cmp	r0, r3
 80037ae:	bfb8      	it	lt
 80037b0:	4618      	movlt	r0, r3
 80037b2:	e7a3      	b.n	80036fc <_printf_i+0x130>
 80037b4:	2301      	movs	r3, #1
 80037b6:	464a      	mov	r2, r9
 80037b8:	4639      	mov	r1, r7
 80037ba:	4630      	mov	r0, r6
 80037bc:	47c0      	blx	r8
 80037be:	3001      	adds	r0, #1
 80037c0:	d09a      	beq.n	80036f8 <_printf_i+0x12c>
 80037c2:	3501      	adds	r5, #1
 80037c4:	68e3      	ldr	r3, [r4, #12]
 80037c6:	9a03      	ldr	r2, [sp, #12]
 80037c8:	1a9b      	subs	r3, r3, r2
 80037ca:	42ab      	cmp	r3, r5
 80037cc:	dcf2      	bgt.n	80037b4 <_printf_i+0x1e8>
 80037ce:	e7eb      	b.n	80037a8 <_printf_i+0x1dc>
 80037d0:	2500      	movs	r5, #0
 80037d2:	f104 0919 	add.w	r9, r4, #25
 80037d6:	e7f5      	b.n	80037c4 <_printf_i+0x1f8>
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d1ac      	bne.n	8003736 <_printf_i+0x16a>
 80037dc:	7803      	ldrb	r3, [r0, #0]
 80037de:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80037e2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80037e6:	e76c      	b.n	80036c2 <_printf_i+0xf6>
 80037e8:	08003a3d 	.word	0x08003a3d
 80037ec:	08003a4e 	.word	0x08003a4e

080037f0 <_read_r>:
 80037f0:	b538      	push	{r3, r4, r5, lr}
 80037f2:	4c07      	ldr	r4, [pc, #28]	; (8003810 <_read_r+0x20>)
 80037f4:	4605      	mov	r5, r0
 80037f6:	4608      	mov	r0, r1
 80037f8:	4611      	mov	r1, r2
 80037fa:	2200      	movs	r2, #0
 80037fc:	6022      	str	r2, [r4, #0]
 80037fe:	461a      	mov	r2, r3
 8003800:	f7fe fe50 	bl	80024a4 <_read>
 8003804:	1c43      	adds	r3, r0, #1
 8003806:	d102      	bne.n	800380e <_read_r+0x1e>
 8003808:	6823      	ldr	r3, [r4, #0]
 800380a:	b103      	cbz	r3, 800380e <_read_r+0x1e>
 800380c:	602b      	str	r3, [r5, #0]
 800380e:	bd38      	pop	{r3, r4, r5, pc}
 8003810:	20000178 	.word	0x20000178

08003814 <_fstat_r>:
 8003814:	b538      	push	{r3, r4, r5, lr}
 8003816:	4c07      	ldr	r4, [pc, #28]	; (8003834 <_fstat_r+0x20>)
 8003818:	2300      	movs	r3, #0
 800381a:	4605      	mov	r5, r0
 800381c:	4608      	mov	r0, r1
 800381e:	4611      	mov	r1, r2
 8003820:	6023      	str	r3, [r4, #0]
 8003822:	f7fe ff1e 	bl	8002662 <_fstat>
 8003826:	1c43      	adds	r3, r0, #1
 8003828:	d102      	bne.n	8003830 <_fstat_r+0x1c>
 800382a:	6823      	ldr	r3, [r4, #0]
 800382c:	b103      	cbz	r3, 8003830 <_fstat_r+0x1c>
 800382e:	602b      	str	r3, [r5, #0]
 8003830:	bd38      	pop	{r3, r4, r5, pc}
 8003832:	bf00      	nop
 8003834:	20000178 	.word	0x20000178

08003838 <_isatty_r>:
 8003838:	b538      	push	{r3, r4, r5, lr}
 800383a:	4c06      	ldr	r4, [pc, #24]	; (8003854 <_isatty_r+0x1c>)
 800383c:	2300      	movs	r3, #0
 800383e:	4605      	mov	r5, r0
 8003840:	4608      	mov	r0, r1
 8003842:	6023      	str	r3, [r4, #0]
 8003844:	f7ff f872 	bl	800292c <_isatty>
 8003848:	1c43      	adds	r3, r0, #1
 800384a:	d102      	bne.n	8003852 <_isatty_r+0x1a>
 800384c:	6823      	ldr	r3, [r4, #0]
 800384e:	b103      	cbz	r3, 8003852 <_isatty_r+0x1a>
 8003850:	602b      	str	r3, [r5, #0]
 8003852:	bd38      	pop	{r3, r4, r5, pc}
 8003854:	20000178 	.word	0x20000178

08003858 <_init>:
 8003858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800385a:	bf00      	nop
 800385c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800385e:	bc08      	pop	{r3}
 8003860:	469e      	mov	lr, r3
 8003862:	4770      	bx	lr

08003864 <_fini>:
 8003864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003866:	bf00      	nop
 8003868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800386a:	bc08      	pop	{r3}
 800386c:	469e      	mov	lr, r3
 800386e:	4770      	bx	lr
